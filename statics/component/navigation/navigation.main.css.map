{"version":3,"sources":["<no source>","../../../navigation.main.css","../../../../../../src/component/navigation/main.scss","../../../../../../src/component/navigation/style/module/_nav.scss","../../../../../../src/core/style/action/tool/_link.scss","../../../../../../src/core/style/typography/tool/_list.scss","../../../../../../src/core/style/typography/tool/_styles.scss","../../../../../../src/core/style/spacing/tool/_z-index.scss","../../../../../../src/core/style/spacing/setting/_z-index.scss","../../../../../../src/core/style/selector/tool/_block.scss","../../../../../../src/core/style/display/tool/_display.scss","../../../../../../src/core/style/spacing/tool/_space.scss","../../../../../../src/core/style/spacing/tool/_position.scss","../../../../../../src/core/style/selector/tool/_pseudo.scss","../../../../../../src/core/style/spacing/tool/_size.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../../../../src/core/style/action/tool/_hover.scss","../../../../../../src/core/style/spacing/function/_space.scss","../../../../../../src/core/style/icon/_tool.scss","../../../../../../src/component/navigation/style/module/_menu.scss","../../../../../../src/component/navigation/style/module/_mega-menu.scss","../../../../../../src/core/style/typography/tool/_font-weight.scss","../../../../../../src/core/style/typography/setting/_font-weight.scss","../../../../../../src/core/style/selector/tool/_breakpoint.scss","../../../../../../src/component/navigation/style/scheme/_nav.scss","../../../../../../src/component/navigation/style/scheme/_mega-menu.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACKhB;;cDFc;AEEd;ECyBE,qBAAgB;EAChB,0BAAqB;ECNrB,eAAU;EACV,eAAU;EACV,aAAW;EACX,aAAW;EACX,aAAW;EACX,cAAY;EACZ,kBAAa;ECwEX,iBAA6B;EAA7B,kBAA6B;ECvF/B,aCGS;APFX;;AMIM;;EAEE,aAAS;ANDjB;;AQJE;ECPE,aAAa;EAIb,sBAAgB;ECgBhB,SRjBiB;EQiBjB,URhBkB;AFctB;;AQXG;;;;ENeK,iBAAiB;AFgBzB;;AQzBE;ECbE,aAAa;EAIb,sBAAgB;EAIhB,oBAAa;EP4Cb,cAAc;ESzDhB,kBAAU;AX2FZ;;AYjFE;EAGI,WV+CgB;EU3ChB,cAAS;EDjBb,kBAAU;EAER,MAAK;EAGL,QAAO;EAGP,SAAQ;EAGR,OAAM;EEuCJ,WAAO;EAGP,YAAQ;EXSR,oBAAoB;EYpCtB,8FAAU;Ad8Ed;;AE5BE;;EW1BI,WAAO;EHzBT,kBRsDqB;EG7DvB,eAA6C;EAG3C,mBAA6D;EH4D7D,gBAAgB;;Ea9BhB,0BAAa;EAOb,4BAAc;EDhCd,mCAAU;AdqGd;;AEnDG;;EAcG,kBAAkB;EYhEpB,qCAAU;AdgHd;;AYhIE;;EAGI,WV8EkB;EU1ElB,cAAS;EDjBb,kBAAU;EAER,QAAK;EASL,WAAM;EEuCJ,UAAO;EAGP,cAAQ;EHhCR,oBMmEa;EF9Df,sDAAU;;EAyBN,mDAAgB;EAIhB,qDAAiB;Ad8FzB;;AEnDE;EACE,cAAc;AFsDlB;;AEvDG;EAIG,oBAAoB;EACpB,eAAe;AFuDrB;;AEnDE;EOtGE,aAAa;EAQb,mBAAa;EAIb,8BAAiB;EP4FjB,mBAAmB;AFwDvB;;AY3JE;EAGI,WKwEU;EArBZ,cAAc;EACd,qBAAqB;EACrB,sBAAsB;EACtB,8BAA8B;EJjB5B,uBAAO;EAGP,wBAAQ;EIgBV,4BAA4B;EAC5B,oBAAoB;EApBpB,mEArCiD;EAsCjD,2DAtCiD;EAmBjD,iBAAY;EPXV,mBMmEa;ENnEb,eR6FuB;EACvB,0BAA0B;AFoEhC;;AY7KE;EVkHM,0BAA0B;AFoFlC;;AkBjNA;EZWE,aCCU;EGcR,eM+De;EN/Df,eM+De;EHtCb,WAAO;AbqKb;;AMxMM;;EAEE,aAAS;AN2MjB;;AQhNE;EEaE,SQPiB;EROjB,wBM+De;AhB6JnB;;AQzOG;;;;;;EM4MC,gBAAgB;AdkDpB;;AkB3QA;ERcM,kBM2Ea;EN1Eb,mBM0Ea;AhBuLnB;;AYrQE;EM0BI,OAAO;AlB+Ob;;AmBpRA;EbWE,aCCU;EGcR,0BSxByB;ETwBzB,uBSvBsB;ELwBtB,iDAAU;;EAyBN,8CAAgB;EAIhB,gDAAiB;Ad2OzB;;AMnRM;;EAEE,aAAS;ANsRjB;;AmBxSA;EAYI,aAAa;AnB2SjB;;AmBvTA;EA0BI,aAAa;AnB4SjB;;AmBtUA;ETcM,kBM2Ea;EN1Eb,mBM0Ea;AhBwPnB;;AYtUE;EOyBI,OAAO;AnBuTb;;AmBnTE;ET1BI,kBM2Ea;EN1Eb,mBM0Ea;ENnEb,iBMmEa;;EXSf,0BAA6B;EAA7B,2BAA6B;ALiQjC;;AmBlTE;ECnCA,gBCPS;ArB6WX;;AmB/TE;ET/BI,sBMmEa;ELxFjB,kBAAU;AXwXZ;;AY9WE;EAGI,WO2CgB;EPvChB,cAAS;EDjBb,kBAAU;EAER,MAAK;EAGL,QAAO;EAGP,SAAQ;EAGR,OAAM;EEuCJ,WAAO;EAGP,YAAQ;EMKR,oBAAoB;ELhCtB,gDAAU;Ad2Wd;;AY3XE;EEgBE,uDAAU;AdgZd;;AYhaE;EEgBE,iDAAU;AdoZd;;AsBlaI;EdAF;INAI,mBAAmB;IACnB,iBAAiB;IQYnB,eM+De;EhB1DjB;;EQlBC;;;IESG,oBMmEa;EhBrDjB;;EQvBC;;;;IEaC,aM+De;IN/Df,SRMuB;IWmBrB,WAAO;IAGP,YAAQ;IXpBJ,kBcuDS;IdtDT,mBAAmB;EFsB3B;;EQ5CC;;;;IN8BS;;cFqBE;EACZ;;EYtDA;;;;IDVA,kBAAU;IAER,SAAK;IAML,SAAQ;IAGR,OAAM;IEuCJ,WAAO;IAGP,WAAQ;IHhCR,aRkB6B;EFqCjC;;EQhEC;;;;IFFD,aCGS;EPqET;;EQhEA;INgDI,iBAAiB;IAEjB,uBAAuB;EF0C3B;;EYpGA;IAGI,aVsDoB;EF8CxB;;EE3CI;IACE,qBAAqB;EF6C3B;;EExCA;;IG1DA,mBAA6C;IAG3C,mBAA6D;ELgH/D;;EE1BA;IQlFE,+BM+De;Id+Bb,2BAA2B;EFmD/B;;EkB3KF;IPCE,kBAAU;IAER,SAAK;IDmBH,oBMmEa;INnEb,oBMmEa;EhB4IjB;;EY1NA;IAGI,WMHe;INOf,cAAS;IDjBb,kBAAU;IAER,MAAK;IAGL,QAAO;IAGP,SAAQ;IAGR,OAAM;IDcN,yBM+De;IV9EjB,WCNS;IOsBP,iDAAU;;IAyBN,8CAAgB;IAIhB,gDAAiB;EdwLvB;;EQnOA;IEaE,iBM+De;IHtCb,YAAO;EbwMX;;EkB3PF;IR0BI,qBM+De;IF9Df,kEAAU;Ed8PZ;;EY9QA;IM+BM,OAAO;ElBkPb;;EmB5RF;IRCE,kBAAU;IAER,SAAK;IAGL,QAAO;IAMP,OAAM;IDcN,gBSnBwB;ITmBxB,oBM+De;EhByNjB;;EYvSA;IAGI,WOGkB;IPClB,cAAS;ICoCT,WAAQ;IHxCR,kBM2Ea;IN1Eb,mBM0Ea;INnEb,mBMmEa;IF9Df,oDAAU;;IAyBN,iDAAgB;IAIhB,mDAAiB;EdyQvB;;EmBjUF;IA4BM,aAAa;EnB+SjB;;EmB3UF;IT0BI,qBM+De;EhB6PjB;;EmB9SA;ITlBI,cSqBoB;IT7BpB,eS8BkB;IT7BlB,gBS6BkB;EnB4TtB;;EY7VA;IAGI,aOiDoB;EnB4UxB;;EuB7XG;ITaD,qCAAU;IAAV,oDAAU;;IAyBN,iDAAgB;IAIhB,mDAAiB;Ed0WvB;;EwBhZE;IVSA,iEAAU;EdsbZ;AA5aF","file":"navigation.main.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  NAVIGATION\n\\* ˍˍˍˍˍˍˍˍˍ */\n.fr-nav {\n  --underline-img: none;\n  --link-blank-content: none;\n  --ul-type: none;\n  --ol-type: none;\n  --ul-start: 0;\n  --ol-start: 0;\n  --xl-block: 0;\n  --li-bottom: 0;\n  --ol-content: none;\n  --text-spacing: 0;\n  --title-spacing: 0;\n  z-index: 3000;\n}\n\n.fr-nav *:focus,\n.fr-nav *:focus-visible {\n  z-index: 3500;\n}\n\n.fr-nav__list {\n  display: flex;\n  flex-direction: column;\n  margin: 0;\n  padding: 0;\n}\n\n@media (min-width: 62em) {\n  .fr-nav__list {\n    flex-direction: row;\n    flex-wrap: nowrap;\n    margin: 0 -1rem;\n  }\n  .fr-nav__list > *:first-child:nth-last-child(2) ~ *,\n  .fr-nav__list > *:first-child:nth-last-child(3) ~ *,\n  .fr-nav__list > *:first-child:nth-last-child(4) ~ * {\n    margin-left: 1.25rem;\n  }\n}\n\n.fr-nav__list > .fr-nav__link,\n.fr-nav__list > .fr-nav__btn,\n.fr-nav__list > * > .fr-nav__link,\n.fr-nav__list > * > .fr-nav__btn {\n  font-weight: bold;\n}\n\n@media (min-width: 62em) {\n  .fr-nav__list > .fr-nav__link,\n  .fr-nav__list > .fr-nav__btn,\n  .fr-nav__list > * > .fr-nav__link,\n  .fr-nav__list > * > .fr-nav__btn {\n    padding: 1rem;\n    margin: 0;\n    width: auto;\n    height: 100%;\n    min-height: 3.5rem;\n    font-weight: normal;\n  }\n  .fr-nav__list > .fr-nav__link[aria-current],\n  .fr-nav__list > .fr-nav__btn[aria-current],\n  .fr-nav__list > * > .fr-nav__link[aria-current],\n  .fr-nav__list > * > .fr-nav__btn[aria-current] {\n    /**\n             * Pour conserver le souligné de selection  par dessus la barre de mega-menu\n             */\n  }\n  .fr-nav__list > .fr-nav__link[aria-current]::before,\n  .fr-nav__list > .fr-nav__btn[aria-current]::before,\n  .fr-nav__list > * > .fr-nav__link[aria-current]::before,\n  .fr-nav__list > * > .fr-nav__btn[aria-current]::before {\n    position: absolute;\n    top: auto;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 2px;\n    margin-top: 0;\n  }\n  .fr-nav__list > .fr-nav__link[aria-current]:not([aria-expanded=\"true\"]),\n  .fr-nav__list > .fr-nav__btn[aria-current]:not([aria-expanded=\"true\"]),\n  .fr-nav__list > * > .fr-nav__link[aria-current]:not([aria-expanded=\"true\"]),\n  .fr-nav__list > * > .fr-nav__btn[aria-current]:not([aria-expanded=\"true\"]) {\n    z-index: 3000;\n  }\n}\n\n.fr-nav__item {\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  flex: 0 1 auto;\n  position: relative;\n}\n\n.fr-nav__item::before {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n\n@media (min-width: 62em) {\n  .fr-nav__item {\n    position: initial;\n    align-items: flex-start;\n  }\n  .fr-nav__item::before {\n    content: none;\n  }\n  .fr-nav__item--align-right {\n    align-items: flex-end;\n  }\n}\n\n.fr-nav__link, .fr-nav__btn {\n  width: 100%;\n  padding: 0.75rem 0;\n  font-size:  1rem ;\n  line-height:  1.5rem ;\n  text-align: left;\n  --hover-tint: var(--hover);\n  --active-tint: var(--active);\n}\n\n@media (min-width: 62em) {\n  .fr-nav__link, .fr-nav__btn {\n    font-size:  0.875rem ;\n    line-height:  1.5rem ;\n  }\n}\n\n.fr-nav__link[aria-current], .fr-nav__btn[aria-current] {\n  position: relative;\n}\n\n.fr-nav__link[aria-current]::before, .fr-nav__btn[aria-current]::before {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: 50%;\n  left: -1rem;\n  width: 2px;\n  height: 1.5rem;\n  margin-top: -0.75rem;\n}\n\n.fr-nav__link {\n  display: block;\n}\n\n.fr-nav__link[aria-current]:not([href]) {\n  pointer-events: none;\n  cursor: default;\n}\n\n.fr-nav__btn {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: row;\n}\n\n@media (min-width: 62em) {\n  .fr-nav__btn {\n    padding: 1rem 0.75rem 1rem 1rem;\n  }\n}\n\n.fr-nav__btn::after {\n  content: \"\";\n  flex: 0 0 auto;\n  display: inline-block;\n  vertical-align: middle;\n  background-color: currentColor;\n  width: var(--icon-size);\n  height: var(--icon-size);\n  -webkit-mask-size: 100% 100%;\n  mask-size: 100% 100%;\n}\n\n.fr-nav__btn::after {\n  -webkit-mask-image: url(\"../../icons/system/arrow-down-s-line.svg\");\n  mask-image: url(\"../../icons/system/arrow-down-s-line.svg\");\n}\n\n.fr-nav__btn::after {\n  --icon-size: 1rem;\n}\n\n.fr-nav__btn::after {\n  margin-left: 0.5rem;\n  margin-right: 0;\n  transition: transform 0.3s;\n}\n\n@media (min-width: 62em) {\n  .fr-nav__btn {\n    justify-content: flex-start;\n  }\n}\n\n.fr-nav__btn[aria-expanded=\"true\"]::after {\n  transform: rotate(-180deg);\n}\n\n.fr-menu {\n  z-index: 2000;\n  margin: 0 -1rem;\n  padding: 0 1rem;\n  width: auto;\n}\n\n.fr-menu *:focus,\n.fr-menu *:focus-visible {\n  z-index: 2500;\n}\n\n@media (min-width: 62em) {\n  .fr-menu {\n    position: absolute;\n    top: 100%;\n    margin-top: -0.25rem;\n    padding-top: 0.25rem;\n  }\n  .fr-menu::after {\n    content: \"\";\n    display: block;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    margin: 0.25rem 1rem 2rem;\n    z-index: -1;\n  }\n}\n\n.fr-menu__list {\n  margin: 0;\n  padding: 0.5rem 0 1.5rem;\n}\n\n@media (min-width: 62em) {\n  .fr-menu__list {\n    padding: 0 0 2rem;\n  }\n}\n\n@media (min-width: 62em) {\n  .fr-menu__list {\n    width: 20rem;\n  }\n}\n\n.fr-menu__list > *:first-child,\n.fr-menu__list > *:first-child > .fr-nav__link,\n.fr-menu__list > *:hover,\n.fr-menu__list > *:hover > .fr-nav__link,\n.fr-menu__list > *:hover + *,\n.fr-menu__list > *:hover + * > .fr-nav__link {\n  box-shadow: none;\n}\n\n.fr-menu .fr-nav__link {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n\n.fr-menu .fr-nav__link::before {\n  left: 0;\n}\n\n@media (min-width: 62em) {\n  .fr-menu .fr-nav__link {\n    padding: 0.75rem 1rem;\n  }\n  .fr-menu .fr-nav__link::before {\n    left: 0;\n  }\n}\n\n.fr-mega-menu {\n  z-index: 2000;\n  margin: -0.25rem -1rem 1px;\n  padding: 0.25rem 1rem 0;\n}\n\n.fr-mega-menu *:focus,\n.fr-mega-menu *:focus-visible {\n  z-index: 2500;\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu {\n    position: absolute;\n    top: 100%;\n    right: 0;\n    left: 0;\n    margin: -2px 0 0;\n    padding: 0 0 2.25rem;\n  }\n}\n\n.fr-mega-menu:focus {\n  outline: none;\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu > .fr-container::before {\n    content: \"\";\n    display: block;\n    height: 2px;\n    margin-left: -1rem;\n    margin-right: -1rem;\n    margin-bottom: 1rem;\n  }\n}\n\n.fr-mega-menu .fr-btn--close {\n  display: none;\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu .fr-btn--close {\n    display: flex;\n  }\n}\n\n.fr-mega-menu .fr-nav__link {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu .fr-nav__link {\n    padding: 0.75rem 1rem;\n  }\n}\n\n.fr-mega-menu .fr-nav__link::before {\n  left: 0;\n}\n\n.fr-mega-menu__leader {\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-top: 1rem;\n  --text-spacing: 0 0 0.5rem;\n  --title-spacing: 0 0 0.5rem;\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu__leader {\n    padding-top: 0;\n  }\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu__leader {\n    padding-left: 0;\n    padding-right: 0;\n  }\n}\n\n.fr-mega-menu__category {\n  font-weight: 700;\n}\n\n.fr-mega-menu__list {\n  padding-bottom: 1.5rem;\n  position: relative;\n}\n\n.fr-mega-menu__list::before {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu__list::before {\n    content: none;\n  }\n}\n\n.fr-nav__link, .fr-nav__btn {\n  color: var(--text-action-high-grey);\n}\n\n.fr-nav__link[aria-current], .fr-nav__btn[aria-current] {\n  color: var(--text-active-blue-france);\n}\n\n.fr-nav__link[aria-current]::before, .fr-nav__btn[aria-current]::before {\n  background-color: var(--background-active-blue-france);\n  --hover: var(--background-active-blue-france-hover);\n  --active: var(--background-active-blue-france-active);\n}\n\n@media (min-width: 62em) {\n  .fr-nav__btn[aria-expanded=\"true\"] {\n    color: var(--text-active-blue-france);\n    background-color: var(--background-open-blue-france);\n    --hover: var(--background-open-blue-france-hover);\n    --active: var(--background-open-blue-france-active);\n  }\n}\n\n.fr-nav__item::before {\n  box-shadow: 0 -1px 0 0 var(--border-default-grey), inset 0 -1px 0 0 var(--border-default-grey);\n}\n\n.fr-nav__item:first-child::before {\n  box-shadow: inset 0 -1px 0 0 var(--border-default-grey);\n}\n\n.fr-nav__item:last-child::before {\n  box-shadow: 0 -1px 0 0 var(--border-default-grey);\n}\n\n@media (min-width: 62em) {\n  .fr-menu::after {\n    background-color: var(--background-elevated-grey);\n    --hover: var(--background-elevated-grey-hover);\n    --active: var(--background-elevated-grey-active);\n  }\n  .fr-menu .fr-nav__link {\n    box-shadow: 0 calc(-1rem - 1px) 0 -1rem var(--border-default-grey);\n  }\n}\n\n.fr-mega-menu {\n  background-color: var(--background-elevated-grey);\n  --hover: var(--background-elevated-grey-hover);\n  --active: var(--background-elevated-grey-active);\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu > .fr-container::before {\n    background-color: var(--background-open-blue-france);\n    --hover: var(--background-open-blue-france-hover);\n    --active: var(--background-open-blue-france-active);\n  }\n}\n\n.fr-mega-menu__list::before {\n  box-shadow: 0 1px 0 0 var(--border-default-grey);\n}\n\n@media (min-width: 62em) {\n  .fr-mega-menu__category {\n    box-shadow: 0 calc(1rem + 1px) 0 -1rem var(--border-default-grey);\n  }\n}\n","////\n/// Navigation Main\n/// @group navigation\n////\n\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  NAVIGATION\n\\* ˍˍˍˍˍˍˍˍˍ */\n\n@import '../../core/style/path/path-2';\n@import 'index';\n@import 'style/module';\n@import 'style/scheme';\n\n@include _navigation-scheme;\n","////\n/// Navigation Module : Nav\n/// @group navigation\n////\n\n#{ns(nav)} {\n  @include disable-underline;\n  @include disable-list-style;\n  @include set-text-margin(0);\n  @include set-title-margin(0);\n  @include z-index(nav, true);\n\n  @include list {\n    @include display-flex(column);\n    @include margin(0);\n    @include padding(0);\n\n    @include respond-from(lg) {\n      flex-direction: row;\n      flex-wrap: nowrap;\n      @include margin(0 -4v);\n\n      & > *:first-child:nth-last-child(2) ~ *,\n      & > *:first-child:nth-last-child(3) ~ *,\n      & > *:first-child:nth-last-child(4) ~ * {\n        @include margin-left(5v);\n      }\n    }\n\n    &,\n    & > * {\n      & > #{ns(nav__link)},\n      & > #{ns(nav__btn)} {\n        font-weight: bold;\n\n        @include respond-from(lg) {\n          @include padding(4v);\n          @include margin(0);\n          @include size(auto, 100%);\n          min-height: space(14v);\n          font-weight: normal;\n\n          &[aria-current] {\n            @include before {\n              @include absolute(auto, null, 0, 0, 100%, 2px);\n              @include margin-top(0);\n            }\n\n            /**\n             * Pour conserver le souligné de selection  par dessus la barre de mega-menu\n             */\n            &:not([aria-expanded=\"true\"]) {\n              @include z-index(nav);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @include list-item {\n    // TODO: supprimer la stylisation de la liste item, trouver une solution différente pour l'affichage du menu à droite et la barre d'espacement grise en mobile\n    @include display-flex(column, stretch);\n    flex: 0 1 auto;\n\n    @include relative;\n    @include before('', block) {\n      @include absolute(0, 0, 0 , 0, 100%, 100%);\n      pointer-events: none;\n    }\n\n    @include respond-from(lg) {\n      position: initial;\n      @include before(none);\n      align-items: flex-start;\n\n      &--align-right {\n        align-items: flex-end;\n      }\n    }\n  }\n\n  &__link,\n  &__btn {\n    @include size(100%);\n    @include padding(3v 0);\n    @include text-style(md);\n    text-align: left;\n\n    @include respond-from(lg) {\n      @include text-style(sm);\n    }\n\n    @include enable-tint;\n\n    &[aria-current] {\n      position: relative;\n      @include before('', block) {\n        @include absolute(50%, null, null, -4v, 2px, 6v);\n        @include margin-top(-3v);\n      }\n    }\n  }\n\n  &__link {\n    display: block;\n\n    &[aria-current]:not([href]) {\n      pointer-events: none;\n      cursor: default;\n    }\n  }\n\n  &__btn {\n    @include display-flex(null, center, space-between);\n    flex-direction: row;\n    @include padding(4v 3v 4v 4v, lg);\n\n    @include icon(arrow-down-s-line, sm, after) {\n      @include margin-left(2v);\n      @include margin-right(0);\n      transition: transform 0.3s;\n    }\n\n    @include respond-from(lg) {\n      justify-content: flex-start;\n    }\n\n    &[aria-expanded=\"true\"] {\n      @include after {\n        transform: rotate(-180deg);\n      }\n    }\n  }\n}\n","////\n/// Core Tool : Reset\n/// @group core\n////\n\n$underline-thickness: 0.0625em;\n\n@mixin a-reset ($minimal: false) {\n  text-decoration: none;\n  @if not $minimal {\n    color: inherit;\n  }\n}\n\n@mixin enable-underline() {\n  --underline-img: linear-gradient(0deg, currentColor, currentColor);\n  --link-blank-content: '';\n}\n\n@mixin enable-underline-legacy() {\n  [href] {\n    text-decoration: underline;\n  }\n\n  [target='_blank']::after {\n    content: '';\n  }\n}\n\n@mixin disable-underline() {\n  --underline-img: none;\n  --link-blank-content: none;\n}\n\n@mixin disable-underline-legacy() {\n  [href] {\n    text-decoration: none;\n  }\n\n  [target='_blank']::after {\n    content: none;\n  }\n}\n\n@mixin link-underline() {\n  background-image: var(--underline-img), var(--underline-img);\n  background-position: 50% calc(50% + #{10.5 * $underline-thickness }), 50% calc(50% + #{10.5 * $underline-thickness });\n  background-repeat: no-repeat, no-repeat;\n  transition: background-size 0s;\n  @include link-underline-background-size(100%, 0);\n}\n\n@mixin link-underline-background-size($base-width: 100%, $hover-width: 100%) {\n  background-size: #{$hover-width} #{$underline-thickness * 2 }, #{$base-width} #{$underline-thickness };\n}\n\n@mixin hover-underline () {\n  &:hover,\n  &:active {\n    @include link-underline-background-size(100%, 100%);\n  }\n}\n\n@mixin link-blank() {\n  @include icon-style(after) {\n    @include margin-left(1v);\n    @include margin-bottom(1v);\n  }\n  @include icon-size(sm, after);\n  @include icon-content(external-link-line, after, null, var(--link-blank-content));\n}\n","////\n/// Core Tool : Reset list\n/// @group core\n////\n\n@mixin enable-list-style() {\n  $selector: null;\n\n  @if & == null {\n    $selector: ':root';\n  }\n\n  @include nest($selector) {\n    --ul-type: disc;\n    --ol-type: decimal;\n    --ul-start: #{space(4v)};\n    --ol-start: #{space(6v)};\n    --xl-block: #{space(2v)};\n    --li-bottom: #{space(1v)};\n    --xl-base: 1em;\n    --ol-content: counters(li-counter, \".\") \".\\00a0\\00a0\";\n  }\n}\n\n@mixin disable-list-style() {\n  --ul-type: none;\n  --ol-type: none;\n  --ul-start: 0;\n  --ol-start: 0;\n  --xl-block: 0;\n  --li-bottom: 0;\n  --ol-content: none;\n}\n\n@mixin enable-list-style-legacy($unify: false) {\n  $ul: ul;\n  $ol: ol;\n\n  @if $unify {\n    $ul: selector-associate('&', 'ul');\n    $ol: selector-associate('&', 'ol');\n  }\n\n  @at-root {\n    #{$ul} {\n      list-style-type: disc;\n    }\n\n    #{$ol} {\n      list-style-type: decimal;\n    }\n\n    #{$ul},\n    #{$ol} {\n      @include padding-left(4v);\n      @include margin-y(2v);\n    }\n  }\n}\n\n@mixin disable-list-style-legacy($unify: false) {\n  $ul: & ul;\n  $ol: & ol;\n\n  @if $unify {\n    $ul: selector-associate(&, ul);\n    $ol: selector-associate(&, ol);\n  }\n\n  @at-root {\n    #{$ul} {\n      list-style-type: none;\n    }\n\n    #{$ol} {\n      list-style-type: none;\n    }\n\n    #{$ul},\n    #{$ol} {\n      @include padding-left(0);\n      @include margin-y(0);\n    }\n  }\n}\n","////\n/// Core Tool : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} font-size($font-size) #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin( var(#{'--' + map-get($settings, 'margin') + '-spacing'}) );\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin _set-typography-var($name, $value, $bp: null) {\n  @if $bp != null {\n    @include respond-from(#{$bp}) {\n      --#{$name}-spacing: #{space($value)};\n    }\n  }\n  @else {\n    --#{$name}-spacing: #{space($value)};\n  }\n}\n\n@mixin set-title-margin($margin, $bp:null) {\n  @include _set-typography-var(title, $margin, $bp);\n}\n\n@mixin set-text-margin($margin, $bp:null) {\n  @include _set-typography-var(text, $margin, $bp);\n}\n\n@mixin set-display-margin($margin, $bp:null) {\n  @include _set-typography-var(display, $margin, $bp);\n}\n","////\n/// Core Tool : Spacing z-index\n/// @group core\n////\n\n/// Fonction de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@function z-index($index-name) {\n  @return map-get($z-indexes, $index-name);\n}\n\n/// Mixin de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@mixin z-index($index-name, $focus: false) {\n  z-index: z-index($index-name);\n  @if $focus {\n    $focus-z-index: z-index($index-name + '-focus');\n\n    @if $focus-z-index != null {\n      *:focus,\n      *:focus-visible {\n        z-index: #{$focus-z-index};\n      }\n    }\n  }\n}\n","////\n/// Core Setting : Spacing z-index\n/// @group core\n////\n\n/// Liste des z-index présent dans le DS\n/// @type map\n$z-indexes: (\n  auto: auto,\n  below: -2,\n  under: -1,\n  base: 0,\n  over: 1,\n  above: 2,\n  focus: 500,\n  higher: 1000,\n  higher-focus: 1500,\n  menu: 2000,\n  menu-focus: 2500,\n  nav: 3000,\n  nav-focus: 3500,\n  consent: 4000,\n  consent-focus: 4500,\n  modal: 5000,\n  modal-focus: 5500,\n  modal-footer: 6000,\n  modal-footer-focus: 6500,\n);\n","////\n/// Core Tool : Selector block\n/// @group core\n////\n\n@mixin title() {\n  &__title {\n    @content;\n  }\n}\n\n@mixin body() {\n  &__body {\n    @content;\n  }\n}\n\n@mixin list() {\n  &__list {\n    @content;\n  }\n}\n\n@mixin list-item() {\n  &__item {\n    @content;\n  }\n}\n","////\n/// Core Tool : Display display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n/// Set space property\n///\n/// @param {String} $property ['margin'] - propriété à appliquer à l'espacement `['margin', 'padding']`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `['x', 'y', 'top', 'right', 'bottom', 'left']`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing('margin', 6v, 'bottom');\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tool : Spacing position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin top($top) {\n  top: space($top);\n}\n\n@mixin right($top) {\n  right: space($top);\n}\n\n@mixin bottom($top) {\n  bottom: space($top);\n}\n\n@mixin left($top) {\n  left: space($top);\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Tool : Spacing size\n/// @group core\n////\n\n@mixin width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n  }\n}\n\n@mixin min-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      min-width: #{space($width)};\n    }\n  }\n}\n\n@mixin max-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      max-width: #{space($width)};\n    }\n  }\n}\n\n@mixin height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      min-height: #{space($height)};\n    }\n  }\n}\n\n@mixin max-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      max-height: #{space($height)};\n    }\n  }\n}\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $standalone: map-get($options, standalone);\n\n  $legacy-target: null;\n  @if $legacy {\n    $legacy-target: ie11;\n  }\n\n  $tokens: normalise-tokens($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n\n  $colors: get-colors($tokens, $type, $options);\n  $result: get-result($colors, $value);\n  $result: important($result, $important);\n\n  @include legacy($legacy-target) {\n    #{$prop}: #{$result};\n  }\n\n  @if ($hover == true or ($hover == inherit and $legacy == false)) and ($context == background and length($tokens) == 1) {\n    $nest-hover: null;\n    $prop-hover: --hover;\n    $result-hover: #{important(get-color(nth($tokens, 1), decision, (var: true, hover: true)), $important)};\n    $nest-active: null;\n    $prop-active: --active;\n    $result-active: #{important(get-color(nth($tokens, 1), decision, (var: true, active: true)), $important)};\n\n    @if $legacy or $standalone {\n      $type: hex;\n      $option: (theme: light);\n\n      $nest-hover: '&:hover';\n      $prop-hover: $prop;\n      $result-hover: #{important(get-color(nth($tokens, 1), hex, (hover: true)), $important)};\n      $nest-active: '&:active';\n      $prop-active: $prop;\n      $result-active: #{important(get-color(nth($tokens, 1), hex, (active: true)), $important)};\n    }\n\n    @include legacy($legacy-target) {\n      @include nest($nest-hover) {\n        #{$prop-hover}: #{$result-hover};\n      }\n\n      @include nest($nest-active) {\n        #{$prop-active}: #{$result-active};\n      }\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-color($tokens, $options:()) {\n  @if not map-has-key($options, hover) {\n    $options: map-merge($options, (hover: inherit));\n  }\n  @include _scheme-element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin scheme-element-bg-transparent($options) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $tokens: normalise-tokens(default grey, background);\n  $value: important(transparent, $important);\n\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n\n      @if $hover {\n        &:hover {\n          background-color: rgba(0, 0, 0, 0.05);\n        }\n\n        &:active {\n          background-color: rgba(0, 0, 0, 0.1);\n        }\n      }\n    }\n  }\n  @else {\n    background-color: #{$value};\n    @if $hover {\n      --hover: inherit;\n      --active: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: get-tokens-length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-text-color($tokens, $options) {\n  @include _scheme-element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-fill-color($tokens, $options) {\n  @include _scheme-element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map-has-key($options, side) {\n    $prop:border-#{map-get($options, side)};\n  }\n  @include _scheme-element($prop, border, $tokens, $options, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($tokens, $options, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: get-tokens-length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $tokens, $options, space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Core Tool : Action Hover\n/// @group core\n////\n\n@mixin hover-media-query () {\n  @media (hover: hover) and (pointer: fine) {\n    @content;\n  }\n}\n\n@mixin hover-type-selector($elements, $type: all, $check-disabled: false) {\n  $selectors: ();\n\n  @each $element, $setting in $elements {\n    $hover: map-get($setting, hover);\n    $selector: map-get($setting, selector);\n    @if $hover {\n      @if $type == map-get($hover, type) or $type == all {\n        $nested: $selector;\n        @if $check-disabled {\n          $nested: nest($selector, map-get($hover, selector));\n        }\n        $associated: $nested;\n        @if & != null and quote(&) != ':root' {\n          $associated: selector-associate(quote(&), $nested);\n        }\n        $selectors: append($selectors, $associated, 'comma');\n      }\n    }\n  }\n\n  @at-root #{$selectors} {\n    @content;\n  }\n}\n\n@mixin hover-tint () {\n  &:hover {\n    background-color: var(--hover-tint);\n  }\n\n  &:active {\n    background-color: var(--active-tint);\n  }\n}\n\n@mixin enable-tint () {\n  @include tint-enabled(true, true);\n}\n\n@mixin disable-tint() {\n  @include tint-enabled(false, false);\n}\n\n@mixin tint-enabled ($hover: null, $active: null) {\n  @if $hover {\n    --hover-tint: var(--hover);\n  }\n  @else if $hover == false {\n    --hover-tint: transparent;\n  }\n\n  @if $active {\n    --active-tint: var(--active);\n  }\n  @else if $active == false {\n    --active-tint: transparent;\n  }\n}\n\n@mixin hover-brighten ($element, $img) {\n  @at-root #{$element} {\n    &:hover {\n      #{$img} {\n        --brightness: calc(100% + var(--brighten) * #{$hover-brighten});\n      }\n    }\n\n    &:active {\n      #{$img} {\n        --brightness: calc(100% + var(--brighten) * #{$hover-brighten * 2});\n      }\n    }\n  }\n}\n\n@mixin hover-brighten-filter () {\n  filter: brightness(var(--brightness));\n}\n","////\n/// Core Function : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if type-of($value) == list {\n    $list: ();\n    $separator: list-separator($value);\n    @each $v in $value {\n      $list: append($list, space($v), $separator);\n    }\n    @return $list;\n  }\n  @if type-of($value) == string {\n    $c: str-index($value, '(');\n    @if $c {\n      $b: null;\n      $n: 0;\n      $i: $c + 1;\n      $l: str-length($value);\n      @while $b == null and $i <= $l {\n        $char: str-slice($value, $i, $i);\n        @if $char == '(' {\n          $n: $n + 1;\n        }\n        @else if $char == ')' {\n          @if $n > 0 {\n            $n: $n - 1;\n          }\n          @else {\n            $b: $i;\n          }\n        }\n        $i: $i + 1;\n      }\n\n      $start: unquote('');\n      $middle: space(str-slice($value, $c + 1, $b - 1));\n      $end: unquote('');\n\n      @if $c > 1 {\n        $start: space(str-slice($value, 1, $c - 1));\n      }\n\n      $l: str-length($value);\n      @if $b < $l {\n        $end: space(str-slice($value, $b + 1, $l));\n      }\n\n      @return unquote('#{$start}(#{$middle})#{$end}');\n    }\n\n    @if str-index($value, ',') {\n      @return space(str-split($value, ','));\n    }\n\n    @if str-index($value, ' ') {\n      @return space(str-split($value, ' '));\n    }\n\n    $value: unquote($value);\n  }\n\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $v: quote($value);\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * $V;\n  }\n  @else if is-unit($value, w) {\n    @return $q * $W;\n  }\n  @return $value;\n}\n","////\n/// Core Tool : Icon\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size ['md'] - Icon size from `$icon-size-map` (Default to 'md' = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icon-size(sm);\n///     height: icon-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@function get-url-icon($icon, $important: false) {\n  $config: map-get($icons-config, $icon);\n  $url: url('#{$dist-path}#{map-get($config, path)}');\n  @return important($url, $important);\n}\n\n@mixin with-icon($size:md) {\n  @include has-icon {\n    @include before {\n      @include icon-size($size);\n      @content;\n    }\n  }\n}\n\n@mixin icon-size($size:md, $pseudo: null) {\n  $selector: null;\n  @if $pseudo == before or $pseudo == after {\n    $selector: '&::#{$pseudo}';\n  }\n  @include nest($selector) {\n    --icon-size: #{icon-size($size)};\n  }\n}\n\n@mixin icon-size-legacy($size:md, $pseudo: null) {\n  $selector: null;\n  @if $pseudo == before or $pseudo == after {\n    $selector: '&::#{$pseudo}';\n  }\n  @include nest($selector) {\n    $size: icon-size($size);\n    @include size($size, $size);\n  }\n}\n\n@mixin icon-content($icon, $pseudo: before, $important: false, $content: null) {\n  @include _pseudo($pseudo, $content) {\n    $url: get-url-icon($icon, $important);\n    -webkit-mask-image: $url;\n    mask-image: $url;\n  }\n}\n\n@mixin icon-content-legacy($icon, $pseudo: before, $important: false, $content: null) {\n  @include _pseudo($pseudo, $content) {\n    $url: get-url-icon($icon, $important);\n    background-image: $url;\n  }\n}\n\n@mixin icon-style($pseudo: before, $content: '') {\n  @include _pseudo($pseudo, $content) {\n    flex: 0 0 auto;\n    display: inline-block;\n    vertical-align: middle;\n    background-color: currentColor;\n    @include size(var(--icon-size), var(--icon-size));\n    -webkit-mask-size: 100% 100%;\n    mask-size: 100% 100%;\n    @content;\n  }\n}\n\n@mixin icon-style-legacy($pseudo: before, $content: null) {\n  @include _pseudo($pseudo, $content) {\n    background-color: transparent;\n    background-size: 100%;\n    background-repeat: no-repeat;\n  }\n}\n\n@mixin icon($icon: null, $size: md, $pseudo: before, $init: true) {\n  @if $init {\n    $content: '';\n    @if $icon == null {\n      $content: null;\n    }\n    @include icon-style($pseudo, $content);\n  }\n\n  @if $icon != null {\n    @include icon-content($icon, $pseudo);\n  }\n\n  @if $size != null {\n    @include icon-size($size, $pseudo);\n  }\n\n  @include _pseudo($pseudo) {\n    @content;\n  }\n}\n\n@mixin icon-legacy($icon: null, $size: md, $pseudo: before, $init: true) {\n  @if $init {\n    $content: null;\n    @if $icon != null {\n      content: '';\n    }\n    @include icon-style-legacy($pseudo, $content);\n  }\n\n  @if $icon != null {\n    @include icon-content-legacy($icon, $pseudo);\n  }\n\n  @if $size != null {\n    @include icon-size-legacy($size, $pseudo);\n  }\n\n  @include _pseudo($pseudo) {\n    @content;\n  }\n}\n\n@function filter-icons($category, $config: $icons-config) {\n  $filtered: ();\n  @each $icon, $setting in $config {\n    @if map-get($setting, category) == $category {\n      $filtered: map-merge($filtered, (#{$icon}: $setting));\n    }\n  }\n  @return $filtered;\n}\n\n@mixin generate-icons($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-content($icon, before, true);\n    }\n  }\n}\n\n@mixin generate-icons-legacy($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-content-legacy($icon, before, true);\n    }\n  }\n}\n","////\n/// Navigation Module : Menu\n/// @group navigation\n////\n\n#{ns(menu)} {\n  @include z-index(menu, true);\n  @include margin(0 -4v);\n  @include padding(0 4v);\n  @include size(auto);\n\n  @include respond-from(lg) {\n    @include absolute(100%);\n    @include margin-top(-1v);\n    @include padding-top(1v);\n\n    @include after('', block) {\n      @include absolute(0,0,0,0);\n      @include margin(1v 4v 8v);\n      @include z-index(under);\n    }\n  }\n\n  @include list {\n    @include margin(0);\n    @include padding(2v 0 6v);\n    @include padding(0 0 8v, lg);\n    @include size(80v, null, lg);\n\n    & > *:first-child,\n    & > *:hover,\n    & > *:hover + * {\n      &,\n      & > #{ns(nav__link)} {\n        @include scheme-element-no-box-shadow;\n      }\n    }\n  }\n\n  #{ns(nav__link)} {\n    @include padding-x(4v);\n    @include before {\n      left: 0;\n    }\n    @include respond-from(lg) {\n      @include padding(3v 4v);\n      @include before {\n        left: 0;\n      }\n    }\n  }\n}\n","////\n/// Navigation Module : Mega menu\n/// @group navigation\n////\n\n#{ns(mega-menu)} {\n  @include z-index(menu, true);\n  @include margin(-1v -4v 1px);\n  @include padding(1v 4v 0);\n\n  @include respond-from(lg) {\n    @include absolute(100%, 0, null, 0);\n    @include margin(-2px 0 0);\n    @include padding(0 0 9v);\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  > #{ns(container)} {\n    @include respond-from(lg) {\n      @include before('', block) {\n        @include size(null, 2px);\n        @include margin-x(-4v);\n        @include margin-bottom(4v);\n      }\n    }\n  }\n\n  #{ns(btn--close)} {\n    display: none;\n    @include respond-from(lg) {\n      display: flex;\n    }\n  }\n\n  #{ns(nav__link)} {\n    @include padding-x(4v);\n    @include padding(3v 4v, lg);\n    @include before {\n      left: 0;\n    }\n  }\n\n  &__leader {\n    @include padding-x(4v);\n    @include padding-top(4v);\n    @include padding-top(0, lg);\n    @include padding-x(0, lg);\n    @include set-text-margin(0 0 2v);\n    @include set-title-margin(0 0 2v);\n  }\n\n  &__category {\n    @include font-weight(bold);\n  }\n\n  &__list {\n    @include padding-bottom(6v);\n\n    @include relative;\n    @include before('', block) {\n      @include absolute(0, 0, 0 , 0, 100%, 100%);\n      pointer-events: none;\n    }\n\n    @include respond-from(lg) {\n      @include before(none);\n    }\n  }\n}\n","////\n/// Core Tool : Typography font-weight\n/// @group core\n////\n\n/// Return font-weight value from font-weight map.\n///\n/// @param {String} $scale ['regular'] - Type scale value from `$weight-scale` (Default to 'regular' = 400)\n///\n/// @example scss - Set font-weight to bold (700)\n///   .foo {\n///     font-weight: font-weight('bold');\n///   }\n\n@function font-weight($scale: regular) {\n  @return map-get($font-weight-scale, $scale);\n}\n\n@mixin font-weight($scale) {\n  font-weight: font-weight($scale);\n}\n\n@mixin build-utillity-font-weight() {\n  $fontWeightValues: map-get($font-weight-vars, values);\n  @if $fontWeightValues == 'all' {\n    $fontWeightValues: map-keys($font-weight-names);\n  }\n  @each $weight in $fontWeightValues {\n    $name: map-get($font-weight-names, $weight);\n    & #{ns('text--' + $name)} {\n      font-weight: #{$weight} !important;\n    }\n  }\n}\n","////\n/// Core Setting : Typography font-weight\n/// @group core\n////\n\n$font-weight-scale: (\n  thin: 100,\n  extra-light: 200,\n  light: 300,\n  regular: 400,\n  medium: 500,\n  semi-bold: 600,\n  bold: 700,\n  extra-bold: 800,\n  heavy: 900\n);\n\n$font-weight-names: (\n  100: thin,\n  200: extra-light,\n  300: light,\n  400: regular,\n  500: medium,\n  600: semi-bold,\n  700: bold,\n  800: extra-bold,\n  900: heavy\n);\n\n$font-weight-vars: (\n  values: 300 400 500 700 900,\n  breakpoints: false\n) !default;\n\n@if (map-get($typography-vars, font-weight) != null) {\n  $font-weight-vars: map-get($typography-vars, font-weight);\n}\n","////\n/// Core Tool : Selector Breakpoint\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Navigation Scheme : Nav\n/// @group navigation\n////\n\n@mixin _navigation-scheme-nav($legacy: false) {\n  #{ns(nav)} {\n    &__link,\n    &__btn {\n      @include scheme-element-text-color(action-high grey, (legacy: $legacy));\n\n      &[aria-current] {\n        @include scheme-element-text-color(active blue-france, (legacy: $legacy));\n        @include before {\n          @include scheme-element-bg-color(active blue-france, (legacy: $legacy));\n        }\n      }\n    }\n\n    &__btn {\n      &[aria-expanded=\"true\"] {\n        @include respond-from(lg) {\n          @include scheme-element-text-color(active blue-france, (legacy: $legacy));\n          @include scheme-element-bg-color(open blue-france, (legacy: $legacy));\n        }\n      }\n    }\n\n    @include list-item {\n      @include before {\n        @include scheme-element-box-shadow-color(default grey, (legacy:$legacy), top-1-out bottom-1-in);\n      }\n\n      &:first-child {\n        @include before {\n          @include scheme-element-box-shadow-color(default grey, (legacy:$legacy), bottom-1-in);\n        }\n      }\n\n      &:last-child {\n        @include before {\n          @include scheme-element-box-shadow-color(default grey, (legacy:$legacy), top-1-out);\n        }\n      }\n    }\n  }\n}\n","////\n/// Navigation Scheme : Mega menu\n/// @group navigation\n////\n\n@mixin _navigation-scheme-mega-menu($legacy: false) {\n  #{ns(mega-menu)} {\n    @include scheme-element-bg-color(elevated grey, (legacy:$legacy));\n\n    > #{ns(container)} {\n      @include respond-from(lg) {\n        @include before {\n          @include scheme-element-bg-color(open blue-france, (legacy:$legacy));\n        }\n      }\n    }\n\n    &__list {\n      @include before {\n        @include scheme-element-box-shadow-color(default grey, (legacy:$legacy), bottom-1-out);\n      }\n    }\n\n    &__category {\n      @include respond-from(lg) {\n        @include scheme-element-box-shadow-color(default grey, (legacy:$legacy), 0 calc(4v + 1px) 0 -4v $COLOR);\n      }\n    }\n  }\n}\n"]}