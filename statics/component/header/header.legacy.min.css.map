{"version":3,"sources":["<no source>","../../../../../../src/legacy/style/tool/_legacy.scss","../../../../../../src/core/style/typography/tool/_list.scss","../../../header.legacy.css","../../../../../../src/core/style/spacing/tool/_space.scss","../../../../../../src/core/style/action/tool/_link.scss","../../../../../../src/core/style/selector/tool/_pattern.scss","../../../../../../src/core/style/spacing/tool/_size.scss","../../../../../../src/component/header/style/_legacy.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../../../../src/component/header/style/_scheme.scss","../../../../../../src/core/style/color/tool/_disabled.scss","../../../../../../src/core/style/selector/tool/_pseudo.scss","../../../../../../src/core/style/selector/tool/_block.scss","../../../../../../src/component/header/deprecated/style/_scheme.scss","../../../../../../src/core/style/selector/tool/_breakpoint.scss"],"names":[],"mappings":"AAAA;;GAAA,ACcI,2DC4DA,4BACE,oBCrEJ,CDwEE,4BEtDE,eFyDmB,CE1DnB,YF0DmB,CEtDnB,cDfJ,CEuBA,kBACE,oBFrBF,CEwBA,iCACE,YFtBF,CGNU,spCC+CN,WAAQ,CAHR,UJ1BJ,CKEG,iCC8DC,4BAA6B,CA9D/B,aAAU,CDEN,gBLDN,CO3BA,WD0BE,qBNiBF,COxCE,oBDuBA,kCNuBF,COzCG,+BDgFC,4BAA6B,CA9D/B,mCAAU,CAAV,YAAU,CNmCZ,CM8BM,qCACE,gCN5BR,CM+BM,sCACE,+BN7BR,CQ1BQ,oFF+CJ,4BAA6B,CA9D/B,aNqDF,CMYM,gGACE,gCNJR,CMOM,kGACE,+BNLR,CO5EG,gCDyEC,4BAA6B,CA9D/B,YAAU,CN6EZ,CMZM,sCACE,gCNcR,CMXM,uCACE,+BNaR,CQpEQ,sFF+CJ,4BAA6B,CA9D/B,aN+FF,CM9BM,kGACE,gCNsCR,CMnCM,oGACE,+BNqCR,CS3HA,sCHgBE,kCNiHF,CU3IA,sCJ0BE,aNuHF,COzHG,2BDgEC,4BAA6B,CA9D/B,YAAU,CN6HZ,CM5DM,iCACE,gCN8DR,CM3DM,kCACE,+BN6DR,CQpHQ,4EF+CJ,4BAA6B,CA9D/B,aN+IF,CM9EM,wFACE,gCNsFR,CMnFM,0FACE,+BNqFR,CO7JG,iCDED,aNiKF,CO3LA,qBD0BE,qBN6KF,CWtMG,gCLuFC,4BAA6B,CA9D/B,mCAAU,CAAV,YAAU,CNmLZ,CMlHM,sCACE,gCNoHR,CMjHM,uCACE,+BNmHR,CQ1KQ,sFF+CJ,4BAA6B,CA9D/B,aNqMF,CMpIM,kGACE,gCN4IR,CMzIM,oGACE,+BN2IR,CMhJM,uCACE,gCN8JR,CM3JM,wCACE,+BN6JR,CQpNQ,wFF+CJ,4BAA6B,CA9D/B,aN+OF,CM9KM,oGACE,gCNsLR,CMnLM,sGACE,+BNqLR,CS3QA,uCHgBE,kCNiQF,CA/PF,CFpBI,qGO6BE,wBACE,aLLN,CKGE,qBAOI,gBAAiB,CADjB,eLLN,COrCA,4BD0BE,kCNuKF,CA3JF,CY1BI,wBLTA,oBDqNA,eNjKF,CACF","file":"header.legacy.min.css","sourcesContent":[null,"////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n","////\n/// Core Tool : Reset list\n/// @group core\n////\n\n@mixin enable-list-style() {\n  $selector: null;\n\n  @if & == null {\n    $selector: ':root';\n  }\n\n  @include nest($selector) {\n    --ul-type: disc;\n    --ol-type: decimal;\n    --ul-start: #{space(4v)};\n    --ol-start: #{space(6v)};\n    --xl-block: #{space(2v)};\n    --li-bottom: #{space(1v)};\n    --xl-base: 1em;\n    --ol-content: counters(li-counter, \".\") \".\\00a0\\00a0\";\n  }\n}\n\n@mixin disable-list-style() {\n  --ul-type: none;\n  --ol-type: none;\n  --ul-start: 0;\n  --ol-start: 0;\n  --xl-block: 0;\n  --li-bottom: 0;\n  --ol-content: none;\n}\n\n@mixin enable-list-style-legacy($unify: false) {\n  $ul: ul;\n  $ol: ol;\n\n  @if $unify {\n    $ul: selector-associate('&', 'ul');\n    $ol: selector-associate('&', 'ol');\n  }\n\n  @at-root {\n    #{$ul} {\n      list-style-type: disc;\n    }\n\n    #{$ol} {\n      list-style-type: decimal;\n    }\n\n    #{$ul},\n    #{$ol} {\n      @include padding-left(4v);\n      @include margin-y(2v);\n    }\n  }\n}\n\n@mixin disable-list-style-legacy($unify: false) {\n  $ul: & ul;\n  $ol: & ol;\n\n  @if $unify {\n    $ul: selector-associate(&, ul);\n    $ol: selector-associate(&, ol);\n  }\n\n  @at-root {\n    #{$ul} {\n      list-style-type: none;\n    }\n\n    #{$ol} {\n      list-style-type: none;\n    }\n\n    #{$ul},\n    #{$ol} {\n      @include padding-left(0);\n      @include margin-y(0);\n    }\n  }\n}\n","@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header ul {\n    list-style-type: none;\n  }\n  .fr-header ol {\n    list-style-type: none;\n  }\n  .fr-header ul,\n  .fr-header ol {\n    padding-left: 0;\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n  .fr-header [href] {\n    text-decoration: none;\n  }\n  .fr-header [target='_blank']::after {\n    content: none;\n  }\n  .fr-header .fr-btns-group:not(.fr-btns-group--sm):not(.fr-btns-group--lg):not([class^=\"fr-btns-group--icon-\"]):not([class*=\" fr-btns-group--icon-\"]) .fr-btn:not([class^=\"fr-icon-\"]):not([class*=\" fr-icon-\"]):not([class^=\"fr-fi-\"]):not([class*=\" fr-fi-\"]):not(.fr-btn--display)::before {\n    width: 1rem;\n    height: 1rem;\n  }\n  .fr-header .fr-btns-group:not(.fr-btns-group--sm):not(.fr-btns-group--lg):not([class^=\"fr-btns-group--icon-\"]):not([class*=\" fr-btns-group--icon-\"]) .fr-btn[class^=\"fr-icon-\"]::before, .fr-header .fr-btns-group:not(.fr-btns-group--sm):not(.fr-btns-group--lg):not([class^=\"fr-btns-group--icon-\"]):not([class*=\" fr-btns-group--icon-\"]) .fr-btn[class*=\" fr-icon-\"]::before, .fr-header .fr-btns-group:not(.fr-btns-group--sm):not(.fr-btns-group--lg):not([class^=\"fr-btns-group--icon-\"]):not([class*=\" fr-btns-group--icon-\"]) .fr-btn[class^=\"fr-fi-\"]::before, .fr-header .fr-btns-group:not(.fr-btns-group--sm):not(.fr-btns-group--lg):not([class^=\"fr-btns-group--icon-\"]):not([class*=\" fr-btns-group--icon-\"]) .fr-btn[class*=\" fr-fi-\"]::before {\n    width: 1rem;\n    height: 1rem;\n  }\n  .fr-header .fr-btns-group:not(.fr-btns-group--sm):not(.fr-btns-group--lg):not([class^=\"fr-btns-group--icon-\"]):not([class*=\" fr-btns-group--icon-\"]) .fr-btn.fr-btn--display::before {\n    width: 1rem;\n    height: 1rem;\n  }\n  .fr-header__tools-links .fr-link {\n    overflow: visible;\n  }\n}\n\n@media all and (min-width: 62em) and (-ms-high-contrast: none), (min-width: 62em) and (-ms-high-contrast: active) {\n  .fr-header__tools-links {\n    display: block;\n  }\n  .fr-header .fr-modal {\n    position: static;\n    overflow: visible;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header {\n    background-color: #fff;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__service {\n    box-shadow: inset 0 1px 0 0 #e5e5e5;\n  }\n}\n\n@media (min-width: 62em) {\n  .fr-header__service {\n    box-shadow: none;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__menu-links .fr-btn {\n    background-color: transparent;\n  }\n  .fr-header__menu-links .fr-btn:hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n  .fr-header__menu-links .fr-btn:active {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__menu-links .fr-btn {\n    color: #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__menu-links .fr-btn:disabled, .fr-header__menu-links a.fr-btn:not([href]) {\n    color: #929292;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__menu-links .fr-btn:disabled, .fr-header__menu-links a.fr-btn:not([href]) {\n    background-color: transparent;\n  }\n  .fr-header__menu-links .fr-btn:disabled:hover, .fr-header__menu-links a.fr-btn:not([href]):hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n  .fr-header__menu-links .fr-btn:disabled:active, .fr-header__menu-links a.fr-btn:not([href]):active {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__menu-links .fr-btn {\n    box-shadow: inset 0 -1px 0 0 #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__tools-links .fr-btn {\n    background-color: transparent;\n  }\n  .fr-header__tools-links .fr-btn:hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n  .fr-header__tools-links .fr-btn:active {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__tools-links .fr-btn {\n    color: #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__tools-links .fr-btn:disabled, .fr-header__tools-links a.fr-btn:not([href]) {\n    color: #929292;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__tools-links .fr-btn:disabled, .fr-header__tools-links a.fr-btn:not([href]) {\n    background-color: transparent;\n  }\n  .fr-header__tools-links .fr-btn:disabled:hover, .fr-header__tools-links a.fr-btn:not([href]):hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n  .fr-header__tools-links .fr-btn:disabled:active, .fr-header__tools-links a.fr-btn:not([href]):active {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__tools-links .fr-btn::after {\n    box-shadow: inset 0 0 0 1px #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__navbar .fr-service__title {\n    color: #161616;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__navbar .fr-btn {\n    background-color: transparent;\n  }\n  .fr-header__navbar .fr-btn:hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n  .fr-header__navbar .fr-btn:active {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__navbar .fr-btn {\n    color: #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__navbar .fr-btn:disabled, .fr-header__navbar a.fr-btn:not([href]) {\n    color: #929292;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__navbar .fr-btn:disabled, .fr-header__navbar a.fr-btn:not([href]) {\n    background-color: transparent;\n  }\n  .fr-header__navbar .fr-btn:disabled:hover, .fr-header__navbar a.fr-btn:not([href]):hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n  .fr-header__navbar .fr-btn:disabled:active, .fr-header__navbar a.fr-btn:not([href]):active {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__navbar .fr-btn--menu {\n    color: #3a3a3a;\n  }\n}\n\n@media all and (min-width: 62em) and (-ms-high-contrast: none), (min-width: 62em) and (-ms-high-contrast: active) {\n  .fr-header .fr-header__menu {\n    box-shadow: inset 0 1px 0 0 #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header .fr-modal {\n    background-color: #fff;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__menu-links .fr-link {\n    background-color: transparent;\n  }\n  .fr-header__menu-links .fr-link:hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n  .fr-header__menu-links .fr-link:active {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__menu-links .fr-link {\n    color: #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__menu-links .fr-link:disabled, .fr-header__menu-links a.fr-link:not([href]) {\n    color: #929292;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__menu-links .fr-link:disabled, .fr-header__menu-links a.fr-link:not([href]) {\n    background-color: transparent;\n  }\n  .fr-header__menu-links .fr-link:disabled:hover, .fr-header__menu-links a.fr-link:not([href]):hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n  .fr-header__menu-links .fr-link:disabled:active, .fr-header__menu-links a.fr-link:not([href]):active {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__menu-links .fr-link {\n    box-shadow: inset 0 -1px 0 0 #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__tools-links .fr-link {\n    background-color: transparent;\n  }\n  .fr-header__tools-links .fr-link:hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n  .fr-header__tools-links .fr-link:active {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__tools-links .fr-link {\n    color: #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__tools-links .fr-link:disabled, .fr-header__tools-links a.fr-link:not([href]) {\n    color: #929292;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__tools-links .fr-link:disabled, .fr-header__tools-links a.fr-link:not([href]) {\n    background-color: transparent;\n  }\n  .fr-header__tools-links .fr-link:disabled:hover, .fr-header__tools-links a.fr-link:not([href]):hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n  .fr-header__tools-links .fr-link:disabled:active, .fr-header__tools-links a.fr-link:not([href]):active {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-header__tools-links .fr-link::after {\n    box-shadow: inset 0 0 0 1px #e5e5e5;\n  }\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n/// Set space property\n///\n/// @param {String} $property ['margin'] - propriété à appliquer à l'espacement `['margin', 'padding']`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `['x', 'y', 'top', 'right', 'bottom', 'left']`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing('margin', 6v, 'bottom');\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tool : Reset\n/// @group core\n////\n\n$underline-thickness: 0.0625em;\n\n@mixin a-reset ($minimal: false) {\n  text-decoration: none;\n  @if not $minimal {\n    color: inherit;\n  }\n}\n\n@mixin enable-underline() {\n  --underline-img: linear-gradient(0deg, currentColor, currentColor);\n  --link-blank-content: '';\n}\n\n@mixin enable-underline-legacy() {\n  [href] {\n    text-decoration: underline;\n  }\n\n  [target='_blank']::after {\n    content: '';\n  }\n}\n\n@mixin disable-underline() {\n  --underline-img: none;\n  --link-blank-content: none;\n}\n\n@mixin disable-underline-legacy() {\n  [href] {\n    text-decoration: none;\n  }\n\n  [target='_blank']::after {\n    content: none;\n  }\n}\n\n@mixin link-underline() {\n  background-image: var(--underline-img), var(--underline-img);\n  background-position: 50% calc(50% + #{10.5 * $underline-thickness }), 50% calc(50% + #{10.5 * $underline-thickness });\n  background-repeat: no-repeat, no-repeat;\n  transition: background-size 0s;\n  @include link-underline-background-size(100%, 0);\n}\n\n@mixin link-underline-background-size($base-width: 100%, $hover-width: 100%) {\n  background-size: #{$hover-width} #{$underline-thickness * 2 }, #{$base-width} #{$underline-thickness };\n}\n\n@mixin hover-underline () {\n  &:hover,\n  &:active {\n    @include link-underline-background-size(100%, 100%);\n  }\n}\n\n@mixin link-blank() {\n  @include icon-style(after) {\n    @include margin-left(1v);\n    @include margin-bottom(1v);\n  }\n  @include icon-size(sm, after);\n  @include icon-content(external-link-line, after, null, var(--link-blank-content));\n}\n","////\n/// Core Tool : Selector pattern\n/// @group core\n////\n\n@mixin _class-pattern($selector, $unify: true) {\n  @if & == null {\n    @at-root #{$selector} {\n      @content;\n    }\n  }\n  @else if $unify {\n    @at-root #{selector-unify(&, $selector)} {\n      @content;\n    }\n  }\n  @else {\n    #{$selector} {\n      @content;\n    }\n  }\n}\n\n@mixin class-contains($unify: true, $patterns...) {\n\n  @if length($patterns) == 1 and length(nth($patterns, 1)) > 1 {\n    $patterns: nth($patterns, 1);\n  }\n\n  $selectors: '';\n\n  @each $pattern in $patterns {\n    $selectors: '#{$selectors}[class*=\"#{$pattern}\"]';\n  }\n\n  @include _class-pattern($selectors, $unify) {\n    @content;\n  }\n}\n\n@mixin class-not-contains($unify: true, $patterns...) {\n\n  @if length($patterns) == 1 and length(nth($patterns, 1)) > 1 {\n    $patterns: nth($patterns, 1);\n  }\n\n  $selectors: '';\n  @each $pattern in $patterns {\n    $selectors: '#{$selectors}:not([class*=\"#{$pattern}\"])';\n  }\n\n  @include _class-pattern($selectors, $unify) {\n    @content;\n  }\n}\n\n@mixin class-start-with($start, $unify: true) {\n  @include _class-pattern(class-start-with($start), $unify) {\n    @content;\n  }\n}\n\n@mixin class-not-start-with($start, $unify: true) {\n  @include _class-pattern(class-not-start-with($start), $unify) {\n    @content;\n  }\n}\n\n@mixin class-end-with($end, $unify: true) {\n  @include _class-pattern(class-end-with($end), $unify) {\n    @content;\n  }\n}\n\n@mixin class-not-end-with($end, $unify: true) {\n  @include _class-pattern(class-not-end-with($end), $unify) {\n    @content;\n  }\n}\n\n@mixin class-is-ns($unify: true) {\n  @include class-start-with(ns('', ''), $unify) {\n    @content;\n  }\n}\n\n@mixin class-is-not-ns($unify: true) {\n  @include class-not-start-with(ns('', ''), $unify) {\n    @content;\n  }\n}\n","////\n/// Core Tool : Spacing size\n/// @group core\n////\n\n@mixin width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n  }\n}\n\n@mixin min-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      min-width: #{space($width)};\n    }\n  }\n}\n\n@mixin max-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      max-width: #{space($width)};\n    }\n  }\n}\n\n@mixin height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      min-height: #{space($height)};\n    }\n  }\n}\n\n@mixin max-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      max-height: #{space($height)};\n    }\n  }\n}\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Header Legacy\n/// @group header\n////\n\n@include legacy(ie11) {\n  #{ns(header)} {\n    @include disable-list-style-legacy;\n    @include disable-underline-legacy;\n\n    #{ns-group(btns)} {\n      &:not(#{ns-group(btns)}--sm):not(#{ns-group(btns)}--lg) {\n        @include class-not-start-with(#{ns(btns-group--icon-, '')}) {\n          #{ns(btn)} {\n            @include has-not-icon {\n              &:not(#{ns(btn--display)}) {\n                @include icon-legacy(null, sm, before, false);\n              }\n            }\n\n            @include has-icon {\n              @include icon-legacy(null, sm, before, false);\n            }\n\n            &#{ns(btn--display)} {\n              @include icon-legacy(null, sm, before, false);\n            }\n          }\n        }\n      }\n    }\n\n    &__tools-links {\n      #{ns(link)} {\n        overflow: visible;\n      }\n    }\n  }\n}\n\n@include respond-from(lg) {\n  @include legacy(ie11) {\n    #{ns(header)} {\n      &__tools-links {\n        display: block;\n      }\n\n      #{ns(modal)} {\n        position: static;\n        overflow: visible;\n      }\n    }\n  }\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $standalone: map-get($options, standalone);\n\n  $legacy-target: null;\n  @if $legacy {\n    $legacy-target: ie11;\n  }\n\n  $tokens: normalise-tokens($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n\n  $colors: get-colors($tokens, $type, $options);\n  $result: get-result($colors, $value);\n  $result: important($result, $important);\n\n  @include legacy($legacy-target) {\n    #{$prop}: #{$result};\n  }\n\n  @if ($hover == true or ($hover == inherit and $legacy == false)) and ($context == background and length($tokens) == 1) {\n    $nest-hover: null;\n    $prop-hover: --hover;\n    $result-hover: #{important(get-color(nth($tokens, 1), decision, (var: true, hover: true)), $important)};\n    $nest-active: null;\n    $prop-active: --active;\n    $result-active: #{important(get-color(nth($tokens, 1), decision, (var: true, active: true)), $important)};\n\n    @if $legacy or $standalone {\n      $type: hex;\n      $option: (theme: light);\n\n      $nest-hover: '&:hover';\n      $prop-hover: $prop;\n      $result-hover: #{important(get-color(nth($tokens, 1), hex, (hover: true)), $important)};\n      $nest-active: '&:active';\n      $prop-active: $prop;\n      $result-active: #{important(get-color(nth($tokens, 1), hex, (active: true)), $important)};\n    }\n\n    @include legacy($legacy-target) {\n      @include nest($nest-hover) {\n        #{$prop-hover}: #{$result-hover};\n      }\n\n      @include nest($nest-active) {\n        #{$prop-active}: #{$result-active};\n      }\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-color($tokens, $options:()) {\n  @if not map-has-key($options, hover) {\n    $options: map-merge($options, (hover: inherit));\n  }\n  @include _scheme-element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin scheme-element-bg-transparent($options) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $tokens: normalise-tokens(default grey, background);\n  $value: important(transparent, $important);\n\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n\n      @if $hover {\n        &:hover {\n          background-color: rgba(0, 0, 0, 0.05);\n        }\n\n        &:active {\n          background-color: rgba(0, 0, 0, 0.1);\n        }\n      }\n    }\n  }\n  @else {\n    background-color: #{$value};\n    @if $hover {\n      --hover: inherit;\n      --active: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: get-tokens-length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-text-color($tokens, $options) {\n  @include _scheme-element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-fill-color($tokens, $options) {\n  @include _scheme-element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map-has-key($options, side) {\n    $prop:border-#{map-get($options, side)};\n  }\n  @include _scheme-element($prop, border, $tokens, $options, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($tokens, $options, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: get-tokens-length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $tokens, $options, space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// header Scheme\n/// @group header\n////\n\n@mixin _header-scheme($legacy: false) {\n  #{ns(header)} {\n    @include scheme-element-bg-color(elevated grey, (legacy:$legacy));\n\n    &__service {\n      @include scheme-element-box-shadow-color(default grey, (legacy:$legacy), top-1-in);\n      @include scheme-element-no-box-shadow(lg);\n    }\n\n    &__menu-links {\n      #{ns(btn)} {\n        @include btn-kind-scheme(4, $legacy);\n        @include scheme-element-box-shadow-color(default grey, (legacy:$legacy), bottom-1-in);\n      }\n    }\n\n    &__tools-links {\n      #{ns(btn)} {\n        @include btn-kind-scheme(4, $legacy);\n        @include after {\n          @include scheme-element-box-shadow-color(default grey, (legacy:$legacy));\n        }\n      }\n    }\n\n    &__navbar {\n      #{ns(service)} {\n        @include title {\n          @include scheme-element-text-color(title grey, (legacy:$legacy));\n        }\n      }\n\n      #{ns(btn)} {\n        @include btn-kind-scheme(4, $legacy);\n\n        &--menu {\n          @include scheme-element-text-color(default grey, (legacy:$legacy));\n        }\n      }\n    }\n\n    #{ns(header__menu)} {\n      @include respond-from(lg) {\n        @include scheme-element-box-shadow-color(default grey, (legacy:$legacy), top-1-in);\n      }\n    }\n\n    #{ns(modal)} {\n      @include scheme-element-bg-color(elevated grey, (legacy:$legacy));\n    }\n  }\n}\n","////\n/// Core Tool : Color disabled\n/// @group core\n////\n\n/// Applique les couleurs disabled sur l'élément\n/// @access public\n/// @param {map} map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - background {boolean}: true, applique le token background disabled sur la couleur de fond\n///   - text {boolean}: true, applique le token text disabled sur la couleur de texte\n///   - box-shadow {}: si true, applique le token border disabled sur l'élément avec la box-shadow par défaut (encadré de 1 px). si une valeur de box-shadow est fournie, applique cette valeur (voir get-box-shadow)\n@mixin disabled-colors($options: ()) {\n  $legacy: map-get($options, legacy);\n  $text: map-get($options, text);\n  $background: map-get($options, background);\n  $box-shadow: map-get($options, box-shadow);\n\n  @if $text {\n    @include scheme-element-text-color(disabled grey, (legacy: $legacy));\n  }\n\n  @if $background {\n    @include scheme-element-bg-color(disabled grey, (legacy: $legacy));\n  }\n\n  @if $box-shadow == true {\n    @include scheme-element-box-shadow-color(disabled grey, (legacy: $legacy));\n  }\n  @else if $box-shadow {\n    @include scheme-element-box-shadow-color(disabled grey, (legacy: $legacy), $box-shadow);\n  }\n}\n/// Applique les couleurs disabled sur l'élément avec les sélecteurs appropriés\n/// @access public\n/// @param {map} map des options :\n///   - can-be-link {boolean}: ajoute le sélecteur de lien sans href.\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - background {boolean}: true, applique le token background disabled sur la couleur de fond\n///   - text {boolean}: true, applique le token text disabled sur la couleur de texte\n///   - box-shadow {}: si true, applique le token border disabled sur l'élément avec la box-shadow par défaut (encadré de 1 px). si une valeur de box-shadow est fournie, applique cette valeur (voir get-box-shadow)\n@mixin disabled($options: ()) {\n  $selectors: '&:disabled';\n  @if map-get($options, can-be-link) {\n    $selectors: append($selectors, selector-associate(&, 'a:not([href])'), comma);\n  }\n\n  @at-root #{$selectors} {\n    @include disabled-colors($options);\n    @content;\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Tool : Selector block\n/// @group core\n////\n\n@mixin title() {\n  &__title {\n    @content;\n  }\n}\n\n@mixin body() {\n  &__body {\n    @content;\n  }\n}\n\n@mixin list() {\n  &__list {\n    @content;\n  }\n}\n\n@mixin list-item() {\n  &__item {\n    @content;\n  }\n}\n","////\n/// header Scheme\n/// @group header\n////\n\n@mixin _header-deprecated-scheme($legacy: false) {\n  #{ns(header)} {\n    &__menu-links {\n      #{ns(link)} {\n        @include btn-kind-scheme(4, $legacy);\n        @include scheme-element-box-shadow-color(default grey, (legacy:$legacy), bottom-1-in);\n      }\n    }\n\n    &__tools-links {\n      #{ns(link)} {\n        @include btn-kind-scheme(4, $legacy);\n        @include after {\n          @include scheme-element-box-shadow-color(default grey, (legacy:$legacy));\n        }\n      }\n    }\n  }\n}\n","////\n/// Core Tool : Selector Breakpoint\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n"]}