{"version":3,"sources":["<no source>","../../../alert.main.css","../../../../../../src/component/alert/main.scss","../../../../../../src/component/alert/style/_module.scss","../../../../../../src/core/style/spacing/tool/_position.scss","../../../../../../src/core/style/spacing/tool/_space.scss","../../../../../../src/core/style/spacing/function/_space.scss","../../../../../../src/core/style/typography/tool/_styles.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../../../../src/core/style/selector/tool/_pseudo.scss","../../../../../../src/core/style/icon/_tool.scss","../../../../../../src/core/style/spacing/tool/_size.scss","../../../../../../src/component/link/style/tool/_size.scss","../../../../../../src/core/style/function/_unit.scss","../../../../../../src/component/link/style/tool/_icon.scss","../../../../../../src/core/style/typography/tool/_font-weight.scss","../../../../../../src/core/style/typography/setting/_font-weight.scss","../../../../../../src/component/alert/deprecated/style/_module.scss","../../../../../../src/component/alert/style/_scheme.scss","../../../../../../src/core/style/selector/tool/_breakpoint.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACKhB;;cDFc;AEEd;ECCE,kBAAU;ECyBR,oCC+De;;ECSf,4BAA6B;EAA7B,2BAA6B;ECvE7B,oGAAU;APvBd;;AQOE;ECsDE,cAAc;EACd,qBAAqB;EACrB,sBAAsB;EACtB,8BAA8B;ECjB5B,uBAAO;EAGP,wBAAQ;EDgBV,4BAA4B;EAC5B,oBAAoB;EAtCpB,mBAAY;ENhCd,kBAAU;EAER,MAAK;EASL,OAAM;ECcN,mBC+De;EE9Df,gCAAU;APZd;;AEHE;EIkBE,gBAAiF;EAXnF,mBAA6C;EAG3C,mBAA6D;ANUjE;;AEhCA;ECCE,kBAAU;EAER,YAAK;EAGL,cAAO;EQFT,mBCkBgD;EDjBhD,mBNoFiB;EMhFf,gBNgFe;EMhEjB,wBAAoC;EEblC,mBAAmB;EAgCnB,gBAAgB;EAChB,mBAAmB;EACnB,eR2Ce;EQ1Cf,gBR0Ce;EQzCf,oBAN0C;EAO1C,qBAP0C;EC5B5C,gBCTW;AfoDb;;AQ9CE;EKQE,iBAAY;EAiCV,cAAc;EACd,oBAXwC;AbmB9C;;AE7DA;EEsBM,gBCmEa;ALnBnB;;AQ3DE;EAGI,WNYgD;EOyBlD,+DArCiD;EAsCjD,uDAtCiD;AT8DrD;;AQjEE;EAGI,WNgBmD;EOqBrD,kEArCiD;EAsCjD,0DAtCiD;AToErD;;AQvEE;EAGI,WNoBiD;EOiBnD,gEArCiD;EAsCjD,wDAtCiD;AT0ErD;;AQ7EE;EAGI,WNwBmD;EOarD,kEArCiD;EAsCjD,0DAtCiD;ATgFrD;;AErDE;EEfE,oCC+De;ALSnB;;AQvFE;EJeE,qBC+De;ALanB;;AgBtGA;EbCE,kBAAU;EAER,YAAK;EAGL,cAAO;EQFT,mBCkBgD;EDjBhD,mBNoFiB;EMhFf,gBNgFe;EMhEjB,wBAAoC;EEblC,mBAAmB;EAgCnB,gBAAgB;EAChB,mBAAmB;EACnB,eR2Ce;EQ1Cf,gBR0Ce;EQzCf,oBAN0C;EAO1C,qBAP0C;EC5B5C,gBCTW;AfmHb;;AQ7GE;EKQE,iBAAY;EAiCV,cAAc;EACd,oBAXwC;AbkF9C;;AiBpHI;EVmBA,oGAAU;APkHd;;AiBjII;EVeA,sGAAU;APsHd;;AiBjII;EVWA,0GAAU;AP0Hd;;AiBjII;EVOA,0GAAU;AP8Hd;;AkB5II;EhBDF;IIOA,kBAA6C;IAG3C,oBAA6D;ENgB/D;AACF","file":"alert.main.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  ALERT\n\\* ˍˍˍˍˍˍˍˍˍ */\n.fr-alert {\n  position: relative;\n  padding: 1rem 2.25rem 0.75rem 3.5rem;\n  --title-spacing: 0 0 0.25rem;\n  --text-spacing: 0 0 0.25rem;\n}\n\n.fr-alert::before {\n  flex: 0 0 auto;\n  display: inline-block;\n  vertical-align: middle;\n  background-color: currentColor;\n  width: var(--icon-size);\n  height: var(--icon-size);\n  -webkit-mask-size: 100% 100%;\n  mask-size: 100% 100%;\n}\n\n.fr-alert::before {\n  --icon-size: 1.5rem;\n}\n\n.fr-alert::before {\n  position: absolute;\n  top: 0;\n  left: 0;\n  margin: 1rem 0.5rem;\n}\n\n.fr-alert__title {\n  font-weight:  700 ;\n  font-size:  1.125rem ;\n  line-height:  1.5rem ;\n}\n\n@media (min-width: 48em) {\n  .fr-alert__title {\n    font-size:  1.25rem ;\n    line-height:  1.75rem ;\n  }\n}\n\n.fr-alert .fr-btn--close {\n  position: absolute;\n  top: 0.25rem;\n  right: 1.25rem;\n  font-size: 0.875rem;\n  line-height: 1.5rem;\n  min-height: 2rem;\n  padding: 0.25rem 0.75rem;\n  flex-direction: row;\n  overflow: hidden;\n  white-space: nowrap;\n  max-width: 2rem;\n  max-height: 2rem;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n  font-weight: 500;\n}\n\n.fr-alert .fr-btn--close::before {\n  --icon-size: 1rem;\n}\n\n.fr-alert .fr-btn--close::before {\n  margin-left: 0;\n  margin-right: 0.5rem;\n}\n\n.fr-alert + .fr-alert {\n  margin-top: 1rem;\n}\n\n.fr-alert--info::before {\n  content: \"\";\n  -webkit-mask-image: url(\"../../icons/system/fr--info-fill.svg\");\n  mask-image: url(\"../../icons/system/fr--info-fill.svg\");\n}\n\n.fr-alert--success::before {\n  content: \"\";\n  -webkit-mask-image: url(\"../../icons/system/fr--success-fill.svg\");\n  mask-image: url(\"../../icons/system/fr--success-fill.svg\");\n}\n\n.fr-alert--error::before {\n  content: \"\";\n  -webkit-mask-image: url(\"../../icons/system/fr--error-fill.svg\");\n  mask-image: url(\"../../icons/system/fr--error-fill.svg\");\n}\n\n.fr-alert--warning::before {\n  content: \"\";\n  -webkit-mask-image: url(\"../../icons/system/fr--warning-fill.svg\");\n  mask-image: url(\"../../icons/system/fr--warning-fill.svg\");\n}\n\n.fr-alert--sm {\n  padding: 0.5rem 2.25rem 0.25rem 3rem;\n}\n\n.fr-alert--sm::before {\n  margin: 0.5rem 0.5rem;\n}\n\n.fr-alert .fr-link--close {\n  position: absolute;\n  top: 0.25rem;\n  right: 1.25rem;\n  font-size: 0.875rem;\n  line-height: 1.5rem;\n  min-height: 2rem;\n  padding: 0.25rem 0.75rem;\n  flex-direction: row;\n  overflow: hidden;\n  white-space: nowrap;\n  max-width: 2rem;\n  max-height: 2rem;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n  font-weight: 500;\n}\n\n.fr-alert .fr-link--close::before {\n  --icon-size: 1rem;\n}\n\n.fr-alert .fr-link--close::before {\n  margin-left: 0;\n  margin-right: 0.5rem;\n}\n\n.fr-alert {\n  box-shadow: inset 0 0 0 1px var(--border-plain-grey), inset 2.5rem 0 0 0 var(--background-flat-grey);\n}\n\n.fr-alert::before {\n  color: var(--text-inverted-grey);\n}\n\n.fr-alert--info {\n  box-shadow: inset 0 0 0 1px var(--border-plain-info), inset 2.5rem 0 0 0 var(--background-flat-info);\n}\n\n.fr-alert--error {\n  box-shadow: inset 0 0 0 1px var(--border-plain-error), inset 2.5rem 0 0 0 var(--background-flat-error);\n}\n\n.fr-alert--success {\n  box-shadow: inset 0 0 0 1px var(--border-plain-success), inset 2.5rem 0 0 0 var(--background-flat-success);\n}\n\n.fr-alert--warning {\n  box-shadow: inset 0 0 0 1px var(--border-plain-warning), inset 2.5rem 0 0 0 var(--background-flat-warning);\n}\n","////\n/// Alert Main\n/// @group alert\n////\n\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  ALERT\n\\* ˍˍˍˍˍˍˍˍˍ */\n\n@import '../../core/style/path/path-2';\n@import 'index';\n@import 'style/module';\n@import 'style/scheme';\n\n// deprecated\n@import 'deprecated/style/module';\n\n@include _alert-scheme;\n","////\n/// Alert Module\n/// @group alert\n////\n\n#{ns(alert)} {\n  @include relative();\n  @include padding(4v 9v 3v 14v);\n  @include set-title-margin(0 0 1v);\n  @include set-text-margin(0 0 1v);\n  @include icon(null, md);\n\n  @include before {\n    @include absolute(0, null, null, 0);\n    @include margin(4v 2v);\n  }\n\n  &__title {\n    @include title-style(h6);\n  }\n\n  #{ns(btn--close)} {\n    @include absolute(1v,5v);\n    @include nest-btn(sm, only, null, null, false);\n  }\n\n  + #{ns(alert)} {\n    @include margin-top(4v);\n  }\n\n  &--info {\n    @include icon-content(info-fill, before, false, '');\n  }\n\n  &--success {\n    @include icon-content(success-fill, before, false, '');\n  }\n\n  &--error {\n    @include icon-content(error-fill, before, false, '');\n  }\n\n  &--warning {\n    @include icon-content(warning-fill, before, false, '');\n  }\n\n  &--sm {\n    @include padding(2v 9v 1v 12v);\n\n    @include before {\n      @include margin(2v 2v);\n    }\n  }\n}\n","////\n/// Core Tool : Spacing position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin top($top) {\n  top: space($top);\n}\n\n@mixin right($top) {\n  right: space($top);\n}\n\n@mixin bottom($top) {\n  bottom: space($top);\n}\n\n@mixin left($top) {\n  left: space($top);\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n/// Set space property\n///\n/// @param {String} $property ['margin'] - propriété à appliquer à l'espacement `['margin', 'padding']`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `['x', 'y', 'top', 'right', 'bottom', 'left']`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing('margin', 6v, 'bottom');\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Function : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if type-of($value) == list {\n    $list: ();\n    $separator: list-separator($value);\n    @each $v in $value {\n      $list: append($list, space($v), $separator);\n    }\n    @return $list;\n  }\n  @if type-of($value) == string {\n    $c: str-index($value, '(');\n    @if $c {\n      $b: null;\n      $n: 0;\n      $i: $c + 1;\n      $l: str-length($value);\n      @while $b == null and $i <= $l {\n        $char: str-slice($value, $i, $i);\n        @if $char == '(' {\n          $n: $n + 1;\n        }\n        @else if $char == ')' {\n          @if $n > 0 {\n            $n: $n - 1;\n          }\n          @else {\n            $b: $i;\n          }\n        }\n        $i: $i + 1;\n      }\n\n      $start: unquote('');\n      $middle: space(str-slice($value, $c + 1, $b - 1));\n      $end: unquote('');\n\n      @if $c > 1 {\n        $start: space(str-slice($value, 1, $c - 1));\n      }\n\n      $l: str-length($value);\n      @if $b < $l {\n        $end: space(str-slice($value, $b + 1, $l));\n      }\n\n      @return unquote('#{$start}(#{$middle})#{$end}');\n    }\n\n    @if str-index($value, ',') {\n      @return space(str-split($value, ','));\n    }\n\n    @if str-index($value, ' ') {\n      @return space(str-split($value, ' '));\n    }\n\n    $value: unquote($value);\n  }\n\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $v: quote($value);\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * $V;\n  }\n  @else if is-unit($value, w) {\n    @return $q * $W;\n  }\n  @return $value;\n}\n","////\n/// Core Tool : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} font-size($font-size) #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin( var(#{'--' + map-get($settings, 'margin') + '-spacing'}) );\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin _set-typography-var($name, $value, $bp: null) {\n  @if $bp != null {\n    @include respond-from(#{$bp}) {\n      --#{$name}-spacing: #{space($value)};\n    }\n  }\n  @else {\n    --#{$name}-spacing: #{space($value)};\n  }\n}\n\n@mixin set-title-margin($margin, $bp:null) {\n  @include _set-typography-var(title, $margin, $bp);\n}\n\n@mixin set-text-margin($margin, $bp:null) {\n  @include _set-typography-var(text, $margin, $bp);\n}\n\n@mixin set-display-margin($margin, $bp:null) {\n  @include _set-typography-var(display, $margin, $bp);\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $standalone: map-get($options, standalone);\n\n  $legacy-target: null;\n  @if $legacy {\n    $legacy-target: ie11;\n  }\n\n  $tokens: normalise-tokens($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n\n  $colors: get-colors($tokens, $type, $options);\n  $result: get-result($colors, $value);\n  $result: important($result, $important);\n\n  @include legacy($legacy-target) {\n    #{$prop}: #{$result};\n  }\n\n  @if ($hover == true or ($hover == inherit and $legacy == false)) and ($context == background and length($tokens) == 1) {\n    $nest-hover: null;\n    $prop-hover: --hover;\n    $result-hover: #{important(get-color(nth($tokens, 1), decision, (var: true, hover: true)), $important)};\n    $nest-active: null;\n    $prop-active: --active;\n    $result-active: #{important(get-color(nth($tokens, 1), decision, (var: true, active: true)), $important)};\n\n    @if $legacy or $standalone {\n      $type: hex;\n      $option: (theme: light);\n\n      $nest-hover: '&:hover';\n      $prop-hover: $prop;\n      $result-hover: #{important(get-color(nth($tokens, 1), hex, (hover: true)), $important)};\n      $nest-active: '&:active';\n      $prop-active: $prop;\n      $result-active: #{important(get-color(nth($tokens, 1), hex, (active: true)), $important)};\n    }\n\n    @include legacy($legacy-target) {\n      @include nest($nest-hover) {\n        #{$prop-hover}: #{$result-hover};\n      }\n\n      @include nest($nest-active) {\n        #{$prop-active}: #{$result-active};\n      }\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-color($tokens, $options:()) {\n  @if not map-has-key($options, hover) {\n    $options: map-merge($options, (hover: inherit));\n  }\n  @include _scheme-element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin scheme-element-bg-transparent($options) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $tokens: normalise-tokens(default grey, background);\n  $value: important(transparent, $important);\n\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n\n      @if $hover {\n        &:hover {\n          background-color: rgba(0, 0, 0, 0.05);\n        }\n\n        &:active {\n          background-color: rgba(0, 0, 0, 0.1);\n        }\n      }\n    }\n  }\n  @else {\n    background-color: #{$value};\n    @if $hover {\n      --hover: inherit;\n      --active: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: get-tokens-length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-text-color($tokens, $options) {\n  @include _scheme-element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-fill-color($tokens, $options) {\n  @include _scheme-element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map-has-key($options, side) {\n    $prop:border-#{map-get($options, side)};\n  }\n  @include _scheme-element($prop, border, $tokens, $options, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($tokens, $options, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: get-tokens-length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $tokens, $options, space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Tool : Icon\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size ['md'] - Icon size from `$icon-size-map` (Default to 'md' = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icon-size(sm);\n///     height: icon-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@function get-url-icon($icon, $important: false) {\n  $config: map-get($icons-config, $icon);\n  $url: url('#{$dist-path}#{map-get($config, path)}');\n  @return important($url, $important);\n}\n\n@mixin with-icon($size:md) {\n  @include has-icon {\n    @include before {\n      @include icon-size($size);\n      @content;\n    }\n  }\n}\n\n@mixin icon-size($size:md, $pseudo: null) {\n  $selector: null;\n  @if $pseudo == before or $pseudo == after {\n    $selector: '&::#{$pseudo}';\n  }\n  @include nest($selector) {\n    --icon-size: #{icon-size($size)};\n  }\n}\n\n@mixin icon-size-legacy($size:md, $pseudo: null) {\n  $selector: null;\n  @if $pseudo == before or $pseudo == after {\n    $selector: '&::#{$pseudo}';\n  }\n  @include nest($selector) {\n    $size: icon-size($size);\n    @include size($size, $size);\n  }\n}\n\n@mixin icon-content($icon, $pseudo: before, $important: false, $content: null) {\n  @include _pseudo($pseudo, $content) {\n    $url: get-url-icon($icon, $important);\n    -webkit-mask-image: $url;\n    mask-image: $url;\n  }\n}\n\n@mixin icon-content-legacy($icon, $pseudo: before, $important: false, $content: null) {\n  @include _pseudo($pseudo, $content) {\n    $url: get-url-icon($icon, $important);\n    background-image: $url;\n  }\n}\n\n@mixin icon-style($pseudo: before, $content: '') {\n  @include _pseudo($pseudo, $content) {\n    flex: 0 0 auto;\n    display: inline-block;\n    vertical-align: middle;\n    background-color: currentColor;\n    @include size(var(--icon-size), var(--icon-size));\n    -webkit-mask-size: 100% 100%;\n    mask-size: 100% 100%;\n    @content;\n  }\n}\n\n@mixin icon-style-legacy($pseudo: before, $content: null) {\n  @include _pseudo($pseudo, $content) {\n    background-color: transparent;\n    background-size: 100%;\n    background-repeat: no-repeat;\n  }\n}\n\n@mixin icon($icon: null, $size: md, $pseudo: before, $init: true) {\n  @if $init {\n    $content: '';\n    @if $icon == null {\n      $content: null;\n    }\n    @include icon-style($pseudo, $content);\n  }\n\n  @if $icon != null {\n    @include icon-content($icon, $pseudo);\n  }\n\n  @if $size != null {\n    @include icon-size($size, $pseudo);\n  }\n\n  @include _pseudo($pseudo) {\n    @content;\n  }\n}\n\n@mixin icon-legacy($icon: null, $size: md, $pseudo: before, $init: true) {\n  @if $init {\n    $content: null;\n    @if $icon != null {\n      content: '';\n    }\n    @include icon-style-legacy($pseudo, $content);\n  }\n\n  @if $icon != null {\n    @include icon-content-legacy($icon, $pseudo);\n  }\n\n  @if $size != null {\n    @include icon-size-legacy($size, $pseudo);\n  }\n\n  @include _pseudo($pseudo) {\n    @content;\n  }\n}\n\n@function filter-icons($category, $config: $icons-config) {\n  $filtered: ();\n  @each $icon, $setting in $config {\n    @if map-get($setting, category) == $category {\n      $filtered: map-merge($filtered, (#{$icon}: $setting));\n    }\n  }\n  @return $filtered;\n}\n\n@mixin generate-icons($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-content($icon, before, true);\n    }\n  }\n}\n\n@mixin generate-icons-legacy($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-content-legacy($icon, before, true);\n    }\n  }\n}\n","////\n/// Core Tool : Spacing size\n/// @group core\n////\n\n@mixin width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n  }\n}\n\n@mixin min-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      min-width: #{space($width)};\n    }\n  }\n}\n\n@mixin max-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      max-width: #{space($width)};\n    }\n  }\n}\n\n@mixin height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      min-height: #{space($height)};\n    }\n  }\n}\n\n@mixin max-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      max-height: #{space($height)};\n    }\n  }\n}\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Link Tool : sizes\n/// @group link\n////\n\n@mixin _build-link-size($size-settings, $border-radius: false) {\n  $font-size: map_get($size-settings, font-size);\n  $style: get-text-style($font-size);\n  $line-height: space(map_get($style, line-height));\n  font-size: px-rem($font-size);\n  line-height: $line-height;\n\n  $min-height: space(map_get($size-settings, min-height));\n  @if $min-height > 0 {\n    min-height: $min-height;\n  }\n\n  $max-icon-height: icon-size(md);\n\n  @if map_has_key($size-settings, icon-only) {\n    $max-icon-height: icon-size(map_get($size-settings, icon-only));\n  }\n  @else if map_has_key($size-settings, icon) {\n    $max-icon-height: icon-size(map_get($size-settings, icon));\n  }\n\n  $space-y: max($line-height, $max-icon-height);\n  $padding-x: space(map_get($size-settings, padding-x));\n  $padding-y: max(($min-height - $space-y) / 2, 0);\n\n  padding: #{$padding-y} #{$padding-x};\n\n  @if $border-radius {\n    border-radius: #{$min-height / 2};\n  }\n}\n\n@function _link-icon-margin($size) {\n  @return icon-size($size) / 6;\n}\n\n@mixin _link-align-on-content($size, $place, $size-settings) {\n  $padding-x: space(map_get($size-settings, padding-x));\n  $icon-margin: _link-icon-margin(map_get($size-settings, icon));\n\n  @if $place == null {\n    margin-left: -($padding-x);\n    margin-right: -($padding-x);\n  }\n  @else if $place == left {\n    margin-left: -($padding-x - $icon-margin);\n    margin-right: -($padding-x);\n  }\n  @else if $place == right {\n    margin-left: -($padding-x);\n    margin-right: -($padding-x - $icon-margin);\n  }\n  @else if $place == only {\n    $icon-size: icon-size(map_get($size-settings, icon-only));\n    $min-height: space(map_get($size-settings, min-height));\n    $padding-x: ($min-height - $icon-size) / 2;\n\n    margin-left: -($padding-x);\n    margin-right: -($padding-x);\n  }\n}\n","////\n/// Core Function : units\n/// @group core\n////\n\n/// Retourne la valeur numérique sans unité.\n/// @access public\n/// @param {String} $value - la valeur avec unité\n/// @example\n///   clean-unit(12px);\n@function clean-unit($value) {\n  @if $value == null {\n    @return null;\n  }\n  @return ($value / ($value * 0 + 1));\n}\n\n/// Return rem from px\n///\n/// @param {String} $px - Font size in pixels\n/// @param {String} $root-font-size [$base-font-size-px] - Pixel font size for conversion\n///\n/// @example scss - Get 1rem conversion from 16px, using $base-font-size-px\n///   .foo {\n///     font-size: px-rem(12px);\n///   }\n@function px-rem($px, $root-font-size: 16px) {\n  @return clean-unit($px / $root-font-size) * 1rem;\n}\n\n@function is-unit($value, $unit) {\n  $v: to-lower-case(quote($value));\n  $u: quote($unit);\n  @return str-index($v, $u) == (str-length($v) - str-length($u) + 1);\n}\n\n@function is-basic-unit($value) {\n  $units: em ex '%' px cm mm in pt pc ch rem vw vh vmin vmax;\n  @each $unit in $units {\n    @if is-unit($value, $unit) {\n      @return true;\n    }\n  }\n  @return false;\n}\n","////\n/// Link Tool : icons\n/// @group link\n////\n\n@mixin _build-link-icon($size-settings, $place, $size:md, $reverse: false) {\n\n  $icon-size: icon-size(map_get($size-settings, icon));\n\n  @if $place == only {\n    $icon-size: icon-size(map_get($size-settings, icon-only));\n  }\n\n  @if $reverse {\n    flex-direction: row-reverse;\n  }\n  @else {\n    flex-direction: row;\n  }\n\n  $icon-margin: _link-icon-margin(map_get($size-settings, icon));\n  $icon-margin-x: space(map_get($size-settings, icon-margin-x));\n\n  @include before {\n    --icon-size: #{$icon-size};\n  }\n\n  @if $place == left {\n    overflow: initial;\n    max-width: 100%;\n    max-height: none;\n    @include before {\n      margin-left: -($icon-margin);\n      margin-right: $icon-margin-x;\n    }\n  }\n  @else if $place == right {\n    overflow: initial;\n    max-width: 100%;\n    max-height: none;\n    @include before {\n      margin-right: -($icon-margin);\n      margin-left: $icon-margin-x;\n    }\n  }\n  @else if $place == only {\n    $min-height: space(map_get($size-settings, min-height));\n    $padding-x: ($min-height - $icon-size) / 2;\n\n    overflow: hidden;\n    white-space: nowrap;\n    max-width: $min-height;\n    max-height: $min-height;\n    padding-left: $padding-x;\n    padding-right: $padding-x;\n\n    @include before {\n      margin-left: 0;\n      margin-right: $padding-x;\n    }\n  }\n}\n","////\n/// Core Tool : Typography font-weight\n/// @group core\n////\n\n/// Return font-weight value from font-weight map.\n///\n/// @param {String} $scale ['regular'] - Type scale value from `$weight-scale` (Default to 'regular' = 400)\n///\n/// @example scss - Set font-weight to bold (700)\n///   .foo {\n///     font-weight: font-weight('bold');\n///   }\n\n@function font-weight($scale: regular) {\n  @return map-get($font-weight-scale, $scale);\n}\n\n@mixin font-weight($scale) {\n  font-weight: font-weight($scale);\n}\n\n@mixin build-utillity-font-weight() {\n  $fontWeightValues: map-get($font-weight-vars, values);\n  @if $fontWeightValues == 'all' {\n    $fontWeightValues: map-keys($font-weight-names);\n  }\n  @each $weight in $fontWeightValues {\n    $name: map-get($font-weight-names, $weight);\n    & #{ns('text--' + $name)} {\n      font-weight: #{$weight} !important;\n    }\n  }\n}\n","////\n/// Core Setting : Typography font-weight\n/// @group core\n////\n\n$font-weight-scale: (\n  thin: 100,\n  extra-light: 200,\n  light: 300,\n  regular: 400,\n  medium: 500,\n  semi-bold: 600,\n  bold: 700,\n  extra-bold: 800,\n  heavy: 900\n);\n\n$font-weight-names: (\n  100: thin,\n  200: extra-light,\n  300: light,\n  400: regular,\n  500: medium,\n  600: semi-bold,\n  700: bold,\n  800: extra-bold,\n  900: heavy\n);\n\n$font-weight-vars: (\n  values: 300 400 500 700 900,\n  breakpoints: false\n) !default;\n\n@if (map-get($typography-vars, font-weight) != null) {\n  $font-weight-vars: map-get($typography-vars, font-weight);\n}\n","////\n/// Alert Deprecated Module\n/// @group alert\n////\n\n#{ns(alert)} {\n  #{ns(link--close)} {\n    @include absolute(1v, 5v);\n    @include nest-btn(sm, only, null, null, false);\n  }\n}\n","////\n/// alert Scheme\n/// @group alert\n////\n\n@mixin _alert-scheme($legacy: false) {\n  #{ns(alert)} {\n    @include scheme-element-box-shadow-color((plain grey) (background flat grey), (legacy:$legacy), all-1-in left-10v-in);\n\n    @include before {\n      @include scheme-element-text-color(inverted grey, (legacy:$legacy));\n    }\n\n    &--info {\n      @include scheme-element-box-shadow-color((plain info) (background flat info), (legacy:$legacy), all-1-in left-10v-in);\n    }\n\n    &--error {\n      @include scheme-element-box-shadow-color((plain error) (background flat error), (legacy:$legacy), all-1-in left-10v-in);\n    }\n\n    &--success {\n      @include scheme-element-box-shadow-color((plain success) (background flat success), (legacy:$legacy), all-1-in left-10v-in);\n    }\n\n    &--warning {\n      @include scheme-element-box-shadow-color((plain warning) (background flat warning), (legacy:$legacy), all-1-in left-10v-in);\n    }\n  }\n}\n","////\n/// Core Tool : Selector Breakpoint\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n"]}