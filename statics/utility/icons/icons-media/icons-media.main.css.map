{"version":3,"sources":["<no source>","../../../../icons-media.main.css","../../../../../../../../src/utility/icons/icons-media/main.scss","../../../../../../../../src/core/style/selector/tool/_pseudo.scss","../../../../../../../../src/utility/icons/icons-media/style/_module.scss","../../../../../../../../src/core/style/icon/_tool.scss","../../../../../../../../src/core/style/function/_important.scss","../../../../../../../../src/core/style/selector/tool/_breakpoint.scss","../../../../../../../../src/_media-query-order.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACKhB;;cDFc;;AAiBd;;;;EEDM,WCbc;AHgBpB;;AENE;EEwCE,0ECjD4B;EDkD5B,kEClD4B;ALoBhC;;AEXE;EEwCE,0ECjD4B;EDkD5B,kEClD4B;ALyBhC;;AEhBE;EEwCE,gFCjD4B;EDkD5B,wEClD4B;AL8BhC;;AErBE;EEwCE,gFCjD4B;EDkD5B,wEClD4B;ALmChC;;AE1BE;EEwCE,6ECjD4B;EDkD5B,qEClD4B;ALwChC;;AE/BE;EEwCE,6ECjD4B;EDkD5B,qEClD4B;AL6ChC;;AEpCE;EEwCE,wECjD4B;EDkD5B,gEClD4B;ALkDhC;;AEzCE;EEwCE,wECjD4B;EDkD5B,gEClD4B;ALuDhC;;AE9CE;EEwCE,2ECjD4B;EDkD5B,mEClD4B;AL4DhC;;AEnDE;EEwCE,2ECjD4B;EDkD5B,mEClD4B;ALiEhC;;AExDE;EEwCE,6ECjD4B;EDkD5B,qEClD4B;ALsEhC;;AE7DE;EEwCE,6ECjD4B;EDkD5B,qEClD4B;AL2EhC;;AElEE;EEwCE,6ECjD4B;EDkD5B,qEClD4B;ALgFhC;;AEvEE;EEwCE,6ECjD4B;EDkD5B,qEClD4B;ALqFhC;;AE5EE;EEwCE,8ECjD4B;EDkD5B,sEClD4B;AL0FhC;;AEjFE;EEwCE,8ECjD4B;EDkD5B,sEClD4B;AL+FhC;;AEtFE;EEwCE,yECjD4B;EDkD5B,iEClD4B;ALoGhC;;AE3FE;EEwCE,yECjD4B;EDkD5B,iEClD4B;ALyGhC;;AEhGE;EEwCE,wECjD4B;EDkD5B,gEClD4B;AL8GhC;;AErGE;EEwCE,wECjD4B;EDkD5B,gEClD4B;ALmHhC;;AE1GE;EEwCE,uECjD4B;EDkD5B,+DClD4B;ALwHhC;;AE/GE;EEwCE,uECjD4B;EDkD5B,+DClD4B;AL6HhC;;AEpHE;EEwCE,2ECjD4B;EDkD5B,mEClD4B;ALkIhC;;AEzHE;EEwCE,2ECjD4B;EDkD5B,mEClD4B;ALuIhC;;AE9HE;EEwCE,kFCjD4B;EDkD5B,0EClD4B;AL4IhC;;AEnIE;EEwCE,kFCjD4B;EDkD5B,0EClD4B;ALiJhC;;AExIE;EEwCE,gFCjD4B;EDkD5B,wEClD4B;ALsJhC;;AE7IE;EEwCE,gFCjD4B;EDkD5B,wEClD4B;AL2JhC;;AElJE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;ALgKhC;;AEvJE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;ALqKhC;;AE5JE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;AL0KhC;;AEjKE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;AL+KhC;;AEtKE;EEwCE,4ECjD4B;EDkD5B,oEClD4B;ALoLhC;;AE3KE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;ALyLhC;;AEhLE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;AL8LhC;;AErLE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;ALmMhC;;AE1LE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;ALwMhC;;AE/LE;EEwCE,6ECjD4B;EDkD5B,qEClD4B;AL6MhC;;AEpME;EEwCE,6ECjD4B;EDkD5B,qEClD4B;ALkNhC;;AEzME;EEwCE,6ECjD4B;EDkD5B,qEClD4B;ALuNhC;;AE9ME;EEwCE,6ECjD4B;EDkD5B,qEClD4B;AL4NhC;;AEnNE;EEwCE,yECjD4B;EDkD5B,iEClD4B;ALiOhC;;AExNE;EEwCE,yECjD4B;EDkD5B,iEClD4B;ALsOhC;;AE7NE;EEwCE,gFCjD4B;EDkD5B,wEClD4B;AL2OhC;;AElOE;EEwCE,gFCjD4B;EDkD5B,wEClD4B;ALgPhC;;AEvOE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;ALqPhC;;AE5OE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;AL0PhC;;AEjPE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;AL+PhC;;AEtPE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;ALoQhC;;AE3PE;EEwCE,6ECjD4B;EDkD5B,qEClD4B;ALyQhC;;AEhQE;EEwCE,6ECjD4B;EDkD5B,qEClD4B;AL8QhC;;AErQE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;ALmRhC;;AE1QE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;ALwRhC;;AE/QE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;AL6RhC;;AEpRE;EEwCE,+ECjD4B;EDkD5B,uEClD4B;ALkShC;;AMvRI;ECPE,cAAA;APLN;;AMYI;ECPE,cAAA;APDN;;AMQI;ECPE,cAAA;APGN;;AMII;ECPE,cAAA;APON","file":"icons-media.main.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  ICON COMMUNICATION\n\\* ˍˍˍˍˍˍˍˍˍ */\n@media (min-width: 36em) {\n  /*! media sm */\n}\n\n@media (min-width: 48em) {\n  /*! media md */\n}\n\n@media (min-width: 62em) {\n  /*! media lg */\n}\n\n@media (min-width: 78em) {\n  /*! media xl */\n}\n\n[class^=\"fr-icon-\"]::before, [class*=\" fr-icon-\"]::before, [class^=\"fr-fi-\"]::before, [class*=\" fr-fi-\"]::before {\n  content: \"\";\n}\n\n.fr-icon-camera-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/camera-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/camera-fill.svg\") !important;\n}\n\n.fr-icon-camera-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/camera-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/camera-line.svg\") !important;\n}\n\n.fr-icon-clapperboard-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/clapperboard-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/clapperboard-fill.svg\") !important;\n}\n\n.fr-icon-clapperboard-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/clapperboard-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/clapperboard-line.svg\") !important;\n}\n\n.fr-icon-equalizer-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/equalizer-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/equalizer-fill.svg\") !important;\n}\n\n.fr-icon-equalizer-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/equalizer-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/equalizer-line.svg\") !important;\n}\n\n.fr-icon-film-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/film-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/film-fill.svg\") !important;\n}\n\n.fr-icon-film-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/film-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/film-line.svg\") !important;\n}\n\n.fr-icon-gallery-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/gallery-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/gallery-fill.svg\") !important;\n}\n\n.fr-icon-gallery-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/gallery-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/gallery-line.svg\") !important;\n}\n\n.fr-icon-headphone-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/headphone-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/headphone-fill.svg\") !important;\n}\n\n.fr-icon-headphone-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/headphone-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/headphone-line.svg\") !important;\n}\n\n.fr-icon-image-add-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/image-add-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/image-add-fill.svg\") !important;\n}\n\n.fr-icon-image-add-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/image-add-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/image-add-line.svg\") !important;\n}\n\n.fr-icon-image-edit-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/image-edit-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/image-edit-fill.svg\") !important;\n}\n\n.fr-icon-image-edit-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/image-edit-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/image-edit-line.svg\") !important;\n}\n\n.fr-icon-image-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/image-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/image-fill.svg\") !important;\n}\n\n.fr-icon-image-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/image-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/image-line.svg\") !important;\n}\n\n.fr-icon-live-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/live-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/live-fill.svg\") !important;\n}\n\n.fr-icon-live-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/live-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/live-line.svg\") !important;\n}\n\n.fr-icon-mic-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/mic-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/mic-fill.svg\") !important;\n}\n\n.fr-icon-mic-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/mic-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/mic-line.svg\") !important;\n}\n\n.fr-icon-music-2-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/music-2-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/music-2-fill.svg\") !important;\n}\n\n.fr-icon-music-2-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/music-2-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/music-2-line.svg\") !important;\n}\n\n.fr-icon-notification-3-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/notification-3-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/notification-3-fill.svg\") !important;\n}\n\n.fr-icon-notification-3-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/notification-3-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/notification-3-line.svg\") !important;\n}\n\n.fr-icon-pause-circle-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/pause-circle-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/pause-circle-fill.svg\") !important;\n}\n\n.fr-icon-pause-circle-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/pause-circle-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/pause-circle-line.svg\") !important;\n}\n\n.fr-icon-play-circle-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/play-circle-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/play-circle-fill.svg\") !important;\n}\n\n.fr-icon-play-circle-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/play-circle-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/play-circle-line.svg\") !important;\n}\n\n.fr-icon-stop-circle-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/stop-circle-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/stop-circle-fill.svg\") !important;\n}\n\n.fr-icon-stop-circle-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/stop-circle-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/stop-circle-line.svg\") !important;\n}\n\n.fr-icon-transcription::before {\n  -webkit-mask-image: url(\"../../../icons/media/transcription.svg\") !important;\n  mask-image: url(\"../../../icons/media/transcription.svg\") !important;\n}\n\n.fr-icon-volume-down-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/volume-down-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/volume-down-fill.svg\") !important;\n}\n\n.fr-icon-volume-down-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/volume-down-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/volume-down-line.svg\") !important;\n}\n\n.fr-icon-volume-mute-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/volume-mute-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/volume-mute-fill.svg\") !important;\n}\n\n.fr-icon-volume-mute-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/volume-mute-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/volume-mute-line.svg\") !important;\n}\n\n.fr-icon-volume-up-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/volume-up-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/volume-up-fill.svg\") !important;\n}\n\n.fr-icon-volume-up-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/volume-up-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/volume-up-line.svg\") !important;\n}\n\n.fr-fi-equalizer-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/equalizer-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/equalizer-fill.svg\") !important;\n}\n\n.fr-fi-equalizer-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/equalizer-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/equalizer-line.svg\") !important;\n}\n\n.fr-fi-image-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/image-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/image-fill.svg\") !important;\n}\n\n.fr-fi-image-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/image-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/image-line.svg\") !important;\n}\n\n.fr-fi-pause-circle-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/pause-circle-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/pause-circle-fill.svg\") !important;\n}\n\n.fr-fi-pause-circle-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/pause-circle-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/pause-circle-line.svg\") !important;\n}\n\n.fr-fi-volume-down-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/volume-down-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/volume-down-fill.svg\") !important;\n}\n\n.fr-fi-volume-down-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/volume-down-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/volume-down-line.svg\") !important;\n}\n\n.fr-fi-volume-mute-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/volume-mute-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/volume-mute-fill.svg\") !important;\n}\n\n.fr-fi-volume-mute-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/volume-mute-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/volume-mute-line.svg\") !important;\n}\n\n.fr-fi-volume-up-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/volume-up-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/volume-up-fill.svg\") !important;\n}\n\n.fr-fi-volume-up-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/volume-up-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/volume-up-line.svg\") !important;\n}\n\n.fr-fi-play-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/play-circle-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/play-circle-line.svg\") !important;\n}\n\n.fr-fi-play-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/play-circle-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/play-circle-fill.svg\") !important;\n}\n\n.fr-icon-play-line::before {\n  -webkit-mask-image: url(\"../../../icons/media/play-circle-line.svg\") !important;\n  mask-image: url(\"../../../icons/media/play-circle-line.svg\") !important;\n}\n\n.fr-icon-play-fill::before {\n  -webkit-mask-image: url(\"../../../icons/media/play-circle-fill.svg\") !important;\n  mask-image: url(\"../../../icons/media/play-circle-fill.svg\") !important;\n}\n","////\n/// Icon Media Main\n/// @group icons-media\n////\n\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  ICON COMMUNICATION\n\\* ˍˍˍˍˍˍˍˍˍ */\n\n@import '../../../core/style/path/path-3';\n@import '../../../media-query-order';\n@import 'index';\n@import 'style/module';\n\n// deprecated\n@import 'deprecated/style/setting';\n@import 'deprecated/style/module';\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Icon Media Module\n/// @group icons-media\n////\n\n@include has-icon {\n  @include before('');\n}\n\n@include generate-icons(filter-icons('media'));\n","////\n/// Core Tool : Icon\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size ['md'] - Icon size from `$icon-size-map` (Default to 'md' = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icon-size(sm);\n///     height: icon-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@function get-url-icon($icon, $important: false) {\n  $config: map-get($icons-config, $icon);\n  $url: url('#{$dist-path}#{map-get($config, path)}');\n  @return important($url, $important);\n}\n\n@mixin with-icon($size:md) {\n  @include has-icon {\n    @include before {\n      @include icon-size($size);\n      @content;\n    }\n  }\n}\n\n@mixin icon-size($size:md, $pseudo: null) {\n  $selector: null;\n  @if $pseudo == before or $pseudo == after {\n    $selector: '&::#{$pseudo}';\n  }\n  @include nest($selector) {\n    --icon-size: #{icon-size($size)};\n  }\n}\n\n@mixin icon-size-legacy($size:md, $pseudo: null) {\n  $selector: null;\n  @if $pseudo == before or $pseudo == after {\n    $selector: '&::#{$pseudo}';\n  }\n  @include nest($selector) {\n    $size: icon-size($size);\n    @include size($size, $size);\n  }\n}\n\n@mixin icon-content($icon, $pseudo: before, $important: false, $content: null) {\n  @include _pseudo($pseudo, $content) {\n    $url: get-url-icon($icon, $important);\n    -webkit-mask-image: $url;\n    mask-image: $url;\n  }\n}\n\n@mixin icon-content-legacy($icon, $pseudo: before, $important: false, $content: null) {\n  @include _pseudo($pseudo, $content) {\n    $url: get-url-icon($icon, $important);\n    background-image: $url;\n  }\n}\n\n@mixin icon-style($pseudo: before, $content: '') {\n  @include _pseudo($pseudo, $content) {\n    flex: 0 0 auto;\n    display: inline-block;\n    vertical-align: middle;\n    background-color: currentColor;\n    @include size(var(--icon-size), var(--icon-size));\n    -webkit-mask-size: 100% 100%;\n    mask-size: 100% 100%;\n    @content;\n  }\n}\n\n@mixin icon-style-legacy($pseudo: before, $content: null) {\n  @include _pseudo($pseudo, $content) {\n    background-color: transparent;\n    background-size: 100%;\n    background-repeat: no-repeat;\n  }\n}\n\n@mixin icon($icon: null, $size: md, $pseudo: before, $init: true) {\n  @if $init {\n    $content: '';\n    @if $icon == null {\n      $content: null;\n    }\n    @include icon-style($pseudo, $content);\n  }\n\n  @if $icon != null {\n    @include icon-content($icon, $pseudo);\n  }\n\n  @if $size != null {\n    @include icon-size($size, $pseudo);\n  }\n\n  @include _pseudo($pseudo) {\n    @content;\n  }\n}\n\n@mixin icon-legacy($icon: null, $size: md, $pseudo: before, $init: true) {\n  @if $init {\n    $content: null;\n    @if $icon != null {\n      content: '';\n    }\n    @include icon-style-legacy($pseudo, $content);\n  }\n\n  @if $icon != null {\n    @include icon-content-legacy($icon, $pseudo);\n  }\n\n  @if $size != null {\n    @include icon-size-legacy($size, $pseudo);\n  }\n\n  @include _pseudo($pseudo) {\n    @content;\n  }\n}\n\n@function filter-icons($category, $config: $icons-config) {\n  $filtered: ();\n  @each $icon, $setting in $config {\n    @if map-get($setting, category) == $category {\n      $filtered: map-merge($filtered, (#{$icon}: $setting));\n    }\n  }\n  @return $filtered;\n}\n\n@mixin generate-icons($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-content($icon, before, true);\n    }\n  }\n}\n\n@mixin generate-icons-legacy($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-content-legacy($icon, before, true);\n    }\n  }\n}\n","////\n/// Core Function : important\n/// @group core\n////\n\n@function important($value, $important: true) {\n  @if $important {\n    @return #{$value} !important;\n  }\n  @return $value;\n}\n","////\n/// Core Tool : Selector Breakpoint\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Media query order\n/// Fix temporaire, déclare les média query vides de chaque breakpoints, pour garder le bon ordre au build\n////\n\n@import 'core/style/selector/setting/breakpoint';\n@import 'core/style/selector/tool/breakpoint';\n\n@each $bp, $limits in $breakpoints {\n  @if $bp != xs {\n    @include respond-from($bp) {\n      /*! media #{$bp} */\n    }\n  }\n}\n"]}