////
/// Schemes Tools : Block Border
/// @group schemes
////

/// Rendu des borders en box-shadow en copiant le système de width de border
/// @access private
/// @param {custom-property} $var - custom property correspondant à la combinaison de couleur
/// @param {List} $width - Largeur de box-shadow correspondant au top right bottom left
@mixin _box-shadow-border($var, $width: 0 0 0 0) {
  $tw:nth($width, 1);
  $rw:nth($width, 2);
  $bw:nth($width, 3);
  $lw:nth($width, 4);

  @if $lw == 0 and $tw == 0 {
    @if $rw == 0 and $bw == 0 {
      // no action
    }
    @else {
      box-shadow: inset #{-($rw)} #{-($bw)} 0 0 $var;
    }
  }
  @else {
    @if $rw == 0 and $bw == 0 {
      box-shadow: inset $lw $tw 0 0 $var;
    }
    @else {
      box-shadow: inset $lw $tw 0 0 $var, inset #{-($rw)} #{-($bw)} 0 0 $var;
    }
  }
}

/// Création de classe permettant l'ajout de border sur les blocks
/// @access private
/// @param {String} $module - module sur lequel sera appliqué la bordure
/// @param {List} $width - Epaisseur de la bordure, fonctionne de manière similaire à la propriété css border-width
@mixin _scheme-block-border($module, $width:1px) {

  $base:'#{$module}-border';
  $w:$width;

  @if length($width) == 1 {
    $w: $width $width $width $width;
  }
  @else if length($width) == 2 {
    $w: nth($width, 1) nth($width, 2) nth($width, 1) nth($width, 2);
  }
  @else if length($width) == 3 {
    $w: nth($width, 1) nth($width, 2) nth($width, 3) nth($width, 2);
  }

  /* on définit les modifiers pour chaque côté */
  $l:('':0,'#{$base}--left': nth($w, 1));
  $t:('':0,'#{$base}--top': nth($w, 2));
  $r:('':0,'#{$base}--right': nth($w, 3));
  $b:('':0,'#{$base}--bottom': nth($w, 4));

  &#{$base} {
    @include _box-shadow-border(var(--scheme-border), $w);

    @each $ln, $lp in $l {
      @each $tn, $tp in $t {
        @each $rn, $rp in $r {
          @each $bn, $bp in $b {
            @if $lp != 0 or $tp != 0 or $rp != 0 or $bp != 0 {
              &#{$ln}#{$tn}#{$rn}#{$bn} {
                @include _box-shadow-border(var(--scheme-border), $tp $rp $bp $lp);
              }
            }
          }
        }
      }
    }
  }
}
