////
/// Core Tools : Global strings
/// @group core
////

/// Fonction de transformation d'une string en nombre intégral
/// @access public
/// @param {String} $value - le nombre en chaîne de caractères
/// @param {Number} $max - maximum d'itération de la boucle à partir de laquelle l'action est abandandonnée
@function str-to-num($value, $max:1000) {
  @for $i from 0 to $max {
    @if $value == quote($i) {
      @return $i;
    }
    @else if $value == quote(-$i) {
      @return -$i;
    }
  }
  @return null;
}

/// Remplacement dans une chaine de caractères
/// @access public
/// @param {String} $stack - chaine de caractère où chercher
/// @param {String} $needle - élément à chercher
/// @param {String} $content - élément de remplacement
/// @return {String} la chaîne de caractères transformée
@function str-replace($stack, $needle, $content) {
  $is:quote($stack);
  $in:quote($needle);
  $ic:quote($content);

  $i:str-index($is, $in);

  @while $i != null {
    $is:unquote(str_slice($is, 1, $i - 1) + $ic + str_slice($is, $i + str-length($in), str_length($is)));
    $i:str-index($is, $in);
  }

  @return unquote($is);
}

/// Découpage d'une chaine de caractères avec un séparateur particulier
/// @access public
/// @param {String} $string - chaine de caractère à découper
/// @param {String} $separator - séparateur
@function str-split($string, $separator:',') {
  $tmp: str-slice($string, 1);
  $list: ();
  $index: str-index($string, $separator);

  @if $index == null {
    $list: ($string);
  }
  @else {
    $list: join((str-slice($string, 1, $index - 1)), str-split(str-slice($string, $index + 1)));
  }
  @return $list;
}
