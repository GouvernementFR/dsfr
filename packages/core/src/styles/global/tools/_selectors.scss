////
/// Core Tools : Global selectors
/// @group core
////

@mixin class-contains($patterns...) {

  @if length($patterns) == 1 and length(nth($patterns, 1)) > 1 {
    $patterns: nth($patterns, 1);
  }

  $selectors: '';

  @each $pattern in $patterns {
    $selectors: '#{$selectors}[class*="#{$pattern}"]';
  }
  @if & != null {
    $selectors:  #{selector-unify(&, $selectors)};
  }
  @at-root #{$selectors} {
    @content;
  }
}

@mixin class-not-contains($patterns...) {

  @if length($patterns) == 1 and length(nth($patterns, 1)) > 1 {
    $patterns: nth($patterns, 1);
  }

  $selectors: '';
  @each $pattern in $patterns {
    $selectors: '#{$selectors}:not([class*="#{$pattern}"])';
  }
  @if & != null {
    $selectors:  #{selector-unify(&, $selectors)};
  }
  @at-root #{$selectors} {
    @content;
  }
}

@mixin class-start-with($start) {
  $selector: '[class^="#{$start}"], [class*=" #{$start}"]';
  @if & != null {
    $selector:  #{selector-unify(&, $selector)};
  }
  @at-root #{$selector} {
    @content;
  }
}

@mixin class-not-start-with($start) {
  $selector: ':not([class^="#{$start}"]):not([class*=" #{$start}"])';
  @if & != null {
    $selector:  #{selector-unify(&, $selector)};
  }
  @at-root #{$selector} {
    @content;
  }
}

@mixin class-end-with($end) {
  $selector: '[class$="#{$end}"], [class*="#{$end} "]';
  @if & != null {
    $selector:  #{selector-unify(&, $selector)};
  }
  @at-root #{$selector} {
    @content;
  }
}

@mixin class-not-end-with($end) {
  $selector: ':not([class$="#{$end}"]):not([class*="#{$end} "])';
  @if & != null {
    $selector:  #{selector-unify(&, $selector)};
  }
  @at-root #{$selector} {
    @content;
  }
}

@mixin class-is-dse() {
  @include class-start-with(dse('', '')) {
    @content;
  }
}

@mixin class-is-not-dse() {
  @include class-not-start-with(dse('', '')) {
    @content;
  }
}

@mixin has-icon() {
  @include class-start-with(dse(fi-, '')) {
    @content;
  }
}

/// Sélecteur de toutes les éléments avec une classe du design system ainsi que leur noeuds enfants
/// @access public
@mixin all-dse-elements-selector() {
  @include class-is-dse {
    @at-root {
      &,
      & * {
        @at-root {
          &,
          &::before,
          &::after {
            @content;
          }
        }
      }
    }
  }
}

@mixin specify($tags...) {
  $selectors: (&);

  @each $tag in $tags {
    $selectors: append($selectors, selector-unify(&, $tag));
  }
  @at-root {
    #{$selectors} {
      @content;
    }
  }
}
