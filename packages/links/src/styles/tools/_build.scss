%base-link {
  @extend %inline-flex-center;
  @include scheme-element-focus();

  overflow: hidden;
  @include z-index(over);
}

@mixin _reset-links-tags($tags) {
  @at-root {
    @if index($tags, a) != null {
      #{selector_unify(&, a)} {
        @extend %a-reset;
      }
    }

    @if index($tags, button) != null {
      #{selector_unify(&, button)} {
        @extend %btn-reset;
      }
    }
  }
}

@function _sort-sizes($sizes) {
  $sorted-map: (
    md: map_get($sizes, md)
  );

  @each $size, $size-settings in $sizes {
    @if $size != md {
      $sorted-map: map-merge($sorted-map, ($size: $size-settings));
    }
  }

  @return $sorted-map;
}

@mixin _build-link-placeholders($settings, $module, $border-radius:false) {
  $align: #{$module}-align-on-content;
  $sizes: _sort-sizes(map_get($settings, sizes));
  $places: map_get($settings, places);

  %#{$module}--md {
    @extend %base-link;
  }

  @each $size, $size-settings in $sizes {
    @at-root {
      %#{$module}--#{$size} {
        @include _build-link-size($size-settings, $border-radius);
      }

      %#{$align}--#{$size} {
        @include _link-align-on-content($size, null, $size-settings);
      }
    }
  }

  @each $place in $places {
    @each $size, $size-settings in $sizes {
      @at-root {
        %#{$module}--icon-#{$place}--#{$size} {
          @include _build-link-icon($size-settings, $place, $size, $size == md, $size == md and $place == right);
        }

        %#{$align}--#{$place}--#{$size} {
          @include _link-align-on-content($size, $place, $size-settings);
        }
      }
    }
  }
}

@include _build-link-placeholders($links-settings, link, true);

@mixin _build-link($settings, $module, $border-radius:false, $cursor: pointer, $tags:a button) {
  $align: #{$module}-align-on-content;
  $sizes: map_get($settings, sizes);
  $places: map_get($settings, places);

  @include _reset-links-tags($tags);

  @if $cursor != null {
    cursor: #{$cursor};
  }

  @each $size, $size-settings in $sizes {
    $placeholder: #{$module}--#{$size};

    @if $size == md {
      @extend %#{$placeholder};
    }
    @else {
      &--#{$size} {
        @extend %#{$placeholder};
      }
    }
  }

  @each $place in $places {

    $modifier: '#{&}[class*="#{$prefix}-fi-"]#{&}--icon-#{$place}';

    @if $place == only {
      $modifier: '#{&}[class*="#{$prefix}-fi-"]:not([class*="#{$module}--icon-"])';
    }

    @each $size, $size-settings in $sizes {
      $selector: '#{$modifier}';

      @if $size != md {
        $selector: '#{$modifier}#{&}--#{$size}';
      }

      @at-root #{$selector} {
        @extend %#{$module}--icon-#{$place}--#{$size};
      }
    }
  }
}

@mixin build-link() {
  @include _build-link($links-settings, link, true);
}
