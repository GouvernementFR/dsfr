{"version":3,"sources":["<no source>","../../../../../../../../src/core/style/selector/tool/_breakpoint.scss","../../../../../../../../src/_media-query-order.scss","../../../../icons-editor.legacy.css","../../../../../../../../src/legacy/style/tool/_legacy.scss","../../../../../../../../src/core/style/selector/tool/_pseudo.scss","../../../../../../../../src/core/style/icon/_tool.scss","../../../../../../../../src/core/style/function/_important.scss"],"names":[],"mappings":"AAAA;;GAAA;ACkBI;ECPE,cAAA;ACTN;AFgBI;ECPE,cAAA;ACLN;AFYI;ECPE,cAAA;ACDN;AFQI;ECPE,cAAA;ACGN;ACAI;ECEF;ICgDE,uECzD4B;EJY9B;;EEHA;ICgDE,uECzD4B;EJe9B;;EENA;ICgDE,sECzD4B;EJkB9B;;EETA;ICgDE,2ECzD4B;EJqB9B;;EEZA;ICgDE,4ECzD4B;EJwB9B;;EEfA;ICgDE,4ECzD4B;EJ2B9B;;EElBA;ICgDE,iECzD4B;EJ8B9B;;EErBA;ICgDE,iECzD4B;EJiC9B;;EExBA;ICgDE,iECzD4B;EJoC9B;;EE3BA;ICgDE,iECzD4B;EJuC9B;;EE9BA;ICgDE,iECzD4B;EJ0C9B;;EEjCA;ICgDE,iECzD4B;EJ6C9B;;EEpCA;ICgDE,qECzD4B;EJgD9B;;EEvCA;ICgDE,oECzD4B;EJmD9B;;EE1CA;ICgDE,yECzD4B;EJsD9B;;EE7CA;ICgDE,kECzD4B;EJyD9B;;EEhDA;ICgDE,0ECzD4B;EJ4D9B;;EEnDA;ICgDE,4ECzD4B;EJ+D9B;;EEtDA;ICgDE,2ECzD4B;EJkE9B;;EEzDA;ICgDE,uECzD4B;EJqE9B;;EE5DA;ICgDE,mECzD4B;EJwE9B;;EE/DA;ICgDE,uECzD4B;EJ2E9B;;EElEA;ICgDE,yECzD4B;EJ8E9B;;EErEA;ICgDE,qECzD4B;EJiF9B;;EExEA;ICgDE,yECzD4B;EJoF9B;;EE3EA;ICgDE,uECzD4B;EJ0F9B;;EEjFA;ICgDE,sECzD4B;EJ6F9B;;EEpFA;ICgDE,2ECzD4B;EJgG9B;;EEvFA;ICgDE,oECzD4B;EJmG9B;;EE1FA;ICgDE,yECzD4B;EJsG9B;;EE7FA;ICgDE,0ECzD4B;EJyG9B;;EEhGA;ICgDE,4ECzD4B;EJ4G9B;AAvBF","file":"icons-editor.legacy.css","sourcesContent":[null,"////\n/// Core Tool : Selector Breakpoint\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Media query order\n/// Fix temporaire, déclare les média query vides de chaque breakpoints, pour garder le bon ordre au build\n////\n\n@import 'core/style/selector/setting/breakpoint';\n@import 'core/style/selector/tool/breakpoint';\n\n@each $bp, $limits in $breakpoints {\n  @if $bp != xs {\n    @include respond-from($bp) {\n      /*! media #{$bp} */\n    }\n  }\n}\n","@media (min-width: 36em) {\n  /*! media sm */\n}\n\n@media (min-width: 48em) {\n  /*! media md */\n}\n\n@media (min-width: 62em) {\n  /*! media lg */\n}\n\n@media (min-width: 78em) {\n  /*! media xl */\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-icon-code-view::before {\n    background-image: url(\"../../../icons/editor/code-view.svg\") !important;\n  }\n  .fr-icon-font-size::before {\n    background-image: url(\"../../../icons/editor/font-size.svg\") !important;\n  }\n  .fr-icon-bold::before {\n    background-image: url(\"../../../icons/editor/fr--bold.svg\") !important;\n  }\n  .fr-icon-highlight::before {\n    background-image: url(\"../../../icons/editor/fr--highlight.svg\") !important;\n  }\n  .fr-icon-quote-fill::before {\n    background-image: url(\"../../../icons/editor/fr--quote-fill.svg\") !important;\n  }\n  .fr-icon-quote-line::before {\n    background-image: url(\"../../../icons/editor/fr--quote-line.svg\") !important;\n  }\n  .fr-icon-h-1::before {\n    background-image: url(\"../../../icons/editor/h-1.svg\") !important;\n  }\n  .fr-icon-h-2::before {\n    background-image: url(\"../../../icons/editor/h-2.svg\") !important;\n  }\n  .fr-icon-h-3::before {\n    background-image: url(\"../../../icons/editor/h-3.svg\") !important;\n  }\n  .fr-icon-h-4::before {\n    background-image: url(\"../../../icons/editor/h-4.svg\") !important;\n  }\n  .fr-icon-h-5::before {\n    background-image: url(\"../../../icons/editor/h-5.svg\") !important;\n  }\n  .fr-icon-h-6::before {\n    background-image: url(\"../../../icons/editor/h-6.svg\") !important;\n  }\n  .fr-icon-hashtag::before {\n    background-image: url(\"../../../icons/editor/hashtag.svg\") !important;\n  }\n  .fr-icon-italic::before {\n    background-image: url(\"../../../icons/editor/italic.svg\") !important;\n  }\n  .fr-icon-link-unlink::before {\n    background-image: url(\"../../../icons/editor/link-unlink.svg\") !important;\n  }\n  .fr-icon-link::before {\n    background-image: url(\"../../../icons/editor/link.svg\") !important;\n  }\n  .fr-icon-list-ordered::before {\n    background-image: url(\"../../../icons/editor/list-ordered.svg\") !important;\n  }\n  .fr-icon-list-unordered::before {\n    background-image: url(\"../../../icons/editor/list-unordered.svg\") !important;\n  }\n  .fr-icon-question-mark::before {\n    background-image: url(\"../../../icons/editor/question-mark.svg\") !important;\n  }\n  .fr-icon-separator::before {\n    background-image: url(\"../../../icons/editor/separator.svg\") !important;\n  }\n  .fr-icon-space::before {\n    background-image: url(\"../../../icons/editor/space.svg\") !important;\n  }\n  .fr-icon-subscript::before {\n    background-image: url(\"../../../icons/editor/subscript.svg\") !important;\n  }\n  .fr-icon-superscript::before {\n    background-image: url(\"../../../icons/editor/superscript.svg\") !important;\n  }\n  .fr-icon-table-2::before {\n    background-image: url(\"../../../icons/editor/table-2.svg\") !important;\n  }\n  .fr-icon-translate-2::before {\n    background-image: url(\"../../../icons/editor/translate-2.svg\") !important;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-fi-font-size::before {\n    background-image: url(\"../../../icons/editor/font-size.svg\") !important;\n  }\n  .fr-fi-bold::before {\n    background-image: url(\"../../../icons/editor/fr--bold.svg\") !important;\n  }\n  .fr-fi-highlight::before {\n    background-image: url(\"../../../icons/editor/fr--highlight.svg\") !important;\n  }\n  .fr-fi-italic::before {\n    background-image: url(\"../../../icons/editor/italic.svg\") !important;\n  }\n  .fr-fi-link-unlink::before {\n    background-image: url(\"../../../icons/editor/link-unlink.svg\") !important;\n  }\n  .fr-fi-list-ordered::before {\n    background-image: url(\"../../../icons/editor/list-ordered.svg\") !important;\n  }\n  .fr-fi-list-unordered::before {\n    background-image: url(\"../../../icons/editor/list-unordered.svg\") !important;\n  }\n}\n","////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Tool : Icon\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size ['md'] - Icon size from `$icon-size-map` (Default to 'md' = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icon-size(sm);\n///     height: icon-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@function get-url-icon($icon, $important: false) {\n  $config: map-get($icons-config, $icon);\n  $url: url('#{$dist-path}#{map-get($config, path)}');\n  @return important($url, $important);\n}\n\n@mixin with-icon($size:md) {\n  @include has-icon {\n    @include before {\n      @include icon-size($size);\n      @content;\n    }\n  }\n}\n\n@mixin icon-size($size:md, $pseudo: null) {\n  $selector: null;\n  @if $pseudo == before or $pseudo == after {\n    $selector: '&::#{$pseudo}';\n  }\n  @include nest($selector) {\n    --icon-size: #{icon-size($size)};\n  }\n}\n\n@mixin icon-size-legacy($size:md, $pseudo: null) {\n  $selector: null;\n  @if $pseudo == before or $pseudo == after {\n    $selector: '&::#{$pseudo}';\n  }\n  @include nest($selector) {\n    $size: icon-size($size);\n    @include size($size, $size);\n  }\n}\n\n@mixin icon-content($icon, $pseudo: before, $important: false, $content: null) {\n  @include _pseudo($pseudo, $content) {\n    $url: get-url-icon($icon, $important);\n    -webkit-mask-image: $url;\n    mask-image: $url;\n  }\n}\n\n@mixin icon-content-legacy($icon, $pseudo: before, $important: false, $content: null) {\n  @include _pseudo($pseudo, $content) {\n    $url: get-url-icon($icon, $important);\n    background-image: $url;\n  }\n}\n\n@mixin icon-style($pseudo: before, $content: '') {\n  @include _pseudo($pseudo, $content) {\n    flex: 0 0 auto;\n    display: inline-block;\n    vertical-align: middle;\n    background-color: currentColor;\n    @include size(var(--icon-size), var(--icon-size));\n    -webkit-mask-size: 100% 100%;\n    mask-size: 100% 100%;\n    @content;\n  }\n}\n\n@mixin icon-style-legacy($pseudo: before, $content: null) {\n  @include _pseudo($pseudo, $content) {\n    background-color: transparent;\n    background-size: 100%;\n    background-repeat: no-repeat;\n  }\n}\n\n@mixin icon($icon: null, $size: md, $pseudo: before, $init: true) {\n  @if $init {\n    $content: '';\n    @if $icon == null {\n      $content: null;\n    }\n    @include icon-style($pseudo, $content);\n  }\n\n  @if $icon != null {\n    @include icon-content($icon, $pseudo);\n  }\n\n  @if $size != null {\n    @include icon-size($size, $pseudo);\n  }\n\n  @include _pseudo($pseudo) {\n    @content;\n  }\n}\n\n@mixin icon-legacy($icon: null, $size: md, $pseudo: before, $init: true) {\n  @if $init {\n    $content: null;\n    @if $icon != null {\n      content: '';\n    }\n    @include icon-style-legacy($pseudo, $content);\n  }\n\n  @if $icon != null {\n    @include icon-content-legacy($icon, $pseudo);\n  }\n\n  @if $size != null {\n    @include icon-size-legacy($size, $pseudo);\n  }\n\n  @include _pseudo($pseudo) {\n    @content;\n  }\n}\n\n@function filter-icons($category, $config: $icons-config) {\n  $filtered: ();\n  @each $icon, $setting in $config {\n    @if map-get($setting, category) == $category {\n      $filtered: map-merge($filtered, (#{$icon}: $setting));\n    }\n  }\n  @return $filtered;\n}\n\n@mixin generate-icons($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-content($icon, before, true);\n    }\n  }\n}\n\n@mixin generate-icons-legacy($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-content-legacy($icon, before, true);\n    }\n  }\n}\n","////\n/// Core Function : important\n/// @group core\n////\n\n@function important($value, $important: true) {\n  @if $important {\n    @return #{$value} !important;\n  }\n  @return $value;\n}\n"]}