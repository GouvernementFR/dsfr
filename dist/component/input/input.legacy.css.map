{"version":3,"sources":["<no source>","../../../input.legacy.css","../../../../../../src/component/input/style/_tool.scss","../../../../../../src/component/input/style/_scheme.scss","../../../../../../src/legacy/style/tool/_legacy.scss","../../../../../../src/component/input/style/_legacy.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../../../../src/core/style/color/tool/_disabled.scss","../../../../../../src/core/style/selector/tool/_autofill.scss","../../../../../../src/core/style/color/tool/_data-uri-svg.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;ACKhB,sBAAA;;ACCE;EAKE;;KFAC;EEOD;;KFJC;EESD;;KFNC;EEaD;;KFVC;EEiBD;;;KFbC;AACL;;AGXI;ECPC;IAEG,cAAc;EJJpB;EECA;IG0BE,cAAU;IAAV,sBAAU;IAAV,oCAAU;ELFZ;ECbA;IIeE,WAAU;ELgBZ;EC9BA;IIcE,WAAU;ELsBZ;ECnCA;IIaE,WAAU;EL4BZ;ECxCA;IIYE,WAAU;ELkCZ;EMnBQ;IDfN,cAAU;IAAV,oCAAU;ELwCZ;EE9CE;IGMA,oCAAU;ELoDZ;EEnDE;IGDA,oCAAU;EL0DZ;EOpFA;IF0BE,gEAAU;IAAV,gCAAU;ELgEZ;EE1FA;IMkBI,mUAAU;ERoFd;EM7DQ;IDfN,cAAU;IAAV,oCAAU;IGRR,mUAAU;ER0Fd;EE3DA;IGvBE,oCAAU;ELoGZ;AA9HF","file":"input.legacy.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* stylelint-disable */\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input-wrap--addon .fr-btn {\n    flex-shrink: 0;\n  }\n}\n\n.fr-input {\n  /**\n    * Style du placeholder\n    */\n  /**\n    * Style pour l'état désactivé\n    */\n  /**\n    * Modificateur pour les champs validés\n    */\n  /**\n    * Modificateur pour les champs présentant des erreurs\n    */\n  /**\n    * On applique un style lorsque la valeur est automatiquement remplie par le navigateur\n    * sur les navigateurs webkit.\n    */\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input {\n    color: #161616;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input {\n    background-color: #eee;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input {\n    box-shadow: inset 0 -2px 0 0 #3a3a3a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input::-webkit-input-placeholder {\n    color: #666;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:-moz-placeholder {\n    color: #666;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input::-moz-placeholder {\n    color: #666;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:-ms-input-placeholder {\n    color: #666;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:disabled {\n    color: #929292;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:disabled {\n    box-shadow: inset 0 -2px 0 0 #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input--valid {\n    box-shadow: inset 0 -2px 0 0 #18753c;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input--error {\n    box-shadow: inset 0 -2px 0 0 #ce0500;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:autofill, .fr-input:autofill:hover, .fr-input:autofill:focus, .fr-input:-webkit-autofill, .fr-input:-webkit-autofill:hover, .fr-input:-webkit-autofill:focus {\n    box-shadow: inset 0 -2px 0 0 #3a3a3a, inset 0 0 0 1000px #e8edff;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:autofill, .fr-input:autofill:hover, .fr-input:autofill:focus, .fr-input:-webkit-autofill, .fr-input:-webkit-autofill:hover, .fr-input:-webkit-autofill:focus {\n    -webkit-text-fill-color: #161616;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input[type=date] {\n    background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' x='0px' y='0px' viewBox='0 0 24 24'%3E%3Cpath fill='%23161616' d='M17 3h4c.55 0 1 .45 1 1v16c0 .55-.45 1-1 1H3c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1h4V1h2v2h6V1h2v2zm-2 2H9v2H7V5H4v4h16V5h-3v2h-2V5zm5 6H4v8h16v-8z'/%3E%3C/svg%3E\");\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input[type=date]:disabled {\n    color: #929292;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input[type=date]:disabled {\n    box-shadow: inset 0 -2px 0 0 #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input[type=date]:disabled {\n    background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' x='0px' y='0px' viewBox='0 0 24 24'%3E%3Cpath fill='%23929292' d='M17 3h4c.55 0 1 .45 1 1v16c0 .55-.45 1-1 1H3c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1h4V1h2v2h6V1h2v2zm-2 2H9v2H7V5H4v4h16V5h-3v2h-2V5zm5 6H4v8h16v-8z'/%3E%3C/svg%3E\");\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input-wrap > *:not(:last-child).fr-input:not(.fr-input--valid):not(.fr-input--error) {\n    box-shadow: inset 0 -2px 0 0 #000091;\n  }\n}\n","////\n/// Input Tool\n/// @group input\n////\n\n/* stylelint-disable */\n/// Mixin pour ajouter les préfixes vendor du placeholder\n///\n/// @access public\n///\n/// @example scss\n///   .foo {\n///     @include placeholder {\n///       @content;\n///     }\n///   }\n@mixin placeholder {\n  &::-webkit-input-placeholder {@content;}\n  &:-moz-placeholder           {@content;}\n  &::-moz-placeholder          {@content;}\n  &:-ms-input-placeholder      {@content;}\n}\n","////\n/// Input Scheme\n/// @group input\n////\n\n@mixin _input-scheme($legacy: false) {\n  #{ns(input)} {\n    @include scheme-element-text-color(label grey, (legacy:$legacy));\n    @include scheme-element-bg-color(contrast grey, (legacy:$legacy));\n    @include scheme-element-box-shadow-color(plain grey, (legacy:$legacy), bottom-2-in);\n\n    /**\n    * Style du placeholder\n    */\n    @include placeholder {\n      @include scheme-element-text-color(mention grey, (legacy:$legacy));\n    }\n\n    /**\n    * Style pour l'état désactivé\n    */\n    @include disabled-form-field((legacy: $legacy));\n\n    /**\n    * Modificateur pour les champs validés\n    */\n    &--valid {\n      @include scheme-element-box-shadow-color(plain success, (legacy:$legacy), bottom-2-in);\n    }\n\n    /**\n    * Modificateur pour les champs présentant des erreurs\n    */\n    &--error {\n      @include scheme-element-box-shadow-color(plain error, (legacy:$legacy), bottom-2-in);\n    }\n\n    /**\n    * On applique un style lorsque la valeur est automatiquement remplie par le navigateur\n    * sur les navigateurs webkit.\n    */\n    @include autofill {\n      @include scheme-element-box-shadow-color((plain grey) (background contrast info), (legacy:$legacy), bottom-2-in all-in);\n      @include _scheme-element(-webkit-text-fill-color, text, label grey, (legacy:$legacy));\n    }\n\n    &[type=date] {\n      @include scheme-element-data-uri-svg(text title grey, (legacy: $legacy), $input-calendar-line);\n\n      @include disabled-form-field((legacy: $legacy)) {\n        @include scheme-element-data-uri-svg(text disabled grey, (legacy: $legacy), $input-calendar-line);\n      }\n    }\n  }\n\n  #{ns(input-wrap)} {\n    > *:not(:last-child) {\n      &#{ns(input)}:not(#{ns(input--valid)}):not(#{ns(input--error)}) {\n        @include scheme-element-box-shadow-color(action-high blue-france, (legacy:$legacy), bottom-2-in);\n      }\n    }\n  }\n}\n","////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n","////\n/// Input Legacy\n/// @group input\n////\n\n@include legacy(ie11) {\n  #{ns(input-wrap)} {\n    &--addon {\n      #{ns(btn)} {\n        flex-shrink: 0;\n      }\n    }\n  }\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $standalone: map-get($options, standalone);\n\n  $legacy-target: null;\n  @if $legacy {\n    $legacy-target: ie11;\n  }\n\n  $tokens: normalise-tokens($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n\n  $colors: get-colors($tokens, $type, $options);\n  $result: get-result($colors, $value);\n  $result: important($result, $important);\n\n  @include legacy($legacy-target) {\n    #{$prop}: #{$result};\n  }\n\n  @if ($hover == true or ($hover == inherit and $legacy == false)) and ($context == background and length($tokens) == 1) {\n    $nest-hover: null;\n    $prop-hover: --hover;\n    $result-hover: #{important(get-color(nth($tokens, 1), decision, (var: true, hover: true)), $important)};\n    $nest-active: null;\n    $prop-active: --active;\n    $result-active: #{important(get-color(nth($tokens, 1), decision, (var: true, active: true)), $important)};\n\n    @if $legacy or $standalone {\n      $type: hex;\n      $option: (theme: light);\n\n      $nest-hover: '&:hover';\n      $prop-hover: $prop;\n      $result-hover: #{important(get-color(nth($tokens, 1), hex, (hover: true)), $important)};\n      $nest-active: '&:active';\n      $prop-active: $prop;\n      $result-active: #{important(get-color(nth($tokens, 1), hex, (active: true)), $important)};\n    }\n\n    @include legacy($legacy-target) {\n      @include nest($nest-hover) {\n        #{$prop-hover}: #{$result-hover};\n      }\n\n      @include nest($nest-active) {\n        #{$prop-active}: #{$result-active};\n      }\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-color($tokens, $options:()) {\n  @if not map-has-key($options, hover) {\n    $options: map-merge($options, (hover: inherit));\n  }\n  @include _scheme-element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin scheme-element-bg-transparent($options) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $tokens: normalise-tokens(default grey, background);\n  $value: important(transparent, $important);\n\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n\n      @if $hover {\n        &:hover {\n          background-color: rgba(0, 0, 0, 0.05);\n        }\n\n        &:active {\n          background-color: rgba(0, 0, 0, 0.1);\n        }\n      }\n    }\n  }\n  @else {\n    background-color: #{$value};\n    @if $hover {\n      --hover: inherit;\n      --active: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: get-tokens-length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-text-color($tokens, $options) {\n  @include _scheme-element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-fill-color($tokens, $options) {\n  @include _scheme-element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map-has-key($options, side) {\n    $prop:border-#{map-get($options, side)};\n  }\n  @include _scheme-element($prop, border, $tokens, $options, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($tokens, $options, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: get-tokens-length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $tokens, $options, space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Core Tool : Color disabled\n/// @group core\n////\n\n/// Applique les couleurs disabled sur l'élément\n/// @access public\n/// @param {map} map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - background {boolean}: true, applique le token background disabled sur la couleur de fond\n///   - text {boolean}: true, applique le token text disabled sur la couleur de texte\n///   - box-shadow {}: si true, applique le token border disabled sur l'élément avec la box-shadow par défaut (encadré de 1 px). si une valeur de box-shadow est fournie, applique cette valeur (voir get-box-shadow)\n@mixin disabled-colors($options: ()) {\n  $legacy: map-get($options, legacy);\n  $text: map-get($options, text);\n  $background: map-get($options, background);\n  $box-shadow: map-get($options, box-shadow);\n\n  @if $text {\n    @include scheme-element-text-color(disabled grey, (legacy: $legacy));\n  }\n\n  @if $background {\n    @include scheme-element-bg-color(disabled grey, (legacy: $legacy));\n  }\n\n  @if $box-shadow == true {\n    @include scheme-element-box-shadow-color(disabled grey, (legacy: $legacy));\n  }\n  @else if $box-shadow {\n    @include scheme-element-box-shadow-color(disabled grey, (legacy: $legacy), $box-shadow);\n  }\n}\n/// Applique les couleurs disabled sur l'élément avec les sélecteurs appropriés\n/// @access public\n/// @param {map} map des options :\n///   - can-be-link {boolean}: ajoute le sélecteur de lien sans href.\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - background {boolean}: true, applique le token background disabled sur la couleur de fond\n///   - text {boolean}: true, applique le token text disabled sur la couleur de texte\n///   - box-shadow {}: si true, applique le token border disabled sur l'élément avec la box-shadow par défaut (encadré de 1 px). si une valeur de box-shadow est fournie, applique cette valeur (voir get-box-shadow)\n@mixin disabled($options: ()) {\n  $selectors: '&:disabled';\n  @if map-get($options, can-be-link) {\n    $selectors: append($selectors, selector-associate(&, 'a:not([href])'), comma);\n  }\n\n  @at-root #{$selectors} {\n    @include disabled-colors($options);\n    @content;\n  }\n}\n","////\n/// Core Tool : Selector Autofill\n/// @group core\n////\n\n@mixin autofill () {\n  &:autofill,\n  &:autofill:hover,\n  &:autofill:focus,\n  &:-webkit-autofill,\n  &:-webkit-autofill:hover,\n  &:-webkit-autofill:focus {\n    @content;\n  }\n}\n","////\n/// Schemes Tools : Data URI SVG\n/// @group core\n////\n\n/// Combinaison de couleur appliquée à un svg intégré en data-uri\n/// @access public\n// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {Object} $value - le SVG en data-uri\n/// @param {String} $prop - propriété sur laquelle est assignée le svg\n/// @example @include scheme-element-data-uri-svg(text title grey, false, \"<svg><path fill='$COLOR'></path></svg>\"));\n@mixin scheme-element-data-uri-svg($tokens, $options: (), $value: \"<svg><path fill='$COLOR'></path></svg>\", $prop: background-image) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $tokens: normalise-tokens($tokens);\n  $light-colors: get-colors($tokens, hex, (theme: light));\n  $light: get-result($light-colors, $value);\n  $light: important($light, $important);\n\n  @if $legacy {\n    @include legacy(ie11) {\n      #{$prop}: #{url(svg-encode($light, true))};\n    }\n  }\n  @else {\n    --data-uri-svg: #{url(svg-encode($light, false))};\n\n    $dark-colors: get-colors($tokens, hex, (theme: dark));\n    $dark: get-result($dark-colors, $value);\n    $dark: important($dark, $important);\n\n    @include theme-selector(dark) {\n      --data-uri-svg: #{url(svg-encode($dark, false))};\n    }\n\n    #{$prop}: var(--data-uri-svg);\n  }\n}\n"]}