{"version":3,"sources":["<no source>","../../../toggle.main.css","../../../../../../src/component/toggle/main.scss","../../../../../../src/component/toggle/style/module/_toggle.scss","../../../../../../src/core/style/spacing/tool/_position.scss","../../../../../../src/core/style/spacing/tool/_space.scss","../../../../../../src/core/style/typography/tool/_styles.scss","../../../../../../src/component/toggle/style/_scheme.scss","../../../../../../src/core/style/spacing/tool/_size.scss","../../../../../../src/core/style/spacing/function/_space.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../../../../src/core/style/selector/tool/_pseudo.scss","../../../../../../src/core/style/spacing/tool/_z-index.scss","../../../../../../src/core/style/spacing/setting/_z-index.scss","../../../../../../src/core/style/color/tool/_data-uri-svg.scss","../../../../../../src/core/style/display/tool/_display.scss","../../../../../../src/component/toggle/style/module/_variants.scss","../../../../../../src/component/toggle/style/module/_group.scss","../../../../../../src/core/style/typography/tool/_list.scss","../../../../../../src/core/style/selector/tool/_nest.scss","../../../../../../src/core/style/color/tool/_disabled.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACKhB;;cDFc;AEEd;EACE,aAAa;EACb,eAAe;ECDf,kBAAU;ECyBR,eFtBmB;;EG8FnB,iBAA6B;EAA7B,kBAA6B;;EH1F/B;;;;IFEE;EM4CA;;KN6GC;AAxJL;;AEXA;EAcI,cAAc;EKqCZ,aAAO;EAGP,cAAQ;ELtCV,sBMyEe;EJ/Df,SFTiB;EACjB,wBAAwB;EACxB,qBAAqB;EACrB,gBAAgB;;EAEhB;;;;MFIE;ESCF,iEAAU;ATAd;;AUhBE;EAGI,oCRgB+D;AFCrE;;AUpBE;ERuBQ,2BAAgC;ESvBxC,aCDY;ECaV,2MAAe;EAUf,qCAA6B;AbGjC;;AEpCA;EA0CI,2BAAsB;EACtB,oBAAoB;EACpB,+BMSiD;ENRjD,kBM4Ce;EJnEb,kBImEa;EHtEjB,eAA6C;EAG3C,mBAA6D;;EH2B7D;;;MFAE;;EEcF;;;MFVE;;EE4BF;;;MFxBE;AACN;;AE1DA;EEsBM,eFgCuB;AFQ7B;;AUnDE;EAGI,sCR0C6D;AFUnE;;AElEA;EEsBM,kBImEa;ARnBnB;;AU3DE;ERyDI,cAAc;EACd,iBMoBa;ENnBb,2BMjB+C;EJ/B/C,kBImEa;EJnEb,oBImEa;EJnEb,kBImEa;EHtEjB,kBAA6C;EAG3C,oBAA6D;EHqD3D,qBAAqB;EACrB,gBAAgB;EAChB,wBAAwB;EACxB,iCAAiC;EOnDnC,qCAAU;AT0Dd;;AU1EE;EAGI,WRuEe;EY/EjB,aAAa;EAQb,mBAAa;EAIb,uBAAiB;EXjBnB,kBAAU;EAER,SAAK;EASL,OAAM;EIuCJ,aAAO;EAGP,cAAQ;ELkCR,kBAAkB;EAClB,4BAA4B;EAC5B,qBMDa;ENEb,2BAA2B;EOhE7B,qCAAU;EAAV,iEAAU;EAAV,gDAAU;;EAyBN,6CAAgB;EAIhB,+CAAiB;AT6CzB;;AErGA;EAgGI,cAAc;EE1EZ,gBImEa;EHtEjB,kBAA6C;EAG3C,oBAA6D;EH6E7D,gBAAgB;EOxEhB,+BAAU;ATkFd;;Ae7GA;;EfiHE;Ae9GF;EAEI,QAAQ;EXqBR,kBWpB0B;Af+G9B;;AelHA;EXmBM,eWbuB;EXavB,mBImEa;ARiCnB;;AevHA;EAYI,8BAA8B;EXO5B,eWNqB;EACvB,0BAAiC;Af+GrC;;AUrHE;EKSI,cAAc;EACd,QAAQ;EXCR,qBImEa;EJnEb,iBImEa;EOjEb,iBAAiB;AfgHvB;;AU7HE;EKiBI,UAAU;EACV,WP4Da;ARoDnB;;Ae1IA;EA+BI,QAAQ;Af+GZ;;AgBjJA;;EhBqJE;AgBlJF;ECiBE,eAAU;EACV,eAAU;EACV,aAAW;EACX,aAAW;EACX,aAAW;EACX,cAAY;EACZ,kBAAa;AjBoIf;;AM7JE;EG0BE,sDAAU;;EAyBN,mDAAgB;EAIhB,qDAAiB;ATkIzB;;AkBxLI;EL4BE,2MAAe;AbqKrB;;AmBzJU;EVfN,uDAAU;AT4Kd;;AMtME;EG0BE,iDAAU;;EAyBN,8CAAgB;EAIhB,gDAAiB;ATqJzB;;AUlME;EGYE,2MAAe;EAUf,qCAA6B;AbiLjC;;AkBhNI;EL4BE,wMAAe;AbwLrB;;AU3ME;EDgBE,gCAAU;AT+Ld;;AU/ME;EDgBE,gCAAU;EAAV,uDAAU;AToMd;;AMtKI;EG9BA,uDAAU;AT4Md","file":"toggle.main.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  TOGGLE\n\\* ˍˍˍˍˍˍˍˍˍ */\n.fr-toggle {\n  display: flex;\n  flex-wrap: wrap;\n  position: relative;\n  padding: 1rem 0;\n  --text-spacing: 0;\n  --title-spacing: 0;\n  /*\n   * On utilise un input de type checkbox pour gérer le toggle\n   * On reset ses styles afin de ne garder que son fonctionnement et son espacement\n   * On l'utilisera égalemement pour afficher l'état du toggle (optionnel)\n   */\n}\n\n.fr-toggle input[type=\"checkbox\"] {\n  flex-shrink: 0;\n  width: 2.5rem;\n  height: 1.5rem;\n  border-radius: 0.75rem;\n  margin: 0;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  /*\n     * On applique des styles aux pseudo-elements du label quand l'input est check.\n     * On change l'ordre du texte d'état du label dans le content pour afficher\n     * la valeur correspondant à l'état checked (optionnel).\n     */\n}\n\n.fr-toggle input[type=\"checkbox\"]:checked ~ .fr-toggle__label[data-fr-unchecked-label][data-fr-checked-label]::before {\n  content: attr(data-fr-checked-label);\n}\n\n.fr-toggle input[type=\"checkbox\"]:checked ~ .fr-toggle__label::after {\n  transform: translateX(1rem);\n  z-index: 1000;\n}\n\n.fr-toggle label {\n  --toggle-status-width: auto;\n  display: inline-flex;\n  flex-basis: calc(100% - 2.5rem);\n  min-height: 1.5rem;\n  padding-left: 2rem;\n  font-size:  1rem ;\n  line-height:  1.5rem ;\n  /*\n     * Si les data attributes sont présents, on assigne un content au pseudo element before,\n     * et on enlève le padding left du label.\n     */\n  /*\n     * On prévoit un pseudo-élément pour afficher l'état du bouton( optionnel)\n     * On récupère le text via l'attribut [data-fr-unchecked-label]\n     */\n  /*\n     * On inclut l'icône check en background dans un pseudo-element after\n     *\n     */\n}\n\n.fr-toggle label[data-fr-unchecked-label][data-fr-checked-label] {\n  padding-left: 0;\n}\n\n.fr-toggle label[data-fr-unchecked-label][data-fr-checked-label]::before {\n  content: attr(data-fr-unchecked-label);\n}\n\n.fr-toggle label[data-fr-unchecked-label][data-fr-checked-label] + .fr-hint-text {\n  margin-top: 0.5rem;\n}\n\n.fr-toggle label::before {\n  flex-shrink: 0;\n  min-width: 2.5rem;\n  height: calc(1.25rem + 1px);\n  margin-top: 1.5rem;\n  margin-left: -2.5rem;\n  margin-right: 1rem;\n  font-size:  0.75rem ;\n  line-height:  1.25rem ;\n  white-space: pre-wrap;\n  overflow: hidden;\n  outline: none !important;\n  width: var(--toggle-status-width);\n}\n\n.fr-toggle label::after {\n  content: \"\";\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 1rem;\n  left: 0;\n  width: 1.5rem;\n  height: 1.5rem;\n  border-radius: 50%;\n  background-repeat: no-repeat;\n  background-size: 1rem;\n  background-position: center;\n}\n\n.fr-toggle .fr-hint-text {\n  display: block;\n  margin-top: 1rem;\n  font-size:  0.75rem ;\n  line-height:  1.25rem ;\n  flex-basis: 100%;\n}\n\n/*\n * Passage du label ferré à gauche, le toggle ferré à droite\n */\n.fr-toggle--label-left .fr-toggle__input {\n  order: 1;\n  margin: 0 0 0 auto;\n}\n\n.fr-toggle--label-left .fr-toggle__input[data-fr-checked-label] ~ .fr-toggle__label {\n  padding-left: 0;\n  padding-right: 1rem;\n}\n\n.fr-toggle--label-left .fr-toggle__label {\n  justify-content: space-between;\n  padding-left: 0;\n  width: calc(100% - 2.5rem);\n}\n\n.fr-toggle--label-left .fr-toggle__label::before {\n  flex-shrink: 0;\n  order: 1;\n  margin-right: -2.5rem;\n  margin-left: 1rem;\n  text-align: right;\n}\n\n.fr-toggle--label-left .fr-toggle__label::after {\n  left: auto;\n  right: 1rem;\n}\n\n.fr-toggle--label-left .fr-hint-text {\n  order: 2;\n}\n\n/*\n * On surcharge les styles de base\n */\n.fr-toggle__list {\n  --ul-type: none;\n  --ol-type: none;\n  --ul-start: 0;\n  --ol-start: 0;\n  --xl-block: 0;\n  --li-bottom: 0;\n  --ol-content: none;\n}\n\n.fr-toggle {\n  /*\n    * Ajout d'un séparateur\n    */\n}\n\n.fr-toggle label::before {\n  color: var(--text-active-blue-france);\n}\n\n.fr-toggle label::after {\n  color: var(--text-active-blue-france);\n  box-shadow: inset 0 0 0 1px var(--border-action-high-blue-france);\n  background-color: var(--background-default-grey);\n  --hover: var(--background-default-grey-hover);\n  --active: var(--background-default-grey-active);\n}\n\n.fr-toggle input[type=\"checkbox\"] {\n  box-shadow: inset 0 0 0 1px var(--border-action-high-blue-france);\n}\n\n.fr-toggle input[type=\"checkbox\"]:checked {\n  background-color: var(--background-active-blue-france);\n  --hover: var(--background-active-blue-france-hover);\n  --active: var(--background-active-blue-france-active);\n}\n\n.fr-toggle input[type=\"checkbox\"]:checked ~ .fr-toggle__label::after {\n  --data-uri-svg: url(\"data:image/svg+xml;charset=utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'><path fill='%23000091' d='M10 15.17l9.2-9.2 1.4 1.42L10 18l-6.36-6.36 1.4-1.42z'/></svg>\");\n  background-image: var(--data-uri-svg);\n}\n\n:root[data-fr-theme=\"dark\"] .fr-toggle input[type=\"checkbox\"]:checked ~ .fr-toggle__label::after {\n  --data-uri-svg: url(\"data:image/svg+xml;charset=utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'><path fill='%238585f6' d='M10 15.17l9.2-9.2 1.4 1.42L10 18l-6.36-6.36 1.4-1.42z'/></svg>\");\n}\n\n.fr-toggle input[type=\"checkbox\"]:disabled {\n  box-shadow: inset 0 0 0 1px var(--border-disabled-grey);\n}\n\n.fr-toggle input[type=\"checkbox\"]:disabled:checked {\n  background-color: var(--background-disabled-grey);\n  --hover: var(--background-disabled-grey-hover);\n  --active: var(--background-disabled-grey-active);\n}\n\n.fr-toggle input[type=\"checkbox\"]:disabled:checked ~ .fr-toggle__label::after {\n  --data-uri-svg: url(\"data:image/svg+xml;charset=utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'><path fill='%23929292' d='M10 15.17l9.2-9.2 1.4 1.42L10 18l-6.36-6.36 1.4-1.42z'/></svg>\");\n  background-image: var(--data-uri-svg);\n}\n\n:root[data-fr-theme=\"dark\"] .fr-toggle input[type=\"checkbox\"]:disabled:checked ~ .fr-toggle__label::after {\n  --data-uri-svg: url(\"data:image/svg+xml;charset=utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'><path fill='%23666' d='M10 15.17l9.2-9.2 1.4 1.42L10 18l-6.36-6.36 1.4-1.42z'/></svg>\");\n}\n\n.fr-toggle input[type=\"checkbox\"]:disabled ~ .fr-toggle__label::before {\n  color: var(--text-disabled-grey);\n}\n\n.fr-toggle input[type=\"checkbox\"]:disabled ~ .fr-toggle__label::after {\n  color: var(--text-disabled-grey);\n  box-shadow: inset 0 0 0 1px var(--border-disabled-grey);\n}\n\n.fr-toggle .fr-hint-text {\n  color: var(--text-mention-grey);\n}\n\n.fr-toggle--border-bottom {\n  box-shadow: inset 0 -1px 0 0 var(--border-default-grey);\n}\n","////\n/// Toggle Main\n/// @group toggle\n////\n\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  TOGGLE\n\\* ˍˍˍˍˍˍˍˍˍ */\n\n@import '../../core/style/path/path-2';\n@import 'index';\n@import 'style/module';\n@import 'style/scheme';\n\n@include _toggle-scheme;\n","////\n/// Toggle Module : toggle\n/// @group toggle\n////\n\n#{ns(toggle)} {\n  display: flex;\n  flex-wrap: wrap;\n  @include relative;\n  @include padding(4v 0);\n  @include set-text-margin(0);\n  @include set-title-margin(0);\n\n  /*\n   * On utilise un input de type checkbox pour gérer le toggle\n   * On reset ses styles afin de ne garder que son fonctionnement et son espacement\n   * On l'utilisera égalemement pour afficher l'état du toggle (optionnel)\n   */\n  input[type=\"checkbox\"] {\n    flex-shrink: 0;\n    @include size(10v, 6v);\n    border-radius: space(3v);\n    @include margin(0);\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n\n    /*\n     * On applique des styles aux pseudo-elements du label quand l'input est check.\n     * On change l'ordre du texte d'état du label dans le content pour afficher\n     * la valeur correspondant à l'état checked (optionnel).\n     */\n    &:checked {\n      ~ #{ns(toggle__label)} {\n        &#{ns-attr(unchecked-label)}#{ns-attr(checked-label)} {\n          @include before(attr(#{ns-attr(checked-label, null, true)}));\n        }\n\n        @include after {\n          transform: translateX(space(4v));\n          @include z-index(higher);\n        }\n      }\n    }\n  }\n\n  label {\n    --toggle-status-width: auto;\n    display: inline-flex;\n    flex-basis: space(calc(100% - 10v));\n    min-height: space(6v);\n    @include padding-left(8v);\n    @include text-style(md);\n\n    /*\n     * Si les data attributes sont présents, on assigne un content au pseudo element before,\n     * et on enlève le padding left du label.\n     */\n    &#{ns-attr(unchecked-label)}#{ns-attr(checked-label)} {\n      @include padding-left(0);\n\n      @include before(attr(#{ns-attr(unchecked-label, null, true)}));\n\n      + #{ns(hint-text)} {\n        @include margin-top(2v);\n      }\n    }\n\n    /*\n     * On prévoit un pseudo-élément pour afficher l'état du bouton( optionnel)\n     * On récupère le text via l'attribut [data-fr-unchecked-label]\n     */\n    @include before {\n      flex-shrink: 0;\n      min-width: space(10v);\n      height: space(calc(5v + 1px));\n      @include margin-top(6v);\n      @include margin-left(-10v);\n      @include margin-right(4v);\n      @include text-style(xs);\n      white-space: pre-wrap;\n      overflow: hidden;\n      outline: none !important;\n      width: var(--toggle-status-width);\n    }\n\n    /*\n     * On inclut l'icône check en background dans un pseudo-element after\n     *\n     */\n    @include after('') {\n      @include display-flex(null,center,center);\n      @include absolute(4v, null, null, 0, 6v, 6v);\n      border-radius: 50%;\n      background-repeat: no-repeat;\n      background-size: space(4v);\n      background-position: center;\n    }\n  }\n\n  #{ns(hint-text)} {\n    display: block;\n    @include margin-top(4v);\n    @include text-style(xs);\n    flex-basis: 100%;\n  }\n}\n","////\n/// Core Tool : Spacing position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin top($top) {\n  top: space($top);\n}\n\n@mixin right($top) {\n  right: space($top);\n}\n\n@mixin bottom($top) {\n  bottom: space($top);\n}\n\n@mixin left($top) {\n  left: space($top);\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n/// Set space property\n///\n/// @param {String} $property ['margin'] - propriété à appliquer à l'espacement `['margin', 'padding']`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `['x', 'y', 'top', 'right', 'bottom', 'left']`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing('margin', 6v, 'bottom');\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tool : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} font-size($font-size) #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin( var(#{'--' + map-get($settings, 'margin') + '-spacing'}) );\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin _set-typography-var($name, $value, $bp: null) {\n  @if $bp != null {\n    @include respond-from(#{$bp}) {\n      --#{$name}-spacing: #{space($value)};\n    }\n  }\n  @else {\n    --#{$name}-spacing: #{space($value)};\n  }\n}\n\n@mixin set-title-margin($margin, $bp:null) {\n  @include _set-typography-var(title, $margin, $bp);\n}\n\n@mixin set-text-margin($margin, $bp:null) {\n  @include _set-typography-var(text, $margin, $bp);\n}\n\n@mixin set-display-margin($margin, $bp:null) {\n  @include _set-typography-var(display, $margin, $bp);\n}\n","////\n/// Toggle Scheme\n/// @group toggle\n////\n\n@mixin _toggle-scheme($legacy: false) {\n  #{ns(toggle)} {\n    label {\n      @include before {\n        @include scheme-element-text-color(active blue-france, (legacy:$legacy));\n      }\n\n      @include after {\n        @include scheme-element-text-color(active blue-france, (legacy:$legacy));\n        @include scheme-element-box-shadow-color(action-high blue-france, (legacy:$legacy), all-1-in);\n        @include scheme-element-bg-color(default grey, (legacy:$legacy));\n      }\n    }\n\n    input[type=\"checkbox\"] {\n      @include scheme-element-box-shadow-color(action-high blue-france, (legacy:$legacy), all-1-in);\n\n      &:checked {\n        @include scheme-element-bg-color(active blue-france, (legacy:$legacy));\n\n        ~ #{ns(toggle__label)} {\n          @include after {\n            @include scheme-element-data-uri-svg(action-high blue-france, (legacy: $legacy), $toggle-svg);\n          }\n        }\n      }\n\n      @include disabled((legacy: $legacy, box-shadow: true)) {\n        &:checked {\n          @include disabled-colors((legacy: $legacy, background: true));\n\n          ~ #{ns(toggle__label)} {\n            @include after {\n              @include scheme-element-data-uri-svg(text disabled grey, (legacy: $legacy), $toggle-svg);\n            }\n          }\n        }\n\n        ~ #{ns(toggle__label)} {\n          @include before {\n            @include disabled-colors((legacy: $legacy, text: true));\n          }\n\n          @include after {\n            @include disabled-colors((legacy: $legacy, text: true, box-shadow: true));\n          }\n        }\n      }\n    }\n\n    #{ns(hint-text)} {\n      @include scheme-element-text-color(mention grey, (legacy:$legacy));\n    }\n\n    /*\n    * Ajout d'un séparateur\n    */\n    &--border-bottom {\n      @include scheme-element-box-shadow-color(default grey, (legacy:$legacy), bottom-1-in);\n    }\n  }\n}\n","////\n/// Core Tool : Spacing size\n/// @group core\n////\n\n@mixin width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n  }\n}\n\n@mixin min-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      min-width: #{space($width)};\n    }\n  }\n}\n\n@mixin max-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      max-width: #{space($width)};\n    }\n  }\n}\n\n@mixin height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      min-height: #{space($height)};\n    }\n  }\n}\n\n@mixin max-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      max-height: #{space($height)};\n    }\n  }\n}\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Function : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if type-of($value) == list {\n    $list: ();\n    $separator: list-separator($value);\n    @each $v in $value {\n      $list: append($list, space($v), $separator);\n    }\n    @return $list;\n  }\n  @if type-of($value) == string {\n    $c: str-index($value, '(');\n    @if $c {\n      $b: null;\n      $n: 0;\n      $i: $c + 1;\n      $l: str-length($value);\n      @while $b == null and $i <= $l {\n        $char: str-slice($value, $i, $i);\n        @if $char == '(' {\n          $n: $n + 1;\n        }\n        @else if $char == ')' {\n          @if $n > 0 {\n            $n: $n - 1;\n          }\n          @else {\n            $b: $i;\n          }\n        }\n        $i: $i + 1;\n      }\n\n      $start: unquote('');\n      $middle: space(str-slice($value, $c + 1, $b - 1));\n      $end: unquote('');\n\n      @if $c > 1 {\n        $start: space(str-slice($value, 1, $c - 1));\n      }\n\n      $l: str-length($value);\n      @if $b < $l {\n        $end: space(str-slice($value, $b + 1, $l));\n      }\n\n      @return unquote('#{$start}(#{$middle})#{$end}');\n    }\n\n    @if str-index($value, ',') {\n      @return space(str-split($value, ','));\n    }\n\n    @if str-index($value, ' ') {\n      @return space(str-split($value, ' '));\n    }\n\n    $value: unquote($value);\n  }\n\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $v: quote($value);\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * $V;\n  }\n  @else if is-unit($value, w) {\n    @return $q * $W;\n  }\n  @return $value;\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $standalone: map-get($options, standalone);\n\n  $legacy-target: null;\n  @if $legacy {\n    $legacy-target: ie11;\n  }\n\n  $tokens: normalise-tokens($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n\n  $colors: get-colors($tokens, $type, $options);\n  $result: get-result($colors, $value);\n  $result: important($result, $important);\n\n  @include legacy($legacy-target) {\n    #{$prop}: #{$result};\n  }\n\n  @if ($hover == true or ($hover == inherit and $legacy == false)) and ($context == background and length($tokens) == 1) {\n    $nest-hover: null;\n    $prop-hover: --hover;\n    $result-hover: #{important(get-color(nth($tokens, 1), decision, (var: true, hover: true)), $important)};\n    $nest-active: null;\n    $prop-active: --active;\n    $result-active: #{important(get-color(nth($tokens, 1), decision, (var: true, active: true)), $important)};\n\n    @if $legacy or $standalone {\n      $type: hex;\n      $option: (theme: light);\n\n      $nest-hover: '&:hover';\n      $prop-hover: $prop;\n      $result-hover: #{important(get-color(nth($tokens, 1), hex, (hover: true)), $important)};\n      $nest-active: '&:active';\n      $prop-active: $prop;\n      $result-active: #{important(get-color(nth($tokens, 1), hex, (active: true)), $important)};\n    }\n\n    @include legacy($legacy-target) {\n      @include nest($nest-hover) {\n        #{$prop-hover}: #{$result-hover};\n      }\n\n      @include nest($nest-active) {\n        #{$prop-active}: #{$result-active};\n      }\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-color($tokens, $options:()) {\n  @if not map-has-key($options, hover) {\n    $options: map-merge($options, (hover: inherit));\n  }\n  @include _scheme-element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin scheme-element-bg-transparent($options) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $tokens: normalise-tokens(default grey, background);\n  $value: important(transparent, $important);\n\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n\n      @if $hover {\n        &:hover {\n          background-color: rgba(0, 0, 0, 0.05);\n        }\n\n        &:active {\n          background-color: rgba(0, 0, 0, 0.1);\n        }\n      }\n    }\n  }\n  @else {\n    background-color: #{$value};\n    @if $hover {\n      --hover: inherit;\n      --active: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: get-tokens-length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-text-color($tokens, $options) {\n  @include _scheme-element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-fill-color($tokens, $options) {\n  @include _scheme-element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map-has-key($options, side) {\n    $prop:border-#{map-get($options, side)};\n  }\n  @include _scheme-element($prop, border, $tokens, $options, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($tokens, $options, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: get-tokens-length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $tokens, $options, space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Tool : Spacing z-index\n/// @group core\n////\n\n/// Fonction de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@function z-index($index-name) {\n  @return map-get($z-indexes, $index-name);\n}\n\n/// Mixin de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@mixin z-index($index-name, $focus: false) {\n  z-index: z-index($index-name);\n  @if $focus {\n    $focus-z-index: z-index($index-name + '-focus');\n\n    @if $focus-z-index != null {\n      *:focus,\n      *:focus-visible {\n        z-index: #{$focus-z-index};\n      }\n    }\n  }\n}\n","////\n/// Core Setting : Spacing z-index\n/// @group core\n////\n\n/// Liste des z-index présent dans le DS\n/// @type map\n$z-indexes: (\n  auto: auto,\n  below: -2,\n  under: -1,\n  base: 0,\n  over: 1,\n  above: 2,\n  focus: 500,\n  higher: 1000,\n  higher-focus: 1500,\n  menu: 2000,\n  menu-focus: 2500,\n  nav: 3000,\n  nav-focus: 3500,\n  consent: 4000,\n  consent-focus: 4500,\n  modal: 5000,\n  modal-focus: 5500,\n  modal-footer: 6000,\n  modal-footer-focus: 6500,\n);\n","////\n/// Schemes Tools : Data URI SVG\n/// @group core\n////\n\n/// Combinaison de couleur appliquée à un svg intégré en data-uri\n/// @access public\n// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {Object} $value - le SVG en data-uri\n/// @param {String} $prop - propriété sur laquelle est assignée le svg\n/// @example @include scheme-element-data-uri-svg(text title grey, false, \"<svg><path fill='$COLOR'></path></svg>\"));\n@mixin scheme-element-data-uri-svg($tokens, $options: (), $value: \"<svg><path fill='$COLOR'></path></svg>\", $prop: background-image) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $tokens: normalise-tokens($tokens);\n  $light-colors: get-colors($tokens, hex, (theme: light));\n  $light: get-result($light-colors, $value);\n  $light: important($light, $important);\n\n  @if $legacy {\n    @include legacy(ie11) {\n      #{$prop}: #{url(svg-encode($light, true))};\n    }\n  }\n  @else {\n    --data-uri-svg: #{url(svg-encode($light, false))};\n\n    $dark-colors: get-colors($tokens, hex, (theme: dark));\n    $dark: get-result($dark-colors, $value);\n    $dark: important($dark, $important);\n\n    @include theme-selector(dark) {\n      --data-uri-svg: #{url(svg-encode($dark, false))};\n    }\n\n    #{$prop}: var(--data-uri-svg);\n  }\n}\n","////\n/// Core Tool : Display display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n","////\n/// Toggle Module : Variants\n/// @group toggle\n////\n\n/*\n * Passage du label ferré à gauche, le toggle ferré à droite\n */\n#{ns(toggle--label-left)} {\n  #{ns(toggle__input)} {\n    order: 1;\n    @include margin(0 0 0 auto);\n\n    &#{ns-attr(checked-label)} ~ #{ns(toggle__label)} {\n      @include padding-left(0);\n      @include padding-right(4v);\n    }\n  }\n\n  #{ns(toggle__label)} {\n    justify-content: space-between;\n    @include padding-left(0);\n    width: calc(100% - #{space(10v)});\n\n    @include before {\n      flex-shrink: 0;\n      order: 1;\n      @include margin-right(-10v);\n      @include margin-left(4v);\n      text-align: right;\n    }\n\n    @include after {\n      left: auto;\n      right: space(4v);\n    }\n  }\n\n  #{ns(hint-text)} {\n    order: 2;\n  }\n}\n","////\n/// Toggle Module : Group\n/// @group toggle\n////\n\n/*\n * On surcharge les styles de base\n */\n#{ns(toggle)}__list {\n  @include disable-list-style;\n}\n","////\n/// Core Tool : Reset list\n/// @group core\n////\n\n@mixin enable-list-style() {\n  $selector: null;\n\n  @if & == null {\n    $selector: ':root';\n  }\n\n  @include nest($selector) {\n    --ul-type: disc;\n    --ol-type: decimal;\n    --ul-start: #{space(4v)};\n    --ol-start: #{space(6v)};\n    --xl-block: #{space(2v)};\n    --li-bottom: #{space(1v)};\n    --xl-base: 1em;\n    --ol-content: counters(li-counter, \".\") \".\\00a0\\00a0\";\n  }\n}\n\n@mixin disable-list-style() {\n  --ul-type: none;\n  --ol-type: none;\n  --ul-start: 0;\n  --ol-start: 0;\n  --xl-block: 0;\n  --li-bottom: 0;\n  --ol-content: none;\n}\n\n@mixin enable-list-style-legacy($unify: false) {\n  $ul: ul;\n  $ol: ol;\n\n  @if $unify {\n    $ul: selector-associate('&', 'ul');\n    $ol: selector-associate('&', 'ol');\n  }\n\n  @at-root {\n    #{$ul} {\n      list-style-type: disc;\n    }\n\n    #{$ol} {\n      list-style-type: decimal;\n    }\n\n    #{$ul},\n    #{$ol} {\n      @include padding-left(4v);\n      @include margin-y(2v);\n    }\n  }\n}\n\n@mixin disable-list-style-legacy($unify: false) {\n  $ul: & ul;\n  $ol: & ol;\n\n  @if $unify {\n    $ul: selector-associate(&, ul);\n    $ol: selector-associate(&, ol);\n  }\n\n  @at-root {\n    #{$ul} {\n      list-style-type: none;\n    }\n\n    #{$ol} {\n      list-style-type: none;\n    }\n\n    #{$ul},\n    #{$ol} {\n      @include padding-left(0);\n      @include margin-y(0);\n    }\n  }\n}\n","////\n/// Core Tool : Selector nest\n/// @group core\n////\n\n@mixin nest($selector: null) {\n  @if $selector {\n    #{$selector} {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Core Tool : Color disabled\n/// @group core\n////\n\n/// Applique les couleurs disabled sur l'élément\n/// @access public\n/// @param {map} map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - background {boolean}: true, applique le token background disabled sur la couleur de fond\n///   - text {boolean}: true, applique le token text disabled sur la couleur de texte\n///   - box-shadow {}: si true, applique le token border disabled sur l'élément avec la box-shadow par défaut (encadré de 1 px). si une valeur de box-shadow est fournie, applique cette valeur (voir get-box-shadow)\n@mixin disabled-colors($options: ()) {\n  $legacy: map-get($options, legacy);\n  $text: map-get($options, text);\n  $background: map-get($options, background);\n  $box-shadow: map-get($options, box-shadow);\n\n  @if $text {\n    @include scheme-element-text-color(disabled grey, (legacy: $legacy));\n  }\n\n  @if $background {\n    @include scheme-element-bg-color(disabled grey, (legacy: $legacy));\n  }\n\n  @if $box-shadow == true {\n    @include scheme-element-box-shadow-color(disabled grey, (legacy: $legacy));\n  }\n  @else if $box-shadow {\n    @include scheme-element-box-shadow-color(disabled grey, (legacy: $legacy), $box-shadow);\n  }\n}\n/// Applique les couleurs disabled sur l'élément avec les sélecteurs appropriés\n/// @access public\n/// @param {map} map des options :\n///   - can-be-link {boolean}: ajoute le sélecteur de lien sans href.\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - background {boolean}: true, applique le token background disabled sur la couleur de fond\n///   - text {boolean}: true, applique le token text disabled sur la couleur de texte\n///   - box-shadow {}: si true, applique le token border disabled sur l'élément avec la box-shadow par défaut (encadré de 1 px). si une valeur de box-shadow est fournie, applique cette valeur (voir get-box-shadow)\n@mixin disabled($options: ()) {\n  $selectors: '&:disabled';\n  @if map-get($options, can-be-link) {\n    $selectors: append($selectors, selector-associate(&, 'a:not([href])'), comma);\n  }\n\n  @at-root #{$selectors} {\n    @include disabled-colors($options);\n    @content;\n  }\n}\n"]}