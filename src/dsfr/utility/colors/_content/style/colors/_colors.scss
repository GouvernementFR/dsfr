@use 'sass:list';
@use 'sass:map';
@use '../../../../../../sass/color';
@use '../../../../../../sass/selector';

@mixin colors($decisions, $legacy: false) {
  @each $context, $list in $decisions {
    $uses: map.get(color.$decisions, $context);
    @if $uses == null {
      @error 'context #{$context} doesn\'t exist in $scheme-decisions';
    }
    @each $use in $list {
      $families: map.get($uses, $use);
      @if $families == null {
        @error 'use #{$use} doesn\'t exist in $scheme-decisions';
      }
      @each $family, $settings in $families {
        $shade: list.nth($settings, 1);
        @each $tint, $shades in map.get(color.$sets, $family) {
          @if map.has-key($shades, $shade) {
            $selector: '#{$context}-#{$use}--#{$tint}';
            @include selector.class('#{$context}-#{$use}', (modifier: $tint)) {
              @if $context == background {
                $hover: false;
                @if list.length($settings) > 1 {
                  $params: list.nth($settings, 2);
                  @if map.get($params, hover) {
                    $hover: true;
                  }
                }
                @include color.background($use $tint, (legacy: $legacy, important: true, hover: $hover));
              }
              @else if $context == text {
                @include color.text($use $tint, (legacy: $legacy, important: true));
              }
              @else if $context == artwork {
                @include color.fill(artwork $use $tint, (legacy: $legacy, important: true));
              }
            }
          }
        }
      }
    }
  }
}
