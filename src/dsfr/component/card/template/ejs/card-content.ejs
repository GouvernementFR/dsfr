<%#
# paramètres du contenu principal de la carte

* content.title (string, required) : Titre de la carte

* content.href (string, optional) : href du lien de la carte

* content.noLink (boolean, optional) : présence du lien

* content.description (string, optional) : Description

* content.badgesGroup (array, optional) : Groupe de badges (voir badge)

* content.tagsGroup (array, optional) : Groupe de tags (voir tag)

* content.details (array, optional) : Détails

* content.blank (boolean, optional) : Ajoute l'attribut target="_blank" pour ouvrir le lien dans une nouvelle fenêtre, nécessite l'ajout d'un attribut title "intitulé - nouvelle fenêtre"

* content.markup (string, optional) : (défaut : h3) niveau de titre

* content.assess (String, optional): remplissage automatique du poids et format du fichier à telecharger (true ou "bytes")

* content.downloadable (boolean || string, optional) : Ajoute l'attribut download au lien, si string, ajoute la valeur comme nom de fichier

* content.lang (boolean, optional) : Ajoute l'attribut hreflang au lien, pour définir la langue du document lié

* content.disabled (boolean, optional) : Si true, retire le href du lien pour le désactiver

* content.attributes (object, optional) : Attributs à ajouter au lien

* content.actionMarkup (string, optional) : balise de l'actionneur du composant (a, button)

* content.actionTitle (string, optional) : Attribut title de l'actionneur

* content.actionType (string, optional) : Attribut type de l'actionneur

%>

<% eval(include('../../../../core/index.ejs')); %>

<%
let start, end;
const content = locals.content || {};
const markup = content.markup || 'h3';
const actionMarkup = content.actionMarkup || 'a';
const hasLink = !content.noLink;
const href = content.href || '#';
let attributes = content.attributes || {};

if (content.actionTitle) attributes.title = content.actionTitle;

if (actionMarkup === 'button') attributes.type = content.actionType || actionMarkup;

switch (actionMarkup) {
  case 'a':
    if (content.rel) attributes.rel = content.rel;
    if (content.lang) attributes.hreflang = content.lang;
    if (content.assess === true) {
        attributes[`data-${prefix}-assess-file`] = ''
    } else if (typeof(content.assess) === 'string') {
        attributes[`data-${prefix}-assess-file`] = content.assess
    }
    break;
}

if (content.downloadable === true && actionMarkup === 'a') attributes.download = '';
if (typeof(content.downloadable) === 'string') attributes.download = content.downloadable;

const startDetails = content.details ? content.details.filter(detail => !detail.position || detail.position === 'start') : [];

switch (true) {
    case content.badgesGroup !== undefined :
    case content.tagsGroup !== undefined :
    case startDetails.length > 0 :
      start = {};
      if (content.badgesGroup) start.badgesGroup = content.badgesGroup;
      if (content.tagsGroup) start.tagsGroup = content.tagsGroup;
      if (startDetails.length) start.details = startDetails;
      break;
}

const endDetails = content.details ? content.details.filter(detail => detail.position === 'end') : [];

switch (true) {
    case endDetails.length > 0 :
        end = {};
        if (endDetails.length) end.details = endDetails;
        break;
}
%>

<div class="<%= prefix %>-card__content">
    <<%= markup %> class="<%= prefix %>-card__title">
        <% if (hasLink) { %>
            <%- include('../../../../core/template/ejs/action/action.ejs', {action: {...content, attributes, markup: actionMarkup, label: content.title, disabled: content.disabled}}) %>
        <% } else { %>
            <%- content.title %>
        <% } %>
    </<%= markup %>>

    <% if (content.description !== undefined) { %>
        <p class="<%= prefix %>-card__desc"><%- content.description %></p>
    <% } %>

    <% if (start) { %>
        <%- include('card-start.ejs', {start: start }); %>
    <% } %>

    <% if (end) { %>
        <%- include('card-end.ejs', {end: end }); %>
    <% } %>
</div>
