@use 'sass:selector';
@use 'namespace';
@use '../function/extremities';

@mixin pattern($selector, $unify: true) {
  @if & == null {
    @at-root #{$selector} {
      @content;
    }
  }
  @else if $unify {
    @at-root #{selector.unify(&, $selector)} {
      @content;
    }
  }
  @else {
    #{$selector} {
      @content;
    }
  }
}

@mixin contains($unify: true, $patterns...) {

  @if length($patterns) == 1 and length(nth($patterns, 1)) > 1 {
    $patterns: nth($patterns, 1);
  }

  $selectors: '';

  @each $pattern in $patterns {
    $selectors: '#{$selectors}[class*="#{$pattern}"]';
  }

  @include pattern($selectors, $unify) {
    @content;
  }
}

@mixin not-contains($unify: true, $patterns...) {

  @if length($patterns) == 1 and length(nth($patterns, 1)) > 1 {
    $patterns: nth($patterns, 1);
  }

  $selectors: '';
  @each $pattern in $patterns {
    $selectors: '#{$selectors}:not([class*="#{$pattern}"])';
  }

  @include pattern($selectors, $unify) {
    @content;
  }
}

@mixin start-with($start, $unify: true) {
  @include pattern(extremities.start-with($start), $unify) {
    @content;
  }
}

@mixin not-start-with($start, $unify: true) {
  @include pattern(extremities.not-start-with($start), $unify) {
    @content;
  }
}

@mixin end-with($end, $unify: true) {
  @include pattern(extremities.end-with($end), $unify) {
    @content;
  }
}

@mixin not-end-with($end, $unify: true) {
  @include pattern(extremities.not-end-with($end), $unify) {
    @content;
  }
}

@mixin is-ns($unify: true) {
  @include start-with(namespace.ns('', ''), $unify) {
    @content;
  }
}

@mixin is-not-ns($unify: true) {
  @include not-start-with(namespace.ns('', ''), $unify) {
    @content;
  }
}
