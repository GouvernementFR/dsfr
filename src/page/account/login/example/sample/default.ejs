<%
	const sample = getSample(include);
	const login = locals.login || {};
	const connect = {
		login: getText('default.login', 'connect'),
		brand: getText('default.brand', 'connect'),
		link: {
			label: getText('default.link', 'connect'),
			href: getText('default.href', 'connect')
		},
	};

  const alert = {
		type: 'alert',
		template: 'alert',
		data: {
			id: uniqueId('alert'),
			size: 'sm',
			text: getText('label.error.login', 'login'),
			type: 'error',
			classes: [prefix + '-mb-2v']
		},
	};

	const form = {
    id: uniqueId('login'),
    label: getText('label.fieldset', 'login'),
    items:[
			{
				type: 'paragraph',
				template: 'typography/paragraph',
				base: '../core',
				data: {
					content: getText('hint.fieldset', 'login'),
					classes: [prefix + '-hint-text', prefix + '-mb-0']
				},
			},
			{
				type: 'input',
				base:'input/input-base',
				template: 'input',
				data: {
					id: uniqueId('identifier'),
					hint: getText('hint.identifier', 'login'),
					label: getText('label.identifier', 'login'),
					error: login.error || undefined,
					attributes: {
						'aria-describedby': alert ? alert.id : undefined
					},
					labelClasses: login.error ? [prefix + '-label--error'] : undefined,
					name: 'identifier'
				}
			},
			{
				type: 'password',
				template: 'password',
				data: {
					name: 'password',
					id: uniqueId('password'),
					input: {
						error: login.error || undefined,
						label: getText('label.password', 'login'),
						labelClasses: login.error ? [prefix + '-label--error'] : undefined,
						attributes: {
							'aria-describedby': alert ? alert.id : undefined
						},
						autocomplete: 'current-password'
					},
					checkbox: {},
					format: false,
					link: {
						href: contentPlaceholder(getText('link.href', 'password')),
						label: getText('link.label', 'password'),
					}
				}
			},
			{
				type: 'checkbox',
				template: 'checkbox-group',
				data: {
					id: uniqueId('remember'),
					label: getText('label.remember', 'login'),
					name: 'remember',
					checked: false,
					size: 'sm',
				}
			},
			{
				type: 'buttonsGroup',
				base: 'button',
				template: 'buttons-group',
				data: {
					buttons: [
						{
							label: getText('label.button.connect', 'login'),
							kind: 1,
							classes: [prefix + '-mt-2v']
						}
					]
				}
			},
    ]
	};

	const registerButton = {
		label: getText('label.button.create', 'login'),
		kind: 2
	};

	if (login.error) {
		form.items.unshift(alert);
	}

	const data = {
		title: getText('label.default', 'login'),
		connect: {
			...connect,
			title: getText('label.connect', 'login'),
		},
		login: {
			title: getText('label.login', 'login'),
			desc: getText('label.desc', 'login'),
			form: {...form},
		},
		register: {
			title: getText('label.register', 'login'),
			button: registerButton
		}
	};

 %>

<%- include('../../../template/ejs/login.ejs', { login: data }); %>
