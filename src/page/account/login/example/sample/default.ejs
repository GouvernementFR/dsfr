<%
const sample = getSample(include);
const login = locals.login || {};
const alert = login.alert || undefined;
const connect = JSON.parse(include('../../../../../component/connect/example/data/connect.json.ejs'));

const elements = [];

elements.push({
  type: 'paragraph',
  data: {
    content: getText('label.desc', 'login'),
    size: 'sm'
  }
});

if (alert) {
  elements.push({
    type: 'alert',
    data: alert
  });
}

elements.push({
  type: 'hint',
  data: {
    text: getText('hint.fieldset', 'login')
  }
})

elements.push({
  type: 'input',
  base: 'input/input-base',
  template: 'input',
  data: {
    id: uniqueId('username'),
    hint: getText('hint.username', 'login'),
    label: getText('label.username', 'login'),
    error: alert ? alert.type === 'error' : undefined,
    attributes: {
      'aria-describedby': alert ? alert.id : undefined,
      'autocomplete': 'username',
      'aria-required': true
    },
    labelClasses: login.error ? [prefix + '-label--error'] : undefined,
    name: 'username'
  }
});

elements.push({
  type: 'password',
  template: 'password',
  data: {
    name: 'password',
    id: uniqueId('password'),
    input: {
      error: alert ? alert.type === 'error' : undefined,
      label: getText('label.password', 'login'),
      labelClasses: login.error ? [prefix + '-label--error'] : undefined,
      attributes: {
        'aria-describedby': alert ? alert.id : undefined
      },
      autocomplete: 'current-password'
    },
    checkbox: {},
    format: false,
    link: {
      href: contentPlaceholder(getText('link.href', 'password')),
      label: getText('link.label', 'password'),
    }
  }
});

elements.push({
  type: 'checkbox',
  template: 'checkbox-group',
  data: {
    id: uniqueId('remember'),
    label: getText('label.remember', 'login'),
    name: 'remember',
    checked: false,
    size: 'sm',
  }
});

elements.push({
  type: 'buttonsGroup',
  data: {
    buttons: [
      {
        label: getText('label.button.connect', 'login'),
        kind: 1,
        classes: [prefix + '-mt-2v']
      }
    ]
  }
});

const form = {
  id: uniqueId('login'),
  legend: `<h5>${getText('label.login', 'login')}</h5>`,
  elements: elements
};

const registerButton = {
  label: getText('label.button.create', 'login'),
  kind: 2
};

const data = {
  title: getText('label.default', 'login'),
  connect: {
    ...connect,
    title: getText('label.connect', 'login'),
  },
  login: {
    form: form,
  },
  register: {
    title: getText('label.register', 'login'),
    button: registerButton
  }
};

const page = {
  block: {
    type: 'col-4-grey-bg',
    path: '../../../../login/template/ejs/login',
    data: { login: data }
  }
};

%>

<%- include('../../../template/ejs/page.ejs', { page: page }); %>
