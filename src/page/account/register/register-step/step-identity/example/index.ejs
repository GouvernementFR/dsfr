<%
const sample = getSample(include);
const stepper = {
  tag: 'h5',
  title: getText('label.step.identity', 'register'),
  nextStep: getText('label.step.address', 'register'),
  currentStep: 2,
  stepCount: 3,
};
const form = {
  id: 'register-step-2',
  label: getText('label.fieldset', 'register'),
  items:[
    {
      type: 'paragraph',
      template: 'typography/paragraph',
      base: '../core',
      content: getText('hint.fieldset', 'login'),
      data: {
        classes: [prefix + '-hint-text', prefix + '-mb-0']
      },
    },
    {
      type: 'fieldset',
      base:'form',
      template: 'fieldset',
      data: {
        id: uniqueId('civility-sexe'),
        legend: getText('legend.sex', 'civility'),
        choice: true,
        elements: [
          {
            path: 'radio/template/ejs/radio-group',
            data: {
              radio: {
                name: 'civility',
                id: 'civility-female',
                size: 'sm',
                label: getText('option.civility.female', 'civility'),
              }
            }
          },
          {
            path: 'radio/template/ejs/radio-group',
            data: {
              radio: {
                name: 'civility',
                id: 'civility-male',
                size: 'sm',
                label: getText('option.civility.male', 'civility'),
              }
            }
          },
        ]
      }
    },
    {
      type: 'input',
      base:'input/input-base',
      template: 'input',
      label: getText('label.name', 'name'),
      name: 'name'
    },
    {
      type: 'input',
      base:'input/input-base',
      template: 'input',
      label: getText('label.firstname', 'name'),
      name: 'firstname'
    },
    {
      type: 'checkbox',
      template: 'checkbox-group',
      label: getText('label.no-firstname', 'name'),
      name: 'no-firstname',
      size: 'sm',
      checked: false,
      data: {
        attributes: {onclick: `const control = this.closest('.fr-control'); const firstnameControl = control.previousElementSibling; const firstnameInput = firstnameControl.querySelector('input'); if (this.checked) { firstnameControl.classList.add('fr-control--disabled'); firstnameInput.setAttribute('disabled', ''); } else { firstnameControl.classList.remove('fr-control--disabled'); firstnameInput.removeAttribute('disabled'); }`},
      },
    },
    {
      type: 'buttonsGroup',
      base: 'button',
      template: 'buttons-group',
      data: {
        inline: true,
        classes: [prefix + '-btns-group--space-between', prefix + '-mt-2v'],
      },
      buttons: [
        {
          label: getText('label.button.previous', 'register'),
          kind: 2,
        },
        {
          label: getText('label.button.valid', 'register'),
          kind: 1,
        }
      ]
    },
  ]
};
const create = {
  form: form,
  title: getText('label.step.identity', 'register'),
  desc: false
}
%>

<%- sample('', '../../../example/sample/default.ejs', {register:{connect:false,stepper:stepper, create: create}}, true, '../../../../example/layout', {}); %>
