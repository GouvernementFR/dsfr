////
/// Schemes Module : Functions
/// @group schemes
////

/// Remplacement de la variable $COLOR par la couleur attendu
/// @access private
/// @param {String} $value - chaine de caractère dans laquelle remplacer la variable
/// @param {Color} $hex - couleur de remplacement
/// @param {Boolean} $url-encode - si true, la couleur est url-encodé
/// @return {String} retourne la variable avec la couleur intégrée
@function _replace_color($value, $hex, $url-encode:true) {
  @if $url-encode == true {
    $hex:unquote('%23' + str_slice(inspect($hex), 2));
  }

  @return str-replace($value, $COLOR, $hex);
}

/// Obtenir une couleur dans un set
/// @access private
/// @param {String} $set - combinaison de couleur
/// @param {String} $type - type de combinaison (light, dark, soft, strong)
/// @return {String} Retourne la couleur correspondant au $type dans un set de couleur définit dans settings/sets
@function _scheme-set-color($set, $type) {
  $result:null;
  $i: 0;

  @each $t, $variation in $scheme-blocks {
    $i: $i + 1;
    @if $type == $t and length($set) >= $i {
      @return nth($set, $i);
    }
  }

  @return nth($set, 1);
}

/// Obtenir la configuration d'un block de combinaison
/// @access private
/// @param {String} $type - type de combinaison (light, dark, soft, strong)
/// @param {String} $name - nom de la variation de bloc
/// @param {Int} $index - si un index est définit, retourne l'élément à l'index dans la variation, sinon retourne l'ensemble de la variation (liste)
/// @return {String} Retourne la configuration d'un bloc comme définit dans settings/blocks
@function _get-scheme($type, $name, $index:0) {
  $list: map_get(map_get($scheme-blocks, $type), $name);

  @if $index == 0 {
    @return $list;
  }

  @return nth($list, $index);
}

/// Obtenir la couleur d'hover
/// @access private
/// @param {Color} $color - couleur de base
/// @param {Number} $factor - mutliplicateur permettant d'amplifier l'effet
/// @return {Color} Retourne la couleur modifiée pour le hover avec une transparence de 0.5
@function _overlay-color($color, $factor: 1) {
  $sum: red($color) + green($color) + blue($color);
  $brightness: percentage($sum / (255*3));

  $c: #000;

  @if $brightness > 50% {
    $c: darken($color, (12% * $factor ) * (100% / $brightness));
  }
  @else {
    $c: lighten($color, (12% * $factor ) * (100% / (100% - $brightness)));
  }

  @return adjust_color($c, $alpha: -0.5);
}
