////
/// Schemes Tools : Component As Scheme
/// @group schemes
////

/// Stylisation du composant en tant que block de combinaison de couleur
/// @access private
/// @param {String} $type - le type de combinaison, voir settings blocks
/// @param {String} $color - la couleur du type
/// @param {List} $width - ajout d'une border avec la propriété width déterminant la taille de chacun des 4 côté (comme la propriété css border-width)
@mixin _stylize-component($type:light, $color:grey-100, $width: none) {
  $sets: _get-scheme($type, $color);
  background-color: var(--#{nth($sets, 1)});

  --scheme-border: var(--#{nth($sets, 2)});

  @if $width != none {
    @include _box-shadow-border(var(--scheme-border), $width);
  }
}

/// Component as scheme permet de conférer à un composant le statut de block de combinaison de couleur
/// @access public
/// @param {String} $type - le type de combinaison, voir settings blocks
/// @param {String} $color - la couleur du type
/// @param {Boolean} $modifier - est-ce que la couleur est assignée au composant par un modifier
/// @param {List} $width - ajout d'une border avec la propriété width déterminant la taille de chacun des 4 côté (comme la propriété css border-width)
@mixin component-as-scheme($type:light, $color:grey-100, $modifier:false, $width: none) {

  $selector: &;

  @at-root {
    @if $modifier and $type != light {
      &--scheme-#{$type}-#{$color} {
        @include _stylize-component($type, $color, $width);
        @content;
      }
    }
    @else {
      & {
        @include _stylize-component($type, $color, $width);
        @content;
      }
    }
  }
}

/// Cette mixin permet d'assigner à un composant tous les modifiers d'un type de combinaison
/// @access public
/// @param {String} $type - le type de combinaison, voir settings blocks
/// @param {List} $width - ajout d'une border avec la propriété width déterminant la taille de chacun des 4 côté (comme la propriété css border-width)
@mixin component-as-scheme-modifiers($type, $width: none) {
  $variation: map_get($scheme-blocks, $type);

  @each $color, $sets in $variation {
    @include component-as-scheme($type, $color, true);
  }

  @if $width != none {
    @include _box-shadow-border(var(--scheme-border), $width);
  }
}
