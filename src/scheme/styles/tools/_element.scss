////
/// Schemes Module : Element
/// @group schemes
////

/// map des transitions par élément
/// @type map
$scheme-elements-transitions:() !global;

/// Ajout d'une combinaison de couleur sur un élément pour un propriété donnée
/// @access private
/// @param {String} $set-name - nom de la combinaison comme défini dans settings/sets
/// @@param {String} $prop - propriété affectée
/// @param {Bool | String} $transition - objet auqel la transition de couleur est associée
/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)
/// @param {String | list}  $value - la valeur appliquée à la propriété. la variable $COLOR est remplacée par la custom property de la combinaison de couleur
/// @param {String}  $element - le sélécteur de l'élément

@mixin _scheme-element($set-name, $prop, $transition:false, $hover:false, $value:$COLOR, $element:&) {
  // hover
  @if $hover != false {
    $set: map_get($scheme-sets, $set-name);
    $light: _scheme-set-color($set, light);
    $dark: _scheme-set-color($set, dark);

    @at-root {
      @if $hover != override {
        #{$element} {
          @include _scheme-element-hover();
        }
      }

      #{$not-dark-theme-selector} {
        #{$element} {
          @include _get-hover-vars($light);
        }

        $i: 0;
        @each $type, $variation in $scheme-blocks {
          $i: ($i + 1);

          [class*="#{$base-scheme}-#{$type}"],
          [class*="--scheme-#{$type}-"] {
            #{$element} {
              @include _get-hover-vars(_scheme-set-color($set, $type));
            }
          }
        }
      }

      #{$dark-theme-selector} #{$element} {
        @include _get-hover-vars($dark);
      }
    }
  }

  // le $COLOR de la valeur est remplacé par la custom property de la couleur
  #{$prop}: _replace_color($value, var(--#{$set-name}), false);

  // transitions
  @if $transition != false and $theme-allow-transition != false {
    @if $transition == true {
      $transition: $element;
    }

    $transitions:map_get($scheme-elements-transitions, $transition);
    @if $transitions == null {
      $transitions:();
    }

    $transitions:append($transitions, $prop $theme-transition-duration, $separator: comma);
    $scheme-elements-transitions:map_merge($scheme-elements-transitions, ($transition:$transitions)) !global;

    @include _theme-transition() {
      transition: $transitions;
    }
  }
}

/// Ajout d'une couleur de background sur un élément
/// @access public
/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets
/// @param {Bool | String} $transition - si true, une transition de couleur est appliquée sur la propriété
/// @param {Bool | String} $hover - si true, un effet de hover est appliqué sur l'élément en correspondance avec la couleur. la valeur override permet de simplement changer la couleur de hover (si un hover a déja été appliqué sur l'élément)
@mixin scheme-element-bg-color($set-name, $transition:false, $hover:false) {
  @include _scheme-element($set-name, background-color, $transition, $hover);
}

/// Ajout d'une couleur de texte sur un élément
/// @access public
/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets
/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété
@mixin scheme-element-text-color($set-name, $transition:false) {
  @include _scheme-element($set-name, color, $transition);
}

/// Ajout d'une couleur de fill sur un élément
/// @access public
/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets
/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété
@mixin scheme-element-fill-color($set-name, $transition:false) {
  @include _scheme-element($set-name, fill, $transition);
}

/// Ajout d'une couleur de border sur un élément
/// @access public
/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets
/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété
/// @param {String} $side - le côté affecté. valeurs: top, right, bottom, left
/// @param {List} $value - définition des propriétés de border
@mixin scheme-element-border-color($set-name, $transition:false, $side:null, $value:1px solid $COLOR) {
  $prop:border;
  @if $side != null {
    $prop:border-#{$side};
  }
  @include _scheme-element($set-name, $prop, $transition, false, $value);
}

/// Ajout d'une couleur d'outline sur un élément
/// @access public
/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets
/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété
/// @param {List} $value - définition des propriétés d'outline
@mixin scheme-element-outline-color($set-name, $transition:false, $value:1px solid $COLOR) {
  @include _scheme-element($set-name, outline, $transition, false, $value);
}

/// Ajout d'une couleur de box-shadow sur un élément
/// @access public
/// @param {String}  $set-name - nom de la combinaison comme défini dans settings/sets
/// @param {Bool | String}  $transition - si true, une transition de couleur est appliquée sur la propriété
/// @param {List} $value - définition des propriétés de box-shadow
@mixin scheme-element-box-shadow-color($set-name, $transition:false, $value:inset 0 0 0 1px $COLOR) {
  @include _scheme-element($set-name, box-shadow, $transition, false, $value);
}
