////
/// Schemes Tools : Block
/// @group schemes
////

/// Couleur de fond blanche par défaut sur le body
/// @access public
@mixin scheme-body {
  $sets: _get-scheme(light, white);

  // Par défault, on applique le scheme light white sur le body

  background-color: var(--#{nth($sets, 1)});

  $set: map_get($scheme-sets, nth($sets, 1));

  @include _get-hover-vars(_scheme-set-color($set, light), true);

  // Les variables de couleur hover en version dark-mode
  #{$dark-theme-selector} & {
    @include _get-hover-vars(_scheme-set-color($set, dark), true);
  }

  @include _theme-transition() {
    transition: background-color $theme-transition-duration;
  }
}

/// Initialisation des blocs de couleurs
/// @access public
@mixin scheme-blocks {

  // On créé un nouveau bloc de couleur pour chaque type présent dans la configuration
  @each $type, $variation in $scheme-blocks {
    $base: #{$base-scheme-selector}-#{$type};

    @each $color, $sets in $variation {
      $set: map_get($scheme-sets, nth($sets, 1));
      $selector: #{$base}-#{$color};

      @at-root :root #{$selector} {
        background-color: var(--#{nth($sets, 1)});

        --scheme-border: var(--#{nth($sets, 2)});

        // Définition des variables de couleur de l'hover par rapport à la couleur de fond du block pour l'hover d'un élément transparent
        @include _get-hover-vars(_scheme-set-color($set, light), true);

        // Les variables de couleur hover en version dark-mode
        #{$dark-theme-selector} & {
          @include _get-hover-vars(_scheme-set-color($set, dark), true);
        }
      }
    }

    // Ajout de border et de transition associés au type de la combinaison
    @at-root [class*="#{$base-scheme}-#{$type}"] {
      // @include _scheme-block-border(#{$base-scheme-selector}, space(1v));

      @include _theme-transition() {
        transition: background-color $theme-transition-duration, box-shadow $theme-transition-duration;
      }
    }
  }
}
