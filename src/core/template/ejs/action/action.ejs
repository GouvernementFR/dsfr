<%#
# paramètres action

* button.kind (string, optional) : type d'action [button/input/link]
valeurs :
  ** button (default) : bouton
  ** input : input
  ** link : lien

* action.label (string, required) : label de l'élément d'action

* action.href (string, optional) : adresse url du lien si action.kind = link

* action.blank (bool, optional) : si true, target prend la valeur _blank

* action.self (bool, optional) : si true, target prend la valeur _self

* action.disabled (boolean, optional) : si valeur true, action désactivée

* action.classes (array, optional) : classes de l'élément d'action

* action.attributes (object, optional) : attributs de l'élément d'action

#%>

<% eval(include('../../../index.ejs')); %>

<%
const action = locals.action || {};
const actionClasses = action.classes || [];
let actionAttrs = action.attributes || {};
const actionKind = action.kind || 'button';
const actionLabel = action.label;
const actionDisabled = action.disabled === true;
let markup;

switch (actionKind) {
  case 'input':
    markup = 'input';
    actionAttrs.value = actionLabel;
    break;

  case 'button':
    markup = 'button';
    break;

  case 'link':
    markup = 'a';
    actionAttrs.href = action.href || '[url - à modifier]';
    switch (true) {
      case action.blank:
        actionAttrs = {...targetBlankData(), ...actionAttrs};
        break;

      case action.self:
        actionAttrs.target = '_self';
        break;
    }
    break;
}

if (actionDisabled === true) {
  switch (actionKind) {
    case 'input':
    case 'button':
      actionAttrs['disabled'] = '';
      break;

    case 'link':
      actionAttrs['aria-disabled'] = 'true';
      actionAttrs.role = 'link';
      actionAttrs.href = undefined;
      break;
  }
}
%>

<<%= markup %> <%- includeAttrs(actionAttrs); %> <%- includeClasses(actionClasses); %>><% if (actionKind !== 'input') { %><%- actionLabel %></<%= markup %>><% } %>