<style>
  .sample-box span {
    background-color: var(--artwork-major-blue-france);
    color: var(--text-inverted-grey);
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 40px;
    min-height: 40px;
    position: relative;
  }

  .sample-box > span {
    opacity: 0.8;
  }

  .sample-box > span:not(:first-child),
  .sample-box > span > span {
    background-color: var(--artwork-minor-red-marianne);
  }

  table td div {
    display: flex;
    align-items: center;
  }
</style>

<% const sample = getSample(include); %>

<%
const minToken = -8;
const maxToken = 32;
const spacingClasses = {
  m : 'Margin',
  mt : 'Margin top',
  mr : 'Margin right',
  mb : 'Margin bottom',
  ml : 'Margin left',
  mx : 'Margin left & right',
  my : 'Margin top & bottom',
  p : 'Padding',
  pt : 'Padding top',
  pr : 'Padding right',
  pb : 'Padding bottom',
  pl : 'Padding left',
  px : 'Padding left & right',
  py : 'Padding top & bottom',
};
%>

<h2>Espacements</h2>
<h6>Margin/padding</h6>

<p> Des classes utilitaires sont disponibles pour gérer les marges intérieures et extérieures d'un élément html. <br>
Celles-ci suivent la structure suivante (entre crochets les valeurs, facultatives, possibles):
</p>
<ul>
  <li>Pour le margin : fr-m[t/r/b/l/x/y]-[n]0[v]</li>
  <li>pour le padding : fr-p[t/r/b/l/x/y]-0[v]</li>
</ul>
<p>
  - Le prefix : 'fr-',<br>
  - la lettre 'm' pour margin ou 'p' pour padding, <br>
  - l'orientation avec 't', 'r', 'b', 'l' (top, right, bottom, left) ou 'x', 'y' (horizontal, vertical),<br>
  - un séparateur : '-', <br>
  - le token d'espacement (nb: le signe '-' des nombres négatifs est remplacé par la lettre 'n', et 0 n'a pas d'unité 'v')</p>
</p>
<hr>

<div class="<%=prefix%>-table">
  <table>
      <caption>Classes d'espacements :</caption>
      <thead>
          <tr>
            <th>Classe</th>
            <th>Description</th>
            <th>Exemple d'espacement</th>
            <th>Exemple de classe</th>
          </tr>
      </thead>
      <tbody>
        <% for( let spacingClass in spacingClasses) { %>
        <tr>
          <td>fr-<%= spacingClass %>-</td>
          <td><%= spacingClasses[spacingClass] %></td>
          <td>
            <div class="sample-box">
              <% if (spacingClass.charAt(0) === 'm') { %>
                <span><span class="<%= prefix %>-<%= spacingClass %>-2v"></span></span>
              <% } else if (spacingClass.charAt(0) === 'p') { %>
                <span class="<%= prefix %>-<%= spacingClass %>-2v"><span></span></span>
              <% } %>
            </div>
          </td>
          <td><%= prefix %>-<%= spacingClass %>-2v</td>
        </tr>
        <% } %>
      </tbody>
  </table>
</div>


<h6>Breakpoints</h6>
<p>Il est possible de définir le breakpoint à partir du quel on applique l'espacement. <br>
  Il suffit d'ajouter à la classe le breakpoint (md) avant la valeur du token. ex: fr-p<b>-md</b>-4v</p>

<p>Pour adapter les espacements à la taille de l'écran, on peut ainsi combiner les classes en partant du mobile puis en surchargeant en md </p>


<%- sample('exemple avec un bouton plus large en md', '../../../../component/button/template/ejs/button', {
  button:{
    classes: [prefix + '-px-4v', prefix + '-px-md-16v'],
    label: '4v en mobile / 16v en md',
    title: false
  }
}, true); %>


<div class="<%=prefix%>-table">
    <table>
        <caption>Valeurs des tokens d'espacements :</caption>
        <thead>
            <tr>
              <th>Token</th>
              <th>rem</th>
              <th>px</th>
              <th>Exemple d'espacement</th>
              <th>Exemple de classe</th>
            </tr>
        </thead>
        <tbody>
            <% for(var i = minToken; i <= maxToken; i++) { %>
              <%- rowSpacingToken(i) %>

              <% // exception pour 0.5v et 1.5v
              if (i >= -2 && i < 2) { %>
                <%- rowSpacingToken(i, true) %>
              <% } %>
            <% } %>

            <% // valeur spéciale (auto) %>
            <%- rowSpacingToken('auto') %>
        </tbody>
    </table>
</div>

<% function rowSpacingToken(value, isHalfRange = false) {
  let halfString, token = '';
  if (isHalfRange) {
    if (value < 0) {
      value = value + 0.5;
      halfString = 'n' + Math.abs(value);
    } else {
      value = value + 0.5;
      halfString = value;
    }
    token = halfString.toString().replace('.', '-') + 'v';
  } else {
    token = (value < 0) ? 'n' + Math.abs(value) : value;
    token += (typeof(value) == 'number' && value !== 0) ? 'v' : '';
  }
  return `<tr>
    <td>${token}</td>
    <td>${value/4}</td>
    <td>${value*4}</td>
    <td>
      <div class="sample-box">
        <span>1</span>
        <span class="${prefix}-ml-${token}">2</span>
      </div>
    </td>
    <td>${prefix}-ml-${token}</td>
  </tr>`;
} %>
