////
/// Core Function : Color get scheme shade
/// @group core
////

/// Retourne la nuance correspondante
/// @access private
/// @param {String} $part - la partie sur laquelle cette couleur sera utilisée (background, text, border)
/// @param {String} $token - identifiant tokenisé (voir settings/decisions)
/// @param {String} $family - famille de couleur (neutral, primary, system, accent)
/// @return {String} Retourne la combinaison de couleur correspondante
@function _get-scheme-shade($part, $token, $family) {
  @if not map-has-key($scheme-decisions, $part) {
    @error ('no $part ' + $part + ' in $scheme-decisions');
  }
  $tokens: map-get($scheme-decisions, $part);

  @if not map-has-key($tokens, $token) {
    @error ('no $token ' + $token + ' in $scheme-decisions ' + $part);
  }
  $families: map-get($tokens, $token);

  @if not map-has-key($families, $family) {
    @error ('no $family ' + $family + ' in $scheme-decisions ' + $part + ' ' + $token);
  }
  @return nth(map-get($families, $family), 1);
}
