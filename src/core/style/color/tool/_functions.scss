////
/// Core Color Tools : Functions
/// @group core
////

/// Remplacement de la variable $COLOR par la couleur attendu
/// @access private
/// @param {String} $value - chaine de caractère dans laquelle remplacer la variable
/// @param {Color} $hex - couleur de remplacement
/// @param {Boolean} $url-encode - si true, la couleur est url-encodé
/// @return {String} retourne la variable avec la couleur intégrée
@function _replace_color($value, $hex, $url-encode:true) {
  @if $url-encode == true {
    $hex:unquote('%23' + str_slice(inspect($hex), 2));
  }

  @return str-replace($value, $COLOR, $hex);
}

/// Retourne la nuance correspondante
/// @access private
/// @param {String} $part - la partie sur laquelle cette couleur sera utilisée (background, text, border)
/// @param {String} $token - identifiant tokenisé (voir settings/decisions)
/// @param {String} $family - famille de couleur (neutral, primary, status, accent)
/// @return {String} Retourne la combinaison de couleur correspondante
@function _get-scheme-shade($part, $token, $family) {
  @if not map-has-key($scheme-decisions, $part) {
    @error ('no $part ' + $part + ' in $scheme-decisions');
  }
  $tokens: map-get($scheme-decisions, $part);

  @if not map-has-key($tokens, $token) {
    @error ('no $token ' + $token + ' in $scheme-decisions ' + $part);
  }
  $families: map-get($tokens, $token);

  @if not map-has-key($families, $family) {
    @error ('no $family ' + $family + ' in $scheme-decisions ' + $part + ' ' + $token);
  }
  @return map-get($families, $family);
}

/// Obtenir le nom de la teinte si non définie
/// @access private
/// @param {String} $family - famille de couleur (neutral, primary, status, accent)
/// @param {String} $tint - nom de la teinte (voir settings/sets)
/// @return {String} Retourne le nom de la teinte
@function _get-tint($family, $tint: null) {
  @if $tint == null {
    @if $family == neutral {
      @return grey;
    }
    @else if $family == primary {
      @return blue-france;
    }
    @else {
      @error ('$color is not defined');
    }
  }
  @return $tint;
}

/// Obtenir une combinaison de couleur
/// @access private
/// @param {String} $shade - nuance de couleur (black, darkest, darker, dark, strongest, stronger, strong, soft, softer, softest, light, lighter, lightest, white)
/// @param {String} $family - famille de couleur (neutral, primary, status, accent)
/// @param {String} $tint - nom de la teinte (voir settings/sets)
/// @return {String} Retourne la combinaison de couleur correspondante
@function _get-scheme-set($shade, $family, $tint: null) {
  $tint: _get-tint($family, $tint);
  $families: map-get($scheme-sets, $family);
  $shades: map-get($families, $tint);
  @return map-get($shades, $shade);
}

/// Obtenir une couleur depuis une combinaison
/// @access private
/// @param {String} $set - combinaison de couleur obtenue par la fonction get-scheme-set
/// @param {String} $theme - theme de la couleur (light, dark)
/// @param {String} $variation - couleur de base, hover ou active
/// @return {String} Retourne la couleur correspondante
@function _get-color($set, $theme: light, $variation: base) {
  $t: 1;
  @if $theme == dark {
    $t: -1;
  }
  $variations: nth($set, $t);

  $v: index((base, hover, active), $variation);
  @if $variation != base and $theme == dark and length($variations) > 3 {
    $v: $v + 2;
  }

  @return nth($variations, $v);
}

/// Obtenir la valeur de la couleur (surchargée dans schemes)
/// @access private
/// @param {String} $set - combinaison de couleur obtenue par la fonction get-scheme-set
/// @param {String} $shade - nuance de couleur (black, darkest, darker, dark, strongest, stronger, strong, soft, softer, softest, light, lighter, lightest, white)
/// @param {String} $tint - nom de la teinte (voir settings/sets)
/// @param {String} $variation - couleur de base, hover ou active
/// @return {String} Retourne la couleur correspondante
@function _get-value($set, $shade, $tint, $variation: base) {
  @return _get-color($set, light, $variation);
}
