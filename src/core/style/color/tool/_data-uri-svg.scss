////
/// Schemes Tools : Data URI SVG
/// @group core
////

/// Combinaison de couleur appliquée à un svg intégré en data-uri
/// @access public
// @param {list} $tokens - liste des tokens de décision
/// @param {map} $options - map des options :
///   - legacy {boolean}: version pour navigateurs modernes ou anciens.
///   - important {boolean}: si true, applique !important à la règle css
/// @param {Object} $value - le SVG en data-uri
/// @param {String} $prop - propriété sur laquelle est assignée le svg
/// @example @include scheme-element-data-uri-svg(text title grey, false, "<svg><path fill='$COLOR'></path></svg>"));
@mixin scheme-element-data-uri-svg($tokens, $options: (), $value: "<svg><path fill='$COLOR'></path></svg>", $prop: background-image) {
  $legacy: map-get($options, legacy);
  $important: map-get($options, important);
  $tokens: normalise-tokens($tokens);
  $light-colors: get-colors($tokens, hex, (theme: light));
  $light: get-result($light-colors, $value);
  $light: important($light, $important);

  @if $legacy {
    @include legacy(ie11) {
      #{$prop}: #{url(svg-encode($light, true))};
    }
  }
  @else {
    --data-uri-svg: #{url(svg-encode($light, false))};

    $dark-colors: get-colors($tokens, hex, (theme: dark));
    $dark: get-result($dark-colors, $value);
    $dark: important($dark, $important);

    @include theme-selector(dark) {
      --data-uri-svg: #{url(svg-encode($dark, false))};
    }

    #{$prop}: var(--data-uri-svg);
  }
}
