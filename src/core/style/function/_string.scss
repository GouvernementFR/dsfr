////
/// Core Function : string
/// @group core
////

@use "sass:math";

@function _pow10($exponent) {
  @if $exponent == 0 {
    @return 1;
  }
  $result: 1;
  @for $i from 1 through $exponent {
    $result: $result * 10;
  }
  @return $result;
}

/// Remplacement dans une chaine de caractères
/// @access public
/// @param {String} $haystack - chaine de caractère où chercher
/// @param {String} $needle - élément à chercher
/// @param {String} $content - élément de remplacement
/// @return {String} la chaîne de caractères transformée
@function str-replace($haystack, $needle, $content, $start: 1) {
  $chunks: str-split($haystack, $needle);
  $result: str-join($chunks, $content);
  @return $result;
}

/// Découpage d'une chaine de caractères avec un séparateur particulier
/// @access public
/// @param {String} $string - chaine de caractère à découper
/// @param {String} $separator - séparateur
@function str-split($haystack, $needle:',', $separator: comma) {
  @if type-of($haystack) != string {
    $haystack: '#{$haystack}';
  }
  @if type-of($needle) != string {
    $needle: '#{$needle}';
  }

  $list: ();
  $length: str-length($needle);
  $index: -1;

  @while $index != null {
    $index: str-index($haystack, $needle);

    @if $index != null {
      $list: append($list, str-slice($haystack, 1, $index - 1), $separator);
      $haystack: str-slice($haystack, $index + $length);
    }
    @else {
      $list: append($list, $haystack, $separator);
    }
  }

  @return $list;
}

@function str-join($list, $separator:',') {
  $result: '';
  $s: '';

  @each $item in $list {
    $result: '#{$result}#{$s}#{$item}';
    $s: $separator;
  }

  @return $result;
}

@function is-heading($name) {
  @return str-index('#{$name}', 'h') == 1;
}
