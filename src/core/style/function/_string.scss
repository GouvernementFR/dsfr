////
/// Core Function : string
/// @group core
////

@function _pow10($exponent) {
  @if $exponent == 0 {
    @return 1;
  }
  $result: 1;
  @for $i from 1 through $exponent {
    $result: $result * 10;
  }
  @return $result;
}

/// Fonction de transformation d'une string en nombre intégral
/// @access public
/// @param {String} $value - le nombre en chaîne de caractères
@function str-to-num($value) {
  $length: str-length($value);
  $int: ();
  $float: ();
  $floating: false;
  $neg: false;

  @for $i from 1 through $length {
    $n: str-slice($value, $i, $i);

    @if $n == '.' {
      $floating: true;
    }
    @else if $n == '-' {
      $neg: true;
    }
    @else {
      @for $d from 0 through 9 {
        @if quote($d) == $n {
          @if $floating {
            $float: append($float, $d);
          }
          @else {
            $int: append($int, $d);
          }
        }
      }
    }
  }

  $result: 0;

  $length: length($int);
  @if $length > 0 {
    @for $i from 1 through $length {
      $result: $result + (nth($int, $i) * _pow10($length - $i));
    }
  }

  $length: length($float);
  @if $length > 0 {
    @for $i from 1 through $length {
      $result: $result + (nth($float, $i) / _pow10($i));
    }
  }

  @if $neg {
    @return -$result;
  }
  @else {
    @return $result;
  }
}

/// Remplacement dans une chaine de caractères
/// @access public
/// @param {String} $haystack - chaine de caractère où chercher
/// @param {String} $needle - élément à chercher
/// @param {String} $content - élément de remplacement
/// @return {String} la chaîne de caractères transformée
@function str-replace($haystack, $needle, $content, $start: 1) {
  $is:quote($haystack);
  $in:quote($needle);
  $ic:quote($content);

  @if $in == $ic {
    @return $haystack;
  }

  $range: str_slice($is, $start, str_length($is));

  $i: str-index($range, $in);

  @if $i == null {
    @return unquote($is);
  }

  $fi: $i + $start;
  $end: $fi + str-length($in) -1;

  $modified: str_slice($is, 1, $fi - 2) + $ic + str_slice($is, $end, str_length($is));

  @return str-replace($modified, $needle, $content, $fi + str-length($ic) - 2);
}

/// Découpage d'une chaine de caractères avec un séparateur particulier
/// @access public
/// @param {String} $string - chaine de caractère à découper
/// @param {String} $separator - séparateur
@function str-split($string, $separator:',') {
  $tmp: str-slice($string, 1);
  $list: ();
  $index: str-index($string, $separator);

  @if $index == null {
    $list: ($string);
  }
  @else {
    $list: join((str-slice($string, 1, $index - 1)), str-split(str-slice($string, $index + 1), $separator));
  }
  @return $list;
}
