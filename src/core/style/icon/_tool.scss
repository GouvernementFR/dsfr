////
/// Core Tool : Icon
/// @group core
////

/// Return icon size from map
/// @param {String} $size ['md'] - Icon size from `$icon-size-map` (Default to 'md' = 16px)
///
/// @example scss - Set icon size to `SM` (12px)
///   .foo {
///     width: icon-size(sm);
///     height: icon-size(sm);
///   }
@function icon-size($size: md) {
  @return px-rem(map-get($icon-size-map, $size));
}

@function is-remix-icon($icon) {
  @return index($icons-settings-dsfr, $icon) == null;
}

@function get-url-icon($icon, $important: false) {
  $remixIcon: is-remix-icon($icon);
  $icon-path: '#{$dist-path}icons/dsfr/';
  @if $remixIcon {
    $icon-path: '#{$dist-path}icons/remix/';
  }
  $url: url('#{$icon-path}#{$icon}.svg');
  @return important($url, $important);
}

@mixin with-icon($size:md) {
  @include has-icon {
    @include before {
      @include icon-size($size);
      @content;
    }
  }
}

@mixin icon-size($size:md, $pseudo: null) {
  $selector: null;
  @if $pseudo == before or $pseudo == after {
    $selector: '&::#{$pseudo}';
  }
  @include nest($selector) {
    --icon-size: #{icon-size($size)};
  }
}

@mixin icon-content($icon, $pseudo: before, $important: false) {
  @include _pseudo($pseudo, '') {
    $url: get-url-icon($icon, $important);
    -webkit-mask-image: $url;
    mask-image: $url;
  }
}

@mixin icon-style($pseudo: before) {
  @include _pseudo($pseudo) {
    flex: 0 0 auto;
    display: inline-block;
    vertical-align: middle;
    background-color: currentColor;
    @include size(var(--icon-size), var(--icon-size));
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
  }
}

@mixin icon($icon: null, $size: md, $pseudo: before, $init: true) {
  @if $init {
    @include icon-style($pseudo);
  }

  @if $icon != null {
    @include icon-content($icon, $pseudo);
  }

  @if $size != null {
    @include icon-size($size);
  }

  @include _pseudo($pseudo) {
    @content;
  }
}

@mixin icon-legacy($icon: null, $size: md, $pseudo: before, $init: true) {
  @include _pseudo($pseudo) {
    @if $init {
      background-color: transparent;
      background-size: 100%;
      background-repeat: no-repeat;
    }

    @if $icon != null {
      background-image: get-url-icon($icon, false);
    }

    @if $size != null {
      $size: icon-size($size);
      @include size($size, $size);
    }
    @content;
  }
}


@mixin generate-icons($base, $type: dsfr) {
  $icons-settings: $icons-settings-dsfr;
  @if $type == remix {
    $icons-settings: $icons-settings-remix;
  }
  @each $icon, $setting in $icons-settings {
    #{ns(#{$base}-#{$icon})} {
      @include icon-content($icon, before, true);
    }
  }
}

@mixin generate-icons-legacy($base, $type: dsfr) {
  $icons-settings: $icons-settings-dsfr;
  @if $type == remix {
    $icons-settings: $icons-settings-remix;
  }
  @each $icon, $setting in $icons-settings {
    #{ns(#{$base}-#{$icon})} {
      @include icon-legacy($icon, null, before, false);
    }
  }
}