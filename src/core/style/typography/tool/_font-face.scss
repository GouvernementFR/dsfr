////
/// Core Tool : Typography font-face
/// @group core
////

@mixin font-face($name, $filename, $font-weight: 400, $font-style: normal, $font-display: swap) {
  @font-face {
    font-family: #{$name};
    src:
      url('#{$DIST-PATH}fonts/#{$filename}.woff2') format('woff2'),
      url('#{$DIST-PATH}fonts/#{$filename}.woff') format('woff');
    font-weight: #{$font-weight};
    font-style: #{$font-style};
    font-display: #{$font-display};
  }
}

@mixin variable-font-face($name, $filename, $font-weight: 100 1000, $font-display: swap) {
  @font-face {
    font-family: #{$name};
    src: url('#{$DIST-PATH}fonts/#{$filename}.woff2') format("woff2 supports variations"),
    url('#{$DIST-PATH}fonts/#{$filename}.woff2') format('woff2-variations');
    font-weight: #{$font-weight};
    font-display: #{$font-display};
  }
}

@mixin build-font-faces($settings: $font-settings) {
  @each $type, $type-settings in $settings {
    $name: map-get($type-settings, name);
    $display: map-get($type-settings, display);
    @include font-face-styles($name, $display, map-get($type-settings, styles));
  }
}

@mixin font-face-styles($name, $display, $settings) {
  @each $style, $variation in $settings {
    $font-weight: map_get($variation, font-weight);
    $font-style: map_get($variation, font-style);
    $filename: map_get($variation, file);
    $font-name: if(map_get($variation, name), map_get($variation, name), $name);

    @if $font-style == null {
      $font-style: normal;
    }
    @if $display == null {
      $display: swap;
    }

    @if $style == variable {
      @include variable-font-face ($font-name, $filename, $font-weight, $display);
    } @else {
      @include font-face ($font-name, $filename, $font-weight, $font-style, $display);
    }
  }
}

@function font-family($name, $fallback: ()) {
  @return join($name, $fallback, 'comma');
}

@mixin font-family($type: primary, $legacy: false, $important: false, $settings: $font-settings) {
  $type-settings: map-get($settings, $type);
  $styles-settings: map-get($type-settings, styles);
  $name: map-get($type-settings, name);
  $fallback: map-get($type-settings, fallback);
  $families: font-family($name, $fallback);

  @if $legacy {
    font-family: important($families, $important);
  } @else {
    @if map-get($styles-settings, variable) {
      @supports not (font-variation-settings: normal) {
        font-family: important($families, $important);
      }

      @supports (font-variation-settings: normal) {
        $families: font-family('#{$name} VF', $fallback);
        font-family: important($families, $important);
      }
    } @else {
      font-family: important($families, $important);
    }
  }
}

@mixin text-adjustments {
  text-rendering: optimizeLegibility;
  @include font-smoothing;
  -webkit-text-size-adjust: 100%;
}

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
