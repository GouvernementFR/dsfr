////
/// Core Tools : Spacing space
/// @group core
////

/// Return space value from type map and convert to rem.
///
/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem
///
/// @example scss - Set margin-bottom to 24px
///   .foo {
///     margin-bottom: space(6v);
///   }
@function space($value) {
  @if $value == 0 {
    @return $value;
  }

  @if length($value) > 1 {
    $result: ();
    @each $v in $value {
      $result: append($result, space($v));
    }
    @return $result;
  }

  $v: quote($value);

  @if is-basic-unit($value) {
    @return $value;
  }

  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));
  $unit: str_slice($v, str-length($v), str_length($v));

  @if is-unit($value, v) {
    @return $q * 0.25rem;
  }
  @else if is-unit($value, w) {
    @return $q * 0.5rem;
  }
  @return unquote($value);
}

/// Set space property
///
/// @param {String} $property ["margin"] - propriété à appliquer à l'espacement `["margin", "padding"]`
/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée
/// @param {String} $direction - direction de l'espacement `["x", "y", "top", "right", "bottom", "left"]`
///
/// @example scss - Set margin-bottom to 24px
///   .foo {
///     @include _spacing("margin", 6v, "bottom");
///   }
@mixin _spacing($property: margin, $value: 0, $direction: null) {

  @if $direction != null {
    $v: space($value);

    @if $direction == 'x' {
      #{$property}-left: $v;
      #{$property}-right: $v;
    }
    @else if $direction == 'y' {
      #{$property}-top: $v;
      #{$property}-bottom: $v;
    }
    @else {
      #{$property}-#{$direction}: $v;
    }
  }
  @else {
    $spaces: ();

    @each $v in $value {
      $spaces: append($spaces, space($v));
    }

    #{$property}: $spaces;
  }
}

@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {
  @include respond-from($from) {
    @include _spacing($property, $value, $direction);
  }
}

@mixin padding($values: 0 0 0 0, $from: null) {
  @include _spacing-from(padding, $values, null, $from);
}

@mixin padding-x($value: 0, $from: null) {
  @include _spacing-from(padding, $value, 'x', $from);
}

@mixin padding-y($value: 0, $from: null) {
  @include _spacing-from(padding, $value, 'y', $from);
}

@mixin padding-top($value: 0, $from: null) {
  @include _spacing-from(padding, $value, 'top', $from);
}

@mixin padding-right($value: 0, $from: null) {
  @include _spacing-from(padding, $value, 'right', $from);
}

@mixin padding-bottom($value: 0, $from: null) {
  @include _spacing-from(padding, $value, 'bottom', $from);
}

@mixin padding-left($value: 0, $from: null) {
  @include _spacing-from(padding, $value, 'left', $from);
}

@mixin margin($values: 0 0 0 0, $from: null) {
  @include _spacing-from(margin, $values, null, $from);
}

@mixin margin-x($value: 0, $from: null) {
  @include _spacing-from(margin, $value, 'x', $from);
}

@mixin margin-y($value: 0, $from: null) {
  @include _spacing-from(margin, $value, 'y', $from);
}

@mixin margin-top($value: 0, $from: null) {
  @include _spacing-from(margin, $value, 'top', $from);
}

@mixin margin-right($value: 0, $from: null) {
  @include _spacing-from(margin, $value, 'right', $from);
}

@mixin margin-bottom($value: 0, $from: null) {
  @include _spacing-from(margin, $value, 'bottom', $from);
}

@mixin margin-left($value: 0, $from: null) {
  @include _spacing-from(margin, $value, 'left', $from);
}
