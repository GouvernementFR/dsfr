<%#
# paramètres du contenu principal de la carte

* content.title (string, required) : Titre de la carte

* content.href (string, optional) : href du lien de la carte

* content.noLink (boolean, optional) : présence du lien

* content.description (string, optional) : Description

* content.badgesGroup (array, optional) : Groupe de badges (voir badge)

* content.tagsGroup (array, optional) : Groupe de tags (voir tag)

* content.details (array, optional) : Détails

* content.blank (boolean, optional) : Ajoute l'attribut target="_blank" pour ouvrir le lien dans une nouvelle fenêtre, nécessite l'ajout d'un attribut title "intitulé - nouvelle fenêtre"

* content.markup (string, optional) : (défaut : h3) niveau de titre

* content.assess (String, optional): remplissage automatique du poid et type de fichier à telecharger

* content.downloadable (boolean || string, optional) : Ajoute l'attribut download au lien, si string, ajoute la valeur comme nom de fichier

* content.lang (boolean, optional) : Ajoute l'attribut hreflang au lien, pour définir la langue du document lié

* content.disabled (boolean, optional) : Si true, retire le href du lien pour le désactiver

* content.attributes (object, optional) : Attributs à ajouter au lien
%>
<%
let start, end;

const startDetails = content.details ? content.details.filter(detail => !detail.position || detail.position === 'start') : [];

const markup = content.markup || 'h3';
const hasLink = !content.noLink;
const href = content.href || '#';
const attributes = content.attributes || {};
if (content.assess === true) {
    attributes[`data-${prefix}-assess-file`] = '';
} else if (typeof(content.assess) === 'string') {
    attributes[`data-${prefix}-assess-file`] = content.assess;
}
if (content.disabled !== true) {
    attributes.href = href;
} else {
  attributes.role = 'link';
  attributes['aria-disabled'] = true;
}
if (content.lang) attributes.hreflang = content.lang;
if (content.downloadable === true) attributes.download = '';
if (typeof(content.downloadable) === 'string') attributes.download = content.downloadable;
if (content.blank === true) attributes.target = '_blank';

switch (true) {
    case content.badgesGroup !== undefined :
    case content.tagsGroup !== undefined :
    case startDetails.length > 0 :
      start = {};
      if (content.badgesGroup) start.badgesGroup = content.badgesGroup;
      if (content.tagsGroup) start.tagsGroup = content.tagsGroup;
      if (startDetails.length) start.details = startDetails;
      break;
}

const endDetails = content.details ? content.details.filter(detail => detail.position === 'end') : [];

switch (true) {
    case endDetails.length > 0 :
        end = {};
        if (endDetails.length) end.details = endDetails;
        break;
}
 %>

<div class="<%= prefix %>-card__content">
    <<%= markup %> class="<%= prefix %>-card__title">
        <% if (hasLink) { %><a <%- includeAttrs(attributes) %>><% } %>
          <%- content.title %>
        <% if (hasLink) { %></a><% } %>
    </<%= markup %>>

    <% if (content.description !== undefined) { %>
    <p class="<%= prefix %>-card__desc"><%- content.description %></p>
    <% } %>

    <% if (start) { %>
    <%- include('start', {start: start }); %>
    <% } %>

    <% if (end) { %>
    <%- include('end', {end: end }); %>
    <% } %>
</div>
