////
/// Segmented Scheme
/// @group segmented
////

@use 'module/selector';
@use 'module/spacing';
@use 'module/disabled';
@use 'module/color';

@mixin _segmented-scheme($legacy: false) {
  #{selector.ns(segmented)} {
    &__elements {
      @include color.background(default grey, (legacy:$legacy));
      @include color.box-shadow(default grey, (legacy:$legacy));
    }

    &__element {
      label {
        @include color.text(action-high grey, (legacy:$legacy));
      }

      input {
        &:not([disabled]) {
          &:not(:checked) {
            + label {
              @if not $legacy {
                @include color.element(background-image, background, (default grey), (active: true, hover:true), 'linear-gradient(0deg, $COLOR 0, $COLOR 100%), linear-gradient(0deg, $COLOR 0, $COLOR 100%), var(--rounded-corner), var(--rounded-corner), var(--rounded-corner), var(--rounded-corner)');

                &:hover {
                  @include color.data-uri-svg((background default grey), (hover:true), $rounded-corner-svg, false, 'rounded-corner');
                }

                &:active {
                  @include color.data-uri-svg((background default grey), (active:true), $rounded-corner-svg, false, 'rounded-corner');
                }
              }
            }
          }

          &:checked {
            + label {
              @include color.box-shadow(active blue-france, (legacy:$legacy));
              @include color.text(active blue-france, (legacy:$legacy));
            }
          }
        }

        &:checked {
          @include disabled.selector {
            + label {
              @include color.box-shadow(text disabled grey, (legacy:$legacy));
            }
          }
        }
      }
    }
  }
}
