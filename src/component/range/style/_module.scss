////
/// Range Module
/// @group range
////

@use 'module/reset';
@use 'module/spacing';
@use 'module/selector';
@use 'module/disabled';

#{selector.ns-group(range)} {
  --thumb-size: #{spacing.space(6v)};
  --track-height: #{spacing.space(1v)};
  --track-offset-y: calc(var(--thumb-size) / 2 - var(--track-height) / 2);
  --step-gap: #{spacing.space(1v)};
  --min: 0;
  --max: 1;
  --value: 1;
  --value-a: var(--value, 0); // default value ("--value" is used in single-range markup)
  --value-b: var(--value, 0); // default value
  --text-value-a: var(--text-value, "");
  --completed-a: calc((var(--value-a) - var(--min)) / (var(--max) - var(--min)));
  --percent-completed-a: calc(var(--thumb-size) / 2 + (100% - var(--thumb-size)) * var(--completed-a));
  --completed-b: calc((var(--value-b) - var(--min)) / (var(--max) - var(--min)));
  --percent-completed-b: calc(var(--thumb-size) / 2 + (100% - var(--thumb-size)) * var(--completed-b) + var(--thumb-size));

  @include relative;

  &--sm {
    --thumb-size: #{spacing.space(4v)};
    --track-height: #{spacing.space(0.5v)};
    --step-gap: #{spacing.space(0.5v)};
  }

  #{selector.ns(label)} {
    @include relative;

    &::before,
    &::after {
      @include text-style(xs);
      @include absolute(calc(100% + var(--thumb-size) + #{spacing.space(5v)}));
      pointer-events: none;
    }

    &::before {
      content: var(--prefix, "") var(--text-min, "") var(--suffix, "");
      left: 0;
    }

    &::after {
      content: var(--prefix, "") var(--text-max, "") var(--suffix, "");
      right: 0;
    }
  }

  #{selector.ns(message)} {
    &:first-child {
      @include margin-top(2v);
    }
  }

  input[type=range] {
    @include reset.appearance(none);
    @include size(100%, var(--thumb-size));
    @include margin(5v 0);
    outline: none;
    background: none;

    &:not(:only-of-type) {
      pointer-events: none;
    }

    @include selector.range-thumb {
      @include reset.appearance(none);
      @include size(var(--thumb-size), var(--thumb-size));
      border-radius: 50%;
      border: none;
      pointer-events: auto;

      &:active {
        @include z-index(above);
      }
    }

    @include selector.range-track {
      background-repeat: no-repeat;
      background-position: 0 var(--track-offset-y);
      background-size: 100% var(--track-height);
    }

    @include selector.range-moz-track {
      @include height(var(--track-height));
    }

    @include selector.range-moz-progress {
      @include height(var(--track-height));
    }
  }

  output {
    --pos: var(--percent-completed-a);
    @include absolute;
    @include min-width(var(--thumb-size));
    @include z-index(above);
    @include text-style(xs);
    text-align: center;
    pointer-events: none;
    left: var(--pos);
    transform: translateX(-50%);
  }

  &#{selector.ns-group(range)}--double {
    output {
      --pos: calc((var(--thumb-size) / 2 + (100% - var(--thumb-size) * 2 ) * var(--completed-a) + var(--thumb-size) / 2  + (100% - var(--thumb-size) * 2 ) * var(--completed-b) + var(--thumb-size)) / 2);
      @include min-width(12v);
    }

    input[type=range] {
      @include width(calc(100% - var(--thumb-size)));

      &:first-of-type {
        @supports (-moz-appearance:none) {
          position: relative;
          z-index: 2;

          @include selector.range-moz-track {
            background-color: transparent;
          }
        }
      }
    }

    input[type=range]:nth-of-type(2) {
      @include absolute;
      left: var(--thumb-size);

      @include selector.range-moz-progress {
        z-index: 0;
      }
    }
  }

  &#{selector.ns-group(range)}--step {
    --steps: ((var(--max) - var(--min)) / var(--step));
    --completed-step-width: calc(100% / (var(--completed-a) * var(--steps)));
    --step-width: calc(100% / var(--steps));

    input[type=range] {
      @include selector.range-track {
        background-position: 0 var(--track-offset-y), calc(var(--thumb-size) / 2) var(--track-offset-y), calc(100% - var(--thumb-size) / 2) var(--track-offset-y), 100% var(--track-offset-y);
        background-size: calc(var(--thumb-size) / 2 - var(--step-gap) / 2) var(--track-height), calc(var(--percent-completed-a) - calc(var(--thumb-size) / 2)) var(--track-height), calc(100% - var(--thumb-size)) var(--track-height), calc(var(--thumb-size) / 2 - var(--step-gap) / 2) var(--track-height);
      }

      @include selector.range-moz-track {
        background-color: transparent;
        background-image: var(--data-uri-svg);
        background-size: calc(var(--step-width) - var(--thumb-size) / var(--steps)) 100%;
        background-position: calc(var(--thumb-size) / 2) 0;
        background-repeat: repeat-x;
      }

      @include selector.range-moz-progress {
        background-color: transparent;
        background-image: var(--data-uri-svg);
        background-size: calc(var(--completed-step-width) - var(--thumb-size) / var(--steps)) 100%;
        background-position: calc(var(--thumb-size) / 2) 0;
        background-repeat: repeat-x;
      }

      @include disabled.selector {
        @include selector.range-moz-progress {
          background-color: transparent;
        }
      }
    }
  }

  &--no-indicators {
    #{selector.ns(label)} {
      &::before,
      &::after {
        content: none;
      }
    }

    input[type=range] {
      @include margin-bottom(var(--track-offset-y));
    }
  }

  &--valid,
  &--error {
    @include before('', block) {
      pointer-events: none;
      @include absolute(0, -3v, 0, -3v);
      background-repeat: no-repeat;
      background-position: 0 0;
      background-size: spacing.space(0.5v 100%);
    }
  }
}
