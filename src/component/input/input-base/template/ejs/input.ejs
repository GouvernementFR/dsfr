<%#
# paramètres input

* input.id (string, required) : id du label et de l'input, sert également à construire les ids des messages valid, error et hint

* input.label (string, required) : intitulé du label

* input.type (string, required) : type de l'input. si textarea, l'input est remplacé par un textarea

* input.name (string, optional) : attribut name de l'input

* input.value (string, optional) : attribut value de l'input

* input.autocomplete (string, optional) : attribut autocomplete  de l'input

* input.placeholder (string, optional) : text du placeholder de l'input

* input.icon (string, optional) : nom de l'icone qui sera placée sur la partie droite de l'input

* input.valid (string, optional) : message de validation

* input.error (string, optional) : message d'erreur

* input.hint (string, optional) : message d'aide

* input.required (boolean, optional)

* input.disabled (boolean, optional)

* input.addon (boolean, optional) : Si true, input complexe composé d'un addon (ex: pour associer un bouton)

* input.button (object, optional) : attributs du bouton collé à l'input (si addon true)

* input.attributes (object, optional) : attributs spécifiques à rajouter sur l'input

* input.classes (array, optional) : classes spécifiques à rajouter sur l'input

* input.labelClasses (Array, optional) : classes spécifiques à rajouter sur le label

* input.labelAttrs (Object, optional) :  attributs spécifiques à rajouter sur le label

%>
<% eval(include('../../../../../core/index.ejs')); %>
<% eval(include('../../../../form/template/ejs/message/builder.js')); %>

<%
const input = locals.input || {};
const classes = input.classes || [];
const attributes = input.attributes || {};
const labelClasses = input.labelClasses || [];
const labelAttrs = input.labelAttrs || {};
const inputType = input.type || 'text';

const messages = [];

classes.push(`${prefix}-input`);

const builder = new MessageBuilder(input.id);

if (input.valid) builder.addValid(input.valid);
if (input.error) builder.addError(input.error);

const describedby = builder.describedby;

if (input.hint === true) {
  describedby.push(input.id + '-hint-text');
  input.hint = undefined;
}

if (describedby.length > 0) attributes['aria-describedby'] = describedby.join(' ');

if (input.required === true) attributes['aria-required'] = true;
if (input.disabled === true) attributes['disabled'] = '';
if (input.placeholder) attributes['placeholder'] = input.placeholder;
if (input.name) attributes.name = input.name;
if (input.value) attributes.value = input.value;
if (input.autocomplete) attributes.autocomplete = input.autocomplete;
attributes.id = input.id;
%>

<%- include('../../../../form/template/ejs/label', {label: {id: input.id, label: input.label, hint: input.hint, error: input.error, valid: input.valid, classes: labelClasses, attributes: labelAttrs}}); %>

<% if (input.icon) { %>
  <% let icon = prefix + '-icon-' + input.icon; %>
  <% if (input.icon === true) icon = '';
  %>
 <div class="<%= prefix %>-input-wrap <%= icon %>" >
<% } %>

<% if (input.addon && input.button) { %>
  <div class="<%= prefix %>-input-wrap <%- prefix %>-input-wrap--addon" >
<% } %>

<% if (input.type === 'textarea') { %>
<textarea <%- includeClasses(classes); %> <%- includeAttrs(attributes); %>></textarea>
<% }
else {%>
<input <%- includeClasses(classes); %> <%- includeAttrs(attributes); %> type="<%= inputType %>">
<% } %>

<% if (input.addon && input.button) { %>
  <%- include('../../../../button/template/ejs/button', { button:input.button }); %>
  </div>
<% } %>

<% if (input.icon) { %>
</div>
<% } %>

<%- include('../../../../form/template/ejs/message/messages-group', { messagesGroup: builder.messagesGroup }); %>
