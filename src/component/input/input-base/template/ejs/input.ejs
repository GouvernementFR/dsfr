<%#
# paramètres input

* input.id (string, required) : id du label et de l'input, sert également à construire les ids des messages valid, error et hint

* input.label (string, required) : intitulé du label

* input.type (string, required) : type de l'input. si textarea, l'input est remplacé par un textarea

* input.name (string, optional) : attribut name de l'input

* input.value (string, optional) : attribut value de l'input

* input.autocomplete (string, optional) : attribut autocomplete  de l'input

* input.describedby (array, optional) : Tableau d'id d'éléments à lier avec un aria-describedby

* input.placeholder (string, optional) : text du placeholder de l'input

* input.icon (string, optional) : nom de l'icone qui sera placée sur la partie droite de l'input

* input.valid (string, optional) : message de validation

* input.error (string, optional) : message d'erreur

* input.massages (array, optional) : array de messages

* input.hint (string, optional) : message d'aide

* input.required (boolean, optional)

* input.disabled (boolean, optional)

* input.includeEmptyMessagesGroup (boolean, optional) : true par défaut

* input.addon (boolean, optional) : Si true, input complexe composé d'un addon (ex: pour associer un bouton)

* input.button (object, optional) : attributs du bouton collé à l'input (si addon true)

* input spellcheck (boolean, optional) : ajout de l'attribut spellcheck si définit avec la valeur définie

* input.attributes (object, optional) : attributs spécifiques à rajouter sur l'input

* input.classes (array, optional) : classes spécifiques à rajouter sur l'input

* input.labelClasses (Array, optional) : classes spécifiques à rajouter sur le label

* input.labelAttrs (Object, optional) :  attributs spécifiques à rajouter sur le label

%>
<% eval(include('../../../../../core/index.ejs')); %>
<% eval(include('../../../../form/template/ejs/message/builder.js.ejs')); %>

<%
const input = locals.input || {};
const classes = input.classes || [];
const attributes = input.attributes || {};
const inputType = input.type || 'text';
const describedby = input.describedby || [];
const label = {
  label: input.label,
  for: input.id,
  classes: input.labeClasses,
  attributes: input.labelAttributes,
}

classes.push(`${prefix}-input`);

const builder = new MessageBuilder(input.id, input.includeEmptyMessagesGroup);

if (input.valid) {
  builder.addValid(input.valid);
}
if (input.error) {
  builder.addError(input.error);
}

if (input.messages) {
  input.messages.forEach(message => builder.add(message.type, message.text, message.attributes));
}

if (builder.isIncluded) describedby.push(...builder.ids);

if (input.hint) {
  label.hint = input.hint;
}

if (describedby.length > 0) attributes['aria-describedby'] = describedby.join(' ');

if (input.required === true) attributes['aria-required'] = true;
if (input.disabled === true) attributes['disabled'] = '';

if (input.placeholder) attributes['placeholder'] = input.placeholder;
if (input.name) attributes.name = input.name;
if (input.value) attributes.value = input.value;
if (input.autocomplete) attributes.autocomplete = input.autocomplete;
attributes.id = input.id;
if (input.spellcheck === true || input.spellcheck === false) attributes.spellcheck = `${input.spellcheck}`;

const inputWrapClass = [];
if (input.button || input.icon) inputWrapClass.push(`${prefix}-input-wrap`);
if (input.icon && typeof(input.icon) === 'string') inputWrapClass.push(`${prefix}-icon-${input.icon}`);
if (input.addon) inputWrapClass.push(`${prefix}-input-wrap--addon`);
if (input.action) inputWrapClass.push(`${prefix}-input-wrap--action`);
%>

<%- include('../../../../form/template/ejs/label', { label: label }); %>

<% if (input.icon || input.button) { %>
<div <%- includeClasses(inputWrapClass); %>>
<% } %>

  <% if (input.type === 'textarea') { %>
  <textarea <%- includeClasses(classes); %> <%- includeAttrs(attributes); %>></textarea>
  <% }
  else {%>
  <input <%- includeClasses(classes); %> <%- includeAttrs(attributes); %> type="<%= inputType %>">
  <% } %>

  <% if (input.button) { %>
  <%- include('../../../../button/template/ejs/button', { button:input.button }); %>
  <% } %>

<% if (input.icon || input.button) { %>
</div>
<% } %>

<%- include('../../../../form/template/ejs/message/messages-group', { messagesGroup: builder.messagesGroup }); %>

