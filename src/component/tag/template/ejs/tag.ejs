<%#
# paramètres tag

* tag.label (string, required) : contenu texte

* tag.href (string, required) : adresse url du lien

* tag.blank (bool, optional) : si true, target prend la valeur _blank, sinon _self

* tag.disabled (boolean, optional) : si true, composant désactivé

* tag.clickable (bool, optional) : si true, rend cliquable le composant

* tag.button (boolean, optional) : si true, le composant est un bouton

* tag.size (string, optional) : taille du composant
  valeurs {default: md} :
  * sm : tag taille small

* tag.accent (string, optional) : accentuation du composant

* tag.icon (string, optional) : icon du lien

* tag.accent (string, optional) : couleur d'accentuation

* tag.iconPlace (string, optionnal) : emplacement de l'icone
  si non défini alors que le paramètre icon est défini, bouton avec icone seule, sans label
  valeurs :
  * left : icone à gauche du label
  * right : icone à droite du label

* tag.classes (array, optional) : Classes suplémentaires sur le bouton

* tag.attributes (object, optional) : Attributs suplémentaires sur le tag
%>
<% eval(include('../../../../core/index.ejs')); %>

<%
let tag = locals.tag || {};
let tagClasses = tag.classes || [];
let tagAttrs = tag.attributes || {};

tagClasses.push(prefix + '-tag');

if (tag.accent !== undefined) tagClasses.push(prefix + '-tag--' + tag.accent);

switch(tag.size) {
  case 'sm':
      tagClasses.push(prefix + '-tag--sm');
  break;
}

switch(tag.type) {
  case 'clickable':
      if (tag.markup === undefined) tag.markup = 'a';
      if (tag.disabled !== true) {
          tagAttrs.href = tag.href || contentPlaceholder('url');
          switch (true) {
              case tag.blank:
                  tagAttrs.target = '_blank';
              break;
              case tag.self:
                  tagAttrs.target = '_self';
              break;
          }
      }
  break;
  case 'pressable':
      if (tag.markup === undefined) tag.markup = 'button';
      tagAttrs["aria-pressed"] = 'false';
  break;
  case 'dismissable':
      if (tag.markup === undefined) tag.markup = 'button';
      tagClasses.push(prefix + '-tag--dismiss');
      tagAttrs["aria-label"] = 'Retirer ' + contentPlaceholder('le filtre ' + tag.label);
  break;
  default:
      if (tag.markup === undefined) tag.markup = 'p';
  break;
}

if (tag.icon !== undefined) tagClasses.push(prefix + '-icon-' + tag.icon);

if (tag.iconPlace !== undefined) switch(tag.iconPlace) {
  case 'left':
      tagClasses.push(prefix + '-tag--icon-left');
      break;

  case 'right':
      tagClasses.push(prefix + '-tag--icon-right');
      break;
}

if (tag.disabled === true) {
  switch(tag.markup) {
  case 'input':
  case 'button':
    tagAttrs.disabled = '';
    break;

  case 'a':
    tagAttrs['aria-disabled'] = 'true';
    tagAttrs.role = 'link';
    break;
  }
}

tagAttrs = {...tagAttrs, ...tag.attributes}; // place les attributs venant du sample à la fin
%>

<<%= tag.markup %> <%- includeClasses(tagClasses)%> <%- includeAttrs(tagAttrs); %>><%- tag.label %></<%= tag.markup %>>
