////
/// Tag Tool
/// @group tag
////

@mixin build-tag() {
  @include _build-link($tags-settings);
}

@mixin nest-tag($size:md, $place: null, $icon:null, $from: null, $insert: true) {
  @include _nest-link($tags-settings, $size, $place, $icon, $from, $insert) {
    @content;
  }
}

@mixin pressed-selector($value:null) {
  $attr: 'aria-pressed';
  @if $value == true or $value == false {
    $attr: 'aria-pressed="#{$value}"';
  }

  &[#{$attr}] {
    @content;
  }
}

@mixin tag-punched-backgrounds ($token, $size: md, $legacy: false, $hover:true, $active: true) {
  @include tag-punched-background($token, $size, $legacy);

  @if $hover {
    &:hover {
      @include tag-punched-background($token, $size, $legacy, (hover: true));
    }
  }

  @if $active {
    &:active {
      @include tag-punched-background($token, $size, $legacy, (active: true));
    }
  }
}

@mixin tag-punched-background ($token, $size: md, $legacy: false, $options: ()) {
  $legacy-target: ie11;
  $type: hex;
  @if not $legacy {
    $legacy-target: null;
    $type: decision;
    $options: map-merge($options, (var: true));
  }

  $result: get-color($token, $type, $options);

  @include legacy($legacy-target) {
    @if $size == sm {
      background-image: radial-gradient(circle at 100% #{space(0.75v)}, transparent #{space(1.79v)}, #{$result} #{space(2v)});
    }
    @else {
      background-image: radial-gradient(circle at 100% #{space(1v)}, transparent #{space(2.3125v)}, #{$result} #{space(2.5v)});
    }
  }
}
