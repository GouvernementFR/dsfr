<%#
# paramètres groupe de boutons

* buttonsGroup.buttons (array, required): paramètres spécifique de chaque bouton du groupe

* buttonsGroup.inline (string|boolean, optional) : aligne les boutons horizontalement (dans la mesure du possible)
valeurs :
  * true : toujours en ligne
  * sm : en ligne a partir du breakpoint SM
  * md : en ligne a partir du breakpoint MD
  * lg : en ligne a partir du breakpoint LG

* buttonsGroup.align (string, optional) : définie l'alignement horizontal des boutons dans le groupe
  * right : align les boutons sur la droite
  * left : align les boutons sur la gauche
  * center : align les boutons au centre

* buttonsGroup.size (string, optional) : définie la taille des boutons dans le groupe (default md)
  * sm : Boutons taille sm
  * lg : Boutons taille lg

* buttonsGroup.equisized (boolean, optional) : si valeur true, fixe la largeur des boutons a celle du plus grand

* buttonsGroup.reverse (boolean, optional) : si valeur true, inverse l'ordre des boutons en mode inline

* buttonsGroup.classes (array, optional) : Classes suplémentaires sur le groupe de boutons

* buttonsGroup.attributes (object, optional) : Attributs suplémentaires sur le groupe de boutons

* buttonsGroup.iconPlace (string, optional) : emplacement des icones sur le groupe de bouton
valeurs :
    ** left : icone à gauche du label
    ** right : icone à droite du label

* buttonsGroup.iconPlace (string, optional) : emplacement des icones sur le groupe de bouton
valeurs :
    ** left : icone à gauche du label
    ** right : icone à droite du label

#%>

<% eval(include('../../../../core/index.ejs')); %>

<%
 const buttonsGroup = locals.buttonsGroup || {};
 let groupClasses = buttonsGroup.classes || [];
 let groupAttrs = buttonsGroup.attributes || {};
 let buttons = buttonsGroup.buttons || [];
 groupClasses.push(prefix + '-btns-group');

 if (buttonsGroup.align) groupClasses.push(prefix + '-btns-group--'+buttonsGroup.align);
 if (buttonsGroup.equisized) groupClasses.push(prefix + '-btns-group--equisized');
 if (buttonsGroup.reverse) groupClasses.push(prefix + '-btns-group--inline-reverse');


 switch(buttonsGroup.inline) {
     case true:
        groupClasses.push(prefix + '-btns-group--inline');
        break;
     case 'sm':
        groupClasses.push(prefix + '-btns-group--inline-sm');
        break;

     case 'md':
        groupClasses.push(prefix + '-btns-group--inline-md');
        break;

     case 'lg':
        groupClasses.push(prefix + '-btns-group--inline-lg');
        break;
 }

 switch(buttonsGroup.size) {
  case 'sm':
    groupClasses.push(prefix + '-btns-group--sm');
    break;

  case 'lg':
    groupClasses.push(prefix + '-btns-group--lg');
    break;
 }

 if (buttonsGroup.iconPlace !== undefined) switch(buttonsGroup.iconPlace) {
  case 'left':
    groupClasses.push(prefix + '-btns-group--icon-left');
    break;

  case 'right':
    groupClasses.push(prefix + '-btns-group--icon-right');
    break;
 }
 %>

<ul <%- includeClasses(groupClasses) %> <%- includeAttrs(groupAttrs) %>>
  <% for (let i = 0; i < buttons.length; i++) { %>
  <li>
      <%
          const button = buttons[i];
          let path;
          switch(button.template) {
              case 'display':
                path = './button-display.ejs';
                break;

              case 'close':
                path = './button-close.ejs';
                break;

              default:
                path = './button.ejs';
          }
        %>
    <%- include(path, {button:button}); %>
  </li>
  <% } %>
</ul>
