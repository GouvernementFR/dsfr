<%#
# paramètres button

* button.label (string, required) : label du bouton

* button.markup (string) : si non défini, button

* button.id (string) : id du bouton

* button.kind (number, optional) : par défaut 1, qui équivaut au bouton primaire, sinon 2 pour secondary et 3 pour tertiary

* button.type (string, optional) type du bouton

* button.title (string, optional) Attribut 'title' du bouton

* button.disabled (boolean, optional) : si valeur true, bouton désactivé

* button.size (string, optional) : modificateur de taille
valeurs :
    ** sm : bouton petit
    ** lg : bouton large

* button.icon (string, optional) : nom de l'icone dans le bouton

* button.iconPlace (string, optional) : emplacement de l'icone
si non défini alors que le paramètre icon est défini, bouton avec icone seule, sans label
valeurs :
    ** left : icone à gauche du label
    ** right : icone à droite du label

* button.classes (array, optional) : Classes suplémentaires sur le bouton

* button.attributes (object, optional) : Attributs suplémentaires sur le bouton

%>

<% eval(include('../../../../core/index.ejs')); %>

<%
const button = locals.button || {};
let btnClasses = button.classes || [];
let btnAttrs = button.attributes || {};
if (button.id) btnAttrs.id = button.id;

const markup = button.markup || 'button';

btnClasses.push(prefix + '-btn');

switch(button.size) {
  case 'sm':
    btnClasses.push(prefix + '-btn--sm');
    break;

  case 'lg':
    btnClasses.push(prefix + '-btn--lg');
    break;
}

if (button.icon !== undefined) btnClasses.push(prefix + '-icon-' + button.icon);

if (button.iconPlace !== undefined) switch(button.iconPlace) {
  case 'left':
    btnClasses.push(prefix + '-btn--icon-left');
    break;

  case 'right':
    btnClasses.push(prefix + '-btn--icon-right');
    break;
}

switch (button.kind) {
  case 2:
    btnClasses.push(prefix +'-btn--secondary');
    break;

  case 3:
    btnClasses.push(prefix +'-btn--tertiary');
    break;

  case 4:
    btnClasses.push(prefix +'-btn--tertiary-no-outline');
    break;
}

if (button.disabled === true) {
  switch(markup) {
    case 'input':
    case 'button':
      btnAttrs['disabled'] = '';
      break;

    case 'a':
      btnAttrs['aria-disabled'] = 'true';
      btnAttrs.role = 'link';
      break;
  }
} else {
  if (button.onclick) btnAttrs.onclick = button.onclick;

  switch (markup) {
    case 'a':
      btnAttrs.href = button.href || '[url - à modifier]';
      switch (true) {
        case button.blank:
          btnAttrs.target = '_blank';
          break;

        case button.self:
          btnAttrs.target = '_self';
          break;
      }

      if (button.rel) btnAttrs.rel = button.rel;
    break;
  }
}

if (button.title) btnAttrs['title'] = button.title;
if (button.type !== undefined) btnAttrs['type'] = button.type;
%>

<% if (button.comments) { %><!-- <%= button.comments %> --><% } %>
<<%= markup %> <%- includeClasses(btnClasses) %> <%- includeAttrs(btnAttrs); %> >
  <%= button.label %>
</<%= markup %>>
