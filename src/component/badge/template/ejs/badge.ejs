<%#
# paramètres badge

* badge (object, required) : Objet contenant les paramètres

** label (string, required) : classes supplémentaires sur l'element

** type (string, optional) : le type défini la couleur du badge (error/success/warning/new)

** accent (string, optional) : défini la couleur d'accentuation (type ne doit pas être défini)

** markup (string, optional) : balise html du markup (default: p)

** classes (array, optional) : classes supplémentaires sur l'element

** attrs (object, optional) : Attributs supplémentaires sur l'element

** icon (string, optional) : nom de l'icône du badge ou 'false' pour désactiver l'icone

** ellipsis (boolean, optional) [default: false] : Si true, ajoute un span ellipsis autour du label

%>
<% eval(include('../../../../core/index.ejs')); %>

<%
let badge = locals.badge || {};
if (!badge.classes) badge.classes = [];
if (!badge.attrs) badge.attrs = {};
const markup = badge.markup || 'p';
badge.classes.push(prefix + '-badge');

switch(badge.size) {
	case 'sm':
			badge.classes.push(prefix + '-badge--sm');
		break;
}

if (badge.type !== undefined) badge.classes.push(prefix + '-badge--' + badge.type);

else if (badge.accent !== undefined) badge.classes.push(prefix + '-badge--' + badge.accent);

if (badge.icon === false) badge.classes.push(prefix + '-badge--no-icon');
else if (badge.icon !== undefined) badge.classes.push(prefix + '-icon-' + badge.icon);

if (badge.ellipsis) badge.label = `<span class="${prefix}-ellipsis">${badge.label}</span>`;
%>

<<%= markup %> <%- includeClasses(badge.classes)%>><%- badge.label %></<%= markup %>>
