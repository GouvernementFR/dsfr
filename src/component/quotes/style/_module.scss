////
/// Quotes Module
/// @group quotes
////

#{ns(quote)} {
  @include relative;
  @include margin(0);
  @include padding(0 2v 8v 2v);
  @include padding(0 0 0 8v, md);

  @include icon(chat-quote-line,lg) {
    display: block;
    @include padding-bottom(2v);
  }

  @include after('', 'block') {
    @include absolute(0,null, null, 2v, calc(50% - #{space(4v)}), 100%);
    pointer-events: none;
    @include respond-from(md) {
      left: 0;
    }
  }

  &--column {
    @include display-flex(column, flex-start, center);
    @include margin-left(52v, md);

    @include respond-from(md) {
      @include min-height(52v);
    }

    #{ns(quote__author)} {
      @include margin-left(21v);
      @include margin-left(0, md);
    }

    #{ns(quote__source)} {
      @include margin-left(21v);
      @include margin-left(0, md);
    }

    figcaption {
      @include min-height(17v);
      @include display-flex(column, flex-start, center);

      @include respond-from(md) {
        @include min-height(auto);
      }
    }
  }

  blockquote {
    @include margin(0);

    p {
      @include margin-bottom(4v);
      @include text-style(xl);
      @include font-weight(bold);

      // Pour ajouter les guillets en css
      // @include before('«\0000A0', 'inline-block');

      // &:last-of-type() {
      //   @include after('\0000A0»', 'inline-block');
      // }
    }
  }

  &__author {
    @include font-weight(bold);
    @include text-style(sm);
    @include margin-bottom(1v);
  }

  &__image {
    @include size(17v);
    background-size: cover;
    border-radius: 50%;
    overflow: hidden;
    @include absolute;
    @include display-flex;

    img {
      @include size(100%, 100%);
    }

    @include respond-from(md) {
      @include absolute(50%,null,null,-52v,46v,46v);
      @include margin-top(-23v);
    }
  }

  cite {
    @include text-style(xs);
    font-style: italic;
  }

  figcaption {
    @include disable-list-style;

    li {
      @include text-style(xs);
    }

    #{ns(quote)}__source {
      @include display-flex(row,null,flex-start,wrap);

      li {
        display: inline-block;

        &:not(:last-child) {
          @include after('·', 'inline-block') {
            @include padding-x(1v);
          }
        }
      }
    }
  }
}
