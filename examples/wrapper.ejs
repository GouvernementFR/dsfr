<%

const dir = root + 'src/' + id + '/example/';

let sampling = false;

function getSample (include) {
  return (title, path, data, snippet, layout, layoutData) => {
    sampling = false;
    const cd = {...data};
    const sd = {...data};
    let component = include(path, JSON.parse(JSON.stringify(data)));

    if (locals.noSnippet) snippet = undefined;

    if (snippet === true) {
        sampling = true;
        let html =  include(path, JSON.parse(JSON.stringify(data)));
        sampling = false;
        html = beautify(html);

        html = html.replace(/(class=".*)\s(")/gm, '$1$2');
        html = html.replace(/&/g, '&amp;');
        html = html.replace(/</g, '&lt;');
        html = html.replace(/>/g, '&gt;');

        const accordion = {
            label: 'Extrait de code',
            collapseId: uniqueId('snippet'),
            content: '<pre class=" language-html"><code>' + html + '</code></pre>'
        };

        snippet = include(root + 'src/accordions/templates/ejs/accordion', accordion);
    }

    if (layout === undefined) layout = root + 'examples/layout';
    if (layoutData === undefined) layoutData = {};


    return include(layout, {...layoutData, title: title, component: component, snippet: snippet});
  }
}

locals.getSample = getSample;

const lorem = (insert, length) => {
  let content = 'Lorem ';
  content += sampling ? '[...] ' : 'ipsum dolor sit amet, consectetur ';
  content += !sampling || insert ? 'adipiscing, ' : '';
  content += insert ? insert + ' ' : '';
  content += !sampling || insert ? 'incididunt, ' : '';
  content += !sampling ? 'ut labore et dolore magna aliqua. Vitae sapien pellentesque habitant morbi tristique senectus et. Diam maecenas sed enim ut. Accumsan lacus vel facilisis volutpat est. Ut aliquam purus sit amet luctus. Lorem ipsum dolor sit amet consectetur adipiscing ' : insert ? '[...] ' : '';
  content += 'elit ut.';

  return content.substring(0, length);
}

locals.lorem = lorem;

locals.imgAltText = 'texte alternatif de l’image';

locals.contentPlaceholder = (text) => {
  return `[À MODIFIER - ${text}]`;
};

const imgContent = (src, alt, classes=[], style) => {
  const resp = `${prefix}-responsive-img`;
  if (classes.indexOf(resp) === -1) classes.push(resp);
  let img = '<img ';
  img += `src="${src || '../img/placeholder.16x9.png'}" `;
  if (classes.length > 0) img += `class="${classes.join(' ')}" `;
  if (style) img += `style="${style}" `;

  let comment;
  if (alt) {
    img += `alt="${locals.contentPlaceholder(locals.imgAltText)}" `;
    comment = '<!-- L’alternative de l’image (attribut alt) doit impérativement être renseignée et reprendre le texte visible dans l’image -->';
  } else {
    img += 'alt="" ';
    comment = '<!-- L’alternative de l’image (attribut alt) doit rester vide car l’image est illustrative et ne doit pas être restituée aux technologies d’assistance -->';
  }

  img += '/>\n' + comment;

  return img;
}

locals.imgContent = imgContent;

const randomContent = (id) => {
  let content = '<!-- données de test -->';
  if (sampling) return content;
  content += `<div><h4 class="${prefix}-h4" >Contenu ${id || ''}</h4>`;
  if (Math.random() < .4) content += imgContent();
  for (let i = Math.random() * 2; i > 0; i--) content += `<p>${lorem('<a href="test" target="_blank">link test</a>')}</p>`;
  content += '<ul>';
  for (let i = Math.random() * 2 + 1; i > 0; i--) {
    content += '<li>list item';
    if (Math.random() < .4) {
      content += '<ul>';
      for (let j = Math.random() * 2 + 1; j > 0; j--) content += '<li>list item niveau 2</li>';

      content += '</ul>';
    }
    content += '</li>';
  }
  content += '</ul></div>';
  return content;
};

locals.randomContent = randomContent;



if (locals.prepend === true) { %>
<%- include(root + '/src/' + id + '/example/prepend') %>
<% } %>

<% if (!locals.noHeading) { %>
<%- include('heading'); %>
<% } %>

<%
const path = dir + 'index';

const data = {id:undefined};

if (locals.wrapper === undefined) {
%>
    <%- include(path, data); %>
<% } else if (wrapper === 'col-8') {
%>
    <div class="<%= prefix %>-container">
        <div class="<%= prefix %>-grid-row <%= prefix %>-grid-row--center" >
            <div class="<%= prefix %>-col-md-8 <%= prefix %>-col-12" >
                <%- include(path, data); %>
            </div>
        </div>
    </div>
<% } else if (wrapper === 'container') { %>
    <div class="<%= prefix %>-container">
        <%- include(path, data); %>
    </div>
<% } %>
